<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://1908901.github.io/elliepang/feed.xml" rel="self" type="application/atom+xml" /><link href="https://1908901.github.io/elliepang/" rel="alternate" type="text/html" /><updated>2022-12-15T00:16:42-06:00</updated><id>https://1908901.github.io/elliepang/feed.xml</id><title type="html">Ellie</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">Hacks 3.12-3.13</title><link href="https://1908901.github.io/elliepang/2022/12/14/.12-hacks.html" rel="alternate" type="text/html" title="Hacks 3.12-3.13" /><published>2022-12-14T00:00:00-06:00</published><updated>2022-12-14T00:00:00-06:00</updated><id>https://1908901.github.io/elliepang/2022/12/14/.12-hacks</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unit 3 Sections 12-13 Hacks</title><link href="https://1908901.github.io/elliepang/2022/12/12/hacks12-13.html" rel="alternate" type="text/html" title="Unit 3 Sections 12-13 Hacks" /><published>2022-12-12T00:00:00-06:00</published><updated>2022-12-12T00:00:00-06:00</updated><id>https://1908901.github.io/elliepang/2022/12/12/hacks12-13</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unit 3.14-3.15 Hacks</title><link href="https://1908901.github.io/elliepang/2022/12/12/hacks-14-15.html" rel="alternate" type="text/html" title="Unit 3.14-3.15 Hacks" /><published>2022-12-12T00:00:00-06:00</published><updated>2022-12-12T00:00:00-06:00</updated><id>https://1908901.github.io/elliepang/2022/12/12/hacks-14-15</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Section 8 and 10 Hacks</title><link href="https://1908901.github.io/elliepang/2022/12/06/hacks.html" rel="alternate" type="text/html" title="Section 8 and 10 Hacks" /><published>2022-12-06T00:00:00-06:00</published><updated>2022-12-06T00:00:00-06:00</updated><id>https://1908901.github.io/elliepang/2022/12/06/hacks</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Hacks</title><link href="https://1908901.github.io/elliepang/2022/12/06/hacks.ipynb" rel="alternate" type="text/html" title="Hacks" /><published>2022-12-06T00:00:00-06:00</published><updated>2022-12-06T00:00:00-06:00</updated><id>https://1908901.github.io/elliepang/2022/12/06/hacks</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Section 8 and 10 Hacks" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Notes \n", "Iteration - Repitition of a Process \n", "\n", "For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated\n", "\n", "While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met\n", "\n", "Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0.\n", "\n", "Condition - Allows the computer to know whether or not to keep repeating the loop.\n", "\n", "increment/decrement - Modifies the counter variable after each repetition.\n", "\n", "Indexing / List Index - The position of an element in a list, starting from 0\n", "\n", "append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item.\n", "\n", "Elements [in a list] - An item in a list.\n", "\n", "Nesting - Having one data type or function inside another data type or function, such as lists or loops.\n", "\n", "Array - Another name for a list, depends on the language" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Exercise 1\n", "Task: \n", "Reverse a list utilizing features of lists and iteration\n", "Hint: Use two parameters with the range function" ] }, { "cell_type": "code", "execution_count": 4, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "List before reverse : [1, 2, 3, 4, 5]\n", "List after reverse : [5, 4, 3, 2, 1]\n" ] } ], "source": [ "original_list = [1, 2, 3, 4, 5]\n", "print(\"List before reverse : \",original_list)\n", "reversed_list = []\n", "for value in original_list:\n", " reversed_list = [value] + reversed_list\n", "print(\"List after reverse : \", reversed_list)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Exercise 2\n", "Task: \n", "Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array\n", "Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array\n", "Expected Output\n", "The sorted array from 1-10" ] }, { "cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0]\n", "array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n" ] } ], "source": [ "list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0]\n", "print(f\"array before sort {list}\")\n", "def insertion_sort(list):\n", " for index in range(1,len(list)): # repeats through length of the array\n", " value = list[index]\n", " i = index - 1\n", " while i >= 0:\n", " if value < list[i]:\n", " list[i+1] = list[i] # shift number in slot i to the right\n", " list[i] = value # shift value left into slot i\n", " i = i - 1\n", " else:\n", " break\n", "\n", "IS = insertion_sort(list)\n", "print(f\"array after sort {list}\")" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ " ## Multiple Choice Quiz \n", "\n", "I got a 9/10 on the quiz. \n", "\n", "![](quiz.PNG)\n", "\n", "To the question, \"How can we add something to the end of a list?\", I chose \"Extend\", instead of the correct answer, \"Append\". Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. \n" ] } ], "metadata": { "kernelspec": { "display_name": "Python 3.8.10 64-bit", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.10" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry></feed>