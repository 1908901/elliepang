{
  
    
        "post0": {
            "title": "GET POST CREATE Tips",
            "content": "Guidelines for working with GET and POST methods and fetching frontend to backend code: . Use GET method for retrieving data: The GET method should be used when retrieving data from the backend. This includes fetching data from a database or server, or retrieving data from a form. . | Use POST method for sending data: The POST method should be used when sending data to the backend. This includes submitting form data, creating new records in a database, or updating existing records. . | Implement error handling: When fetching data from the backend, make sure to implement error handling to handle any unexpected errors or responses. This can include using try-catch blocks, checking for response status codes, and displaying error messages to the user. . | Use asynchronous code: When fetching data from the backend, use asynchronous code to prevent the user interface from freezing. This can include using Promises, async/await, or callback functions. . | Keep security in mind: When sending data to the backend, make sure to use secure coding practices to prevent vulnerabilities such as SQL injection or cross-site scripting (XSS). This can include sanitizing user input, using prepared statements, or implementing CSRF protection. . | Use a server-side framework: When building a backend for your frontend, consider using a server-side framework such as Node.js, Ruby on Rails, or Django. These frameworks can help simplify backend development and provide useful features such as database connectivity and user authentication. . | Test thoroughly: When fetching data from the backend, make sure to test your code thoroughly to ensure that it works as expected. This can include testing across different browsers and devices, as well as testing edge cases and error handling scenarios. . |",
            "url": "https://1908901.github.io/elliepang/2023/02/27/post-guidelines.html",
            "relUrl": "/2023/02/27/post-guidelines.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3.16 Hacks",
            "content": "Notes . Vocab Definition . Simulation | A simpler abstraction that removes details that are unessesary or too complicated to simulate. Abstraction levels in a simulation varies depending on the situation. Simulations are a simple way to model complicated situations. | . Why would you make a simulation? | Simulations are needed for modeling complicated situations (such as population dynamics or flying a plane) in a much simpler way so that any user can still manage most aspects of the model without delving into complexities. | . Why simulations over experiment? | Simulations are safer, less expensive, repeatable, and can make predictions | . Hacks . Question Answer . Name(First+Last) | Ellie Pang | . 1 | x | . 2 | x | . 3 | C- To make the simulation more accurate | . 4 | C- Imperfections on aircraft | . 5 | C Situation considered | . 6 | A- simulation, because it&#39;s too dangerous to have this be an experiment | . 7 | A- simulation, we don&#39;t want to experiment with this because it could cause great harm on the environment | . 8 | x | . 9 | B- experiment/calculation because there is no need to simulate anything, this will only be a simple calculation of the average | . Extra Simulation . import random rolls = 4 # manipulate how many rolls total = 0 i = 0 while rolls != 0: # rolls dice for number of rolls diceroll = random.randint(1,6) # change the &quot;6&quot; to how many sides on the dice you want i = i + 1 print(&quot;Roll&quot;, i, &quot;is a &quot;, diceroll) total = total + diceroll rolls = rolls - 1 print(&quot;Sum of dice rolls:&quot;, total) . Roll 1 is a 4 Roll 2 is a 3 Roll 3 is a 3 Roll 4 is a 4 Sum of dice rolls: 14 . This simulation represents a six-sided dice roll. It calculates the sum of the rolls and also shows which random number was rolled for each turn. The number of sides can be changed by changing the 6 in random.randint (1,6) to any number. You can also change the number of rolls by manipulating rolls = 4. . Extra Simulation x2 . import random print(&quot;Coin flip simulation!&quot;) e = 100 h = 0 #heads t = 0 #tails for i in range(e): flip = random.randint(1,2) # random number between 1 and 2 if flip == 1: h = h + 1 # calculates number of heads else: t = t + 1 # calculates number of tails print(&#39;Number of heads:&#39;, heads) print(&#39;Number of tails:&#39;, tails) . Coin flip simulation! Number of heads: 42 Number of tails: 58 . This simulation represents a coin toss of 100 tosses. I set e equal to the sample size and h and t to 0 which is the default value. Then I used a for loop, with each flip, the procedure will either give heads or tails until the coin has been flipped 100 times. Using a simulation is much more efficient and better than actually running an experiment. Simulations save a lot of time and effort. It would take forever to flip a coin 100 times. .",
            "url": "https://1908901.github.io/elliepang/2023/02/27/hacks-16.html",
            "relUrl": "/2023/02/27/hacks-16.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Frontend Tips",
            "content": "Guidelines for frontend development: . Focus on usability: Make sure that your interface is intuitive and easy to use. This includes clear navigation, consistent layouts, and well-organized content. . | Be responsive: Your frontend should be designed to work across a variety of devices and screen sizes. This means designing with responsive layouts, breakpoints, and font sizes in mind. . | Optimize for speed: Users expect fast load times, so make sure your frontend is optimized for performance. This includes minimizing HTTP requests, using efficient coding practices, and compressing images and other media. . | Keep it simple: Avoid cluttering your interface with unnecessary elements. Instead, focus on simplicity and minimalism to create an elegant and streamlined user experience. . | Prioritize accessibility: Your frontend should be accessible to all users, including those with disabilities. This means using proper HTML tags, providing alt text for images, and ensuring that your interface can be navigated with a keyboard. . | Stay up to date: Keep up with the latest frontend development trends and best practices. This includes staying current with new technologies, libraries, and frameworks. . | Test thoroughly: Make sure to test your frontend thoroughly before launching it to ensure that everything works as expected. This includes testing across different browsers, devices, and screen sizes. . |",
            "url": "https://1908901.github.io/elliepang/2023/02/27/frontendtips.html",
            "relUrl": "/2023/02/27/frontendtips.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Hacks 3.12-3.13",
            "content": "Notes 3.12 - 3.13 pt1 . A procedure is a named group of programming instructions that may have parameters and return values. . | Procedures can be reffered to as method or function depending on the programing language. . | A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. . | Parameters are input values of a procedure. . | Argurments specifcy the values of the parameters when a procedure is called. . | If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. . | If you see a return statement you automatically end the procedure even if there is more statements . | .",
            "url": "https://1908901.github.io/elliepang/2023/02/27/.12-hacks.html",
            "relUrl": "/2023/02/27/.12-hacks.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "N@tM Blog",
            "content": "N@tM Blog . . I had a great time at Night at the Museum where I had the opportunity to view numerous projects by other people. One project that particularly caught my attention was a menstrual cycle tracking app developed by a group of girls. This app utilized cycle data to predict the user’s next cycle and provided useful resources. This project stood out to me because some similar apps, like Flo, have been known to collect users’ information and report them in states where abortion is illegal. The girls who presented this project provided a wealth of information, which was new to me. . | Another impressive project was a news website that allowed users to input their own stories, which would then appear in a news format. Apart from these projects, I also visited the art and ceramics rooms. Among these, the AP Art room was particularly impressive, with many excellent projects on display. . | I also took a couple notes from Becca’s groups club program: . Listing the purposes of the project . | Listing the features and why they are connected to the purpose/project . | How the features work, what the limits are and what it is currently doing. What you want to plan for the feature in the future. . | Showing how some features can do CRUD . | What the feature is with the picture and accurate design, screenshots of what the person does . | Tells roles of the person and what they did specifically for the project . | Reason of why they created this project and how it is connected to the community and real world . | Talk of the “Model, View, Control Flow” . | She is showing the API and the users that are created throughout and how the users are used and basically data abstraction used in the program. . | Showing the importance of the project . | She created a search option, an ability to log hours, to add clubs, to show clubs in an organized manner . | howing the basic overview that shows the API and database and the basic coding for backend in general using flow charts. . | Shows the plan of project development (scrumboard) through spreadsheats . | . | It was really interesting to see my classmate’s ideas and project plan come together to create a functional program. . | . Takeaways for the Future . Next time, I would like to implement a more efficient feature. The feature I created this time involved a lot of repetitive copying and pasting of code to display the cards. However, this method is not efficient, as it would take a long time if there were more than twenty dogs in the database. To improve this, I want to combine more JavaScript and HTML code to create a more streamlined approach. | .",
            "url": "https://1908901.github.io/elliepang/2023/02/17/Night-At-The-Museum.html",
            "relUrl": "/2023/02/17/Night-At-The-Museum.html",
            "date": " • Feb 17, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Big Idea 5.5 and 5.6",
            "content": "5.5 Legal and Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. | Open Source MIT license: using code freely and making and distributing closed source versions . | Open Source GPL license: anything you want with your project except distributing closed source versions . | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. | Software Licenses help to protect the software to ensure that technology is under protection and will not be copyrighted by others. This keeps the software safe from being taken. Digital Rights can be used to protect, play, and/or distribute content. This can be used to prevent pyrating movies and music. Legal and ethical issues can include things like theft, phishing, and illegal file downloading. | . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. | FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . | Personal blog: I chose to use the MIT one for my personal blog because I would like to have my blog be public. This allows for others to see and access my code. . | . -Frontend and Backend: We chose to use the MIT license because it allows for our project to be public. We hope that people are able to use our website for their website and others can get help with their website through our website. . 5.6 Safe Computing . Describe PII you have seen on project in CompSci Principles. | Public and private keys used in our APCSP class | . What are your feelings about PII and your personal exposure? | PII are really good to helping enhance the project that you are working on. It is good to keep your information safe and private because that way it will ensure for safety. | . Describe good and bad passwords? What is another step that is used to assist in authentication. | A good password is one that has a lot of symbols and is not something that someone could guess. A bad password could be just your name or a couple of number. Another step that is used to assist in authentication can include face id or even email. | . Try to describe Symmetric and Asymmetric encryption. | Symmetric: key used for both encryption and decrytpion Asymmetric: public and private key | . Provide an example of encryption we used in AWS deployment. | An example of encrytion we used is port numbers | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | Getting a text saying that you need to confirm an account and recieving a link. Clicking on the link and inputting your information when it is a scam. They end up taking all of your information | .",
            "url": "https://1908901.github.io/elliepang/2023/02/08/5.6-5.5.html",
            "relUrl": "/2023/02/08/5.6-5.5.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "My Feature Progress",
            "content": ". After collaborating with my teamates, I was able to complete most of the code that I needed for the backend portion of my feature. . | I stll need to work out the errors in the backend but have started the design process for my feature. . | .",
            "url": "https://1908901.github.io/elliepang/2023/02/05/progress.html",
            "relUrl": "/2023/02/05/progress.html",
            "date": " • Feb 5, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "5.3-4 Hacks",
            "content": "5.3 . What is bias in computing? . Computing bias is the term used to describe a computer program or piece of software that unfairly favors one input or population over another. This could have occurred by chance or on intent. One example of computational bias is the HP facial recognition system, which works better on people with lighter skin tones. This is possibly because they haven’t worked with people who have darker skin tones before. | . 5.4 . The creators did not make on purpose, It can only recognize white faces because it was developed using only data from white people. Another justification for reducing the digital divide is the possibility that problems like these wouldn’t occur as frequently if everyone had access to computers. Segregation is something that only white people have, thus by keeping black people out of it, you are also losing a major market sector. This needs to be corrected. | . Hacks . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . Given the large number of computer science students we have, we might create a platform for helping students with their homework in coding. We might ask people to email us the pertinent bits of their working code when we are stuck on a particular assignment, post it on the platform, and explain the code. We would be able to ask questions and be asked questions. | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . Because our website is built on assisting people in adopting dogs and finding a furry friend, crowdsourcing could benefit our project. By having many people use our website, we are able to save reviews and be able to reflect on this and renew our website to our best version. | . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . We could request that instructors, parents, and students visit our website during N@tM. We can also create a review page where they may indicate what they liked and didn’t like. We can also solicit user feedback on any suggestions for expanding our website in the upcoming year. They can offer feedback on what they enjoyed, suggestions for changes, and suggestions for new features. | .",
            "url": "https://1908901.github.io/elliepang/2023/02/05/Blog.html",
            "relUrl": "/2023/02/05/Blog.html",
            "date": " • Feb 5, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Project Plan and Rebecca's Tutorial Blog",
            "content": "Notes from Presentation . Listing the purposes of the project . Listing the features and why they are connected to the purpose/project . How the features work, what the limits are and what it is currently doing. What you want to plan for the feature in the future. Showing how some features can do CRUD . What the feature is with the picture and accurate design, screenshots of what the person does . Tells roles of the person and what they did specifically for the project . Reason of why they created this project and how it is connected to the community and real world Talk of the “Model, View, Control Flow” . She is showing the API and the users that are created throughout and how the users are used and basically data abstraction used in the program. . Showing the importance of the project . She created a search option, an ability to log hours, to add clubs, to show clubs in an organized manner . Showing the basic overview that shows the API and database and the basic coding for backend in general using flow charts. . Shows the plan of project development (scrumboard) through spreadsheats . Shows the manifesto . How we incorported Rebecca’s talk . We made a flowchart of our ideas, weekly plan, and individual tasks. . . Preview Outline materials for CB . purpose and function list + elements in list manage complexity student developed procedure algorithm implementation- selection, sequencing, iteration testing . My Portion of Project for CPT . For our Fluffy Friend Finder project, my portion of the project is going to be a pet diagnoser under the vet section. The user will input the symptoms that their pet has and the program will diagnose the dog, recommend the owner to a veternarian, and give suggestions for treatment. . Video Plan . In my video I will show the user completing a quiz/survey that asks about the pet’s symptoms. After submiting, the user will receive their pet’s diagnoses, treament, and recommendations for professional help. .",
            "url": "https://1908901.github.io/elliepang/2023/01/31/project-plan.html",
            "relUrl": "/2023/01/31/project-plan.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "MCQ Test Corrections and Reflection",
            "content": ". Question My Answer Correct Answer Explanation . 15 | | | I chose the grid that correctly moves the robot to the gray square, in option D the grid incorrectly moves the robot to the gray square. | . 17 | The output will be true if input B is true; otherwise it will be false | The output will be true no matter what the value of input B is. | This option is correct. Because the value of input A is true, the resulting value coming out of the OR gate must be true. Because the value of input C is true, the resulting value coming out of the AND gate is true. The value of input B did not affect this result. | . 27 | coin_flip = 1 | heads_counter = 2 | This option is correct. There are 4 trials in the simulation, and the goal is to determine if there were an equal number of head and tails, or, in other words, 2 heads. In Step 2, heads_counter is incremented when coin_flip represents heads. The simulation will result in an equal number of heads and tails if heads_counter = 2. | . 28 | Algorithm I always works correctly, but Algorithm II only works correctly when the maximum value is not the first value in the list. | Algorithm II always works correctly, but Algorithm I only works correctly when the maximum value is greater than or equal to − 1. | This option is correct. If the list contained [-7, -2, -5], algorithm I would initially set the value of max to -1. Since no data value in the list is greater than -1, the value of max would remain -1, which is not the correct behavior. Algorithm II would set the initial value of max to -7, and then change the value of max to -2. For all cases, algorithm II would return the correct maximum value in the list. | . 30 | In all cases, a binary search of a sorted list requires fewer comparisons than a linear search. | Generally, the advantage of using a binary search over a linear search increases as the size of the list increases. | This option is correct. A binary search on a sorted list compares the target value to the middle value in the list. If that value is not the target value, the search continues on either the lower half or the upper half of the list, depending on whether the target value was lower than or greater than the number in the middle of the list. This process is repeated on each sublist until the target is found or there is no sublist to search. Due to this halving process, a binary search is more efficient than a linear search. As the size of the list increases, the improvement in search efficiency increases. | . 34 | I and III only | I, II, and III | This option is correct. Statement I is correct because software simulations can usually be built before a prototype car. Statement II is correct because simulations can be made that model components and their interactions. Statement III is correct because the results of computer simulations may be useful in presenting design possibilities to customers. | . 36 | Searching | Selection | This option is correct. The original algorithm added all the integers, but the new algorithm needs to add only the even ones. The new algorithm needs to choose whether or not the current integer in the list is even. | . 37 | A program that calculates a student’s grade based on the student’s quiz and homework scores | A program that finds the shortest driving route between two locations on a map | This option is correct. Finding the shortest driving route is an optimization problem that cannot be solved in a reasonable time, and a heuristic is a technique that can find an approximate solution more quickly when exact methods are too slow. | . 40 | Changing line 3 to a=b+10 | Changinging lin 3 to b=10 | This option is correct. Line 3 is executed only if the Boolean expression a equals zero evaluates to true. In the current version of the code the statement b, leftward arrow, a plus 10. would result in the value of 10 being stored in the variable b, since a equals 0. Changing line 3 to b, leftward arrow 10. would not affect the result. | . 42 | Is anyone there? | Better late than never | Sincle “is anyone there?” is absent”, then the program should display, “better late than never.” | . 43 | y+3 | 3y | This option is correct. The value of the variable result is initially set to 0. The outer REPEAT block is executed three times, and the inner REPEAT block is executed y times. Any block inside both of these blocks will be executed 3y (3 multiplied by y) times. Since the innermost block increases the value of the variable result by 1, the final value of the variable result is 3y. | . 44 | last row first colum | last row thrid colum | This option is correct. The robot moves in repeated segments of two MOVE_FORWARD and one ROTATE_RIGHT. After three of these segments, the robot would end up in the position shown by this response. | . 47 | coin_flip=1 | heads_counter=2 | This option is correct. There are 4 trials in the simulation, and the goal is to determine if there were an equal number of head and tails, or, in other words, 2 heads. In Step 2, heads_counter is incremented when coin_flip represents heads. The simulation will result in an equal number of heads and tails if heads_counter = 2. | .",
            "url": "https://1908901.github.io/elliepang/2023/01/31/mcq.html",
            "relUrl": "/2023/01/31/mcq.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 5 Reflections",
            "content": "Big Idea 5.1 Beneficial and Harmful Effects . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing . detail-oriented, identify syntax errors in your code, at the same time, long screen time is a negative effect. . | While computer programs can help you double check your work, instead of doing your work to learn the necessary critical thinking and skills to be successful in the future, people can cheat and just copy the answers. multitasking becomes very easy, however, it could be harder to focus on one task seriously. . | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . Dopamine issue is real, when we scroll, especially on Tiktok or Instagram, we get immediate hits of dopamine, which is one of reasons why Youtube is a dying platform. Videos are too long, people want a 60 second or less video. As a result, we are losing our ability to focus and find joy in daily, mundane tasks. I found myself continously scrolling on Tiktok during quarantine, and I wasn’t doing the things I wanted to finish. After I deleted the app, I replaced the time I was spending on social media and swapped it for real hobbies and activities like calling my friends, playing the guitar, etc. | . # Big Idea 5.2 Digital Divide . How does someone empower themself in a digital world? . Someone can empower themself in the digital world by making sure that they are informed on all the new technological advancements, getting all the information they can, so that they aren’t easily scammed or tricked. . | Exploring all the fields in the interdisciplinary digital world such as UX/UI, software engineering, data mining, etc., you can make sure that you know what interests you and further explore that area. . | A lot of the times, people are turned away from computer science because they think it’s just coding, but there are so many different fields to pursue and you are sure to find something that appeals to you. . | . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . I’m a member of Girls in CS, a club at Del Norte that . In my CSP classes, there are less girls than boys and when I try to convince my friends to do CS events with me, they always think that it’s too hard or boring. | . I- think since my friends are already pursuing different areas now, it might be too late to convince them to learn cs, which is why I think it’s important to start empowering kids from a young age to consider this field. . Through hosting hackathons, workshops, and seminars that educate others on how fun and challenging it can be. | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . paper is blocking digital empowerment, we’ve been using paper for so long that it’s what we’re used to. As a result, some people don’t want to use the computer if not necessary because it can be difficult to learn. . | But it’s important to to learn how to use a computer, especially in this day in age, everything is online, sticking to paper will only cause you to restrict yourself. . | Yes, there are such barriers at Del Norte. In English, we still had to write on-demands on paper. We were only give 40 minutes and I didn’t understand a situation in real life where we would only have paper and 40 minutes to write an essay. Instead of practicing writing fast, you should practice your typing skills, which would be more efficient and faster in the long run, allowing you to write more. . | . 5.1-5.2 Blog . Think of three beneficial effects of your projects based on 5.1 Unit . help humane society with donations h | elp abandoned dogs and dogs without homes find good owners . | find the dog that matches your life the best so that it is the easiest transition | . Think of a potential harmful effect of your project. . There could be an error in the code and the people could be matched to a dog that doesn’t fit their criteria and the dog may be returned. Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . | pros- keeps people on track at school, for example if students want to use instagram, pinterest, or other social medias, they have to wait until they go home . | cons- for computer science class, certain websites are banned, like when we want to deploy a website. Therefore, we have to use vpn or a hot spot which can be inconvenient. What concerns do you have personally about the digital divide? For yourself or for others. . | One concern I have is that others who live in poverty and don’t have access to the technology that we have may fall behind and not be educated on all the changes in the digital world. Additionally, they may be less encouraged to pursue jobs in the tech industry because of a lack of opportunity. As a result, certain demographics may be less represented in the technology we use. . | .",
            "url": "https://1908901.github.io/elliepang/2023/01/23/disscusion-circle-questions.html",
            "relUrl": "/2023/01/23/disscusion-circle-questions.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Problems and Solutions",
            "content": "Major Problem of this weeks hacks . When doing the api hacks and trying to add a user in postman, I kept getting the error: “name is non-existent or is less than two letters” or ““uid is non-existent or is less than two letters” | After collaborating with my team and asing questions I changed name, uid, and password to my personal class id’s and was able to send changes in postman sucessfully. | The image below shows where I changed the variables in the users.py file under the api folder | . .",
            "url": "https://1908901.github.io/elliepang/2023/01/22/problems.html",
            "relUrl": "/2023/01/22/problems.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "hacks table submissions",
            "content": "Submission One . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | The student met all the criteria with their project (input, program functionality, and output) but did not describe the purpose of their function, just what their program is without elaborating. | . Data Abstraction | 0 | 1 | I saw that the data was not contained in animalList. | . Managing Complexity | 0 | 0 | The user didn’t explain how code would be different without the list and doesn’t have complexity, Collegeboard also says that, “neither contain code using a list. The code is not complex.” | . Procedural Abstraction | 1 | 1 | The user does include a parameter but fails to explain overall functionality of the procedure. | . Algorithm Implementation with specific variables | 1 | 1 | the user doesn’t explain how the algorithm could be recreated as the description is very minimal although they do include iteration, sequencing, and selection. | . Testing | 1 | 1 | The submission includes different examples of inputs and explains the results and how they are different. | . Submission Two . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 1 | the student explains both the purpose of his program (“explore creativity”) and how it functions, they also explain how the output will change based on user input. | . Data Abstraction | 0 | 1 | the student explains and identifies a list (nounList) and explains how it functions in fulfilling the programs purpose (so that the program makes logical sense) | . Managing Complexity | 0 | 1 | This gets the point because the response explains how complexity is managed and explains how the program would be different if the list was not used, he explains how the code would be less efficient and more cluttered. | . Procedural Abstraction | 1 | 1 | the response identifies the procedure createPoems and explains how it contributes to the overall functionality. They also has at least one parameter, they use 4 parameters. | . Algorithm Implementation with specific variables | 1 | 1 | I agree with CB because the response includes selection, sequencing, and iteration as well as in depth explanations for each. The response also explains how the algorithm could be recreated. | . Testing | 1 | 1 | The response explains the different conditions and shows how different inputs result in different outputs. | . Submission Three . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 1 | the student explains both the purpose of his program (“explore creativity”) and how it functions, they also explain how the output will change based on user input. | . Data Abstraction | 0 | 0 | the response fails to explain the overall function, such as for entertainment. However, they meet every other requirement with explanations of function, input and output. | . Managing Complexity | 0 | 0 | They explain how they manage complexity, “Using lists allows the data to be stored, accessed, and manipulated in an easier, cleaner-looking way.” The response explains how the character can be stored in one variable instead of seven, which is much more efficient, condensed coding. Therefore, they received the point. | . Procedural Abstraction | 1 | 0 | the response explains how the function works and how contributes to overall functionality of the program. Collegeboard also says that, “Using lists allows the data to be stored, accessed, and manipulated in an easier, cleaner-looking way. | . Algorithm Implementation with specific variables | 1 | 0 | I agree with CB because the response includes explanation of iteration, sequencing, and selection and shows how the algorithm could be recreated. There are also two parameters identified. | . Testing | 1 | 0 | the response explains two different conditions and calls, which shows how different inputs will result in different outputs. | . Submission Four . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | this response successfully addresses every requirement, with a purpose (test critical thinking), overall function, and input and output explanations. | . Data Abstraction | 1 | 1 | the student explains and identifies a list (guesses) and explains what’s in the list, but doesn’t explain overall function or purpose of the list. Collegeboard had similar ideas but didn’t mention purpose, they said “in the second code segment, data stored in the list is not being used; only the length of the list is accessed. So the response does not meet this criteria.” | . Managing Complexity | 1 | 1 | The response doesn’t get the point because they do not explain how the code could be written differently. CB says, “The use of the list is merely to act as a counter, so it can be replaced with a single counter variable.” | . Procedural Abstraction | 1 | 1 | the response explains how the function works and how contributes to overall functionality of the program. Student developed procedure (isitcorrect) and has a parameter. | . Algorithm Implementation with specific variables | 1 | 1 | I agree with CB because the response includes explanation of iteration, sequencing, and selection and shows how the algorithm could be recreated. | . Testing | 1 | 1 | I disagreed with CB at first since the response had two different calls that have different outputs based on the input. CB says that “The response gives the conditions being tested rather than two different arguments that cause a different segment of code to execute. Arguments should be specific values used in the call to the procedure.” | . Overall, I think that my scoring and collegeboard’s were pretty much the same. When I create my own create task I think it will be very important to not only meet every criterion but also to have a little more than what is required. This way, if collegeboard thinks that one of the lists (example) I have doesn’t manage complexity, I will still have other lists that could fill this gap. In addition, I think that I will have to be very specific in my write-up and answer the questions precisely. .",
            "url": "https://1908901.github.io/elliepang/2023/01/16/performance.html",
            "relUrl": "/2023/01/16/performance.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "hacks table submissions",
            "content": "Submission One . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | The student met all the criteria with their project (input, program functionality, and output) but did not describe the purpose of their function, just what their program is without elaborating. | . Data Abstraction | 0 | 0 | I saw that the data was not contained in animalList | . Managing Complexity | 0 | 1 | It was slightly confusing to me when reading their response, however collegeboard gave them a higher score. I looked back at the rubric and concluded that their score was accurate from collegeboard. | . Procedural Abstraction | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Algorithm Implementation with specific variables | 1 | 1 | I gave the student the same score as collegeboard. After reviewing the rubric, I thought that this student met the guidelines with no issues. | . Testing | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | .",
            "url": "https://1908901.github.io/elliepang/2023/01/13/performance2.html",
            "relUrl": "/2023/01/13/performance2.html",
            "date": " • Jan 13, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, classOf, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self.classOf = classOf self.dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters #getter @property def classOf(self): return self._classOf #setter @classOf.setter def classOf(self, classOf): self._classOf = classOf #getter @property def dob(self): return self._dob #setter @dob.setter def dob(self, dob): self._dob = dob # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;, classOf: &quot;{self.classOf}&quot;, dob: &quot;{self.dob}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password}, classOf: {self._classOf}, dob:{self.dob})&#39; # tester method to print users def tester(users, uid, psw, classOf, dob): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, classOf=&#39;2020&#39;, dob=&#39;2003-11-4&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, classOf=&#39;1993&#39;, dob=&#39;1979-11-3&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, classOf=&#39;1865&#39;, dob=&#39;1845-2-21&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, classOf=&#39;1790&#39;, dob=&#39;1772-4-16&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, classOf=&#39;2003&#39;, dob=&#39;1988-1-30&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;, &quot;1865&quot;, &quot;2003-11-4&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;Sean Yeung&quot; u.uid = &quot;sy1055&quot; u.set_password(&quot;123qwerty&quot;) u.classOf = &quot;2013&quot; u.dob = &quot;1995-1-1&quot; u = tester(users, u.uid, &quot;123qwerty&quot;, &quot;2013&quot;, &quot;1995-1-1&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$dFT...&#34;, classOf: &#34;2020&#34;, dob: &#34;2003-11-4&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$aeu...&#34;, classOf: &#34;1993&#34;, dob: &#34;1979-11-3&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$7R1...&#34;, classOf: &#34;1865&#34;, dob: &#34;1845-2-21&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$fMa...&#34;, classOf: &#34;1790&#34;, dob: &#34;1772-4-16&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Z5T...&#34;, classOf: &#34;2003&#34;, dob: &#34;1988-1-30&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$dFT...&#34;, classOf: &#34;2020&#34;, dob: &#34;2003-11-4&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$aeu...&#34;, classOf: &#34;1993&#34;, dob: &#34;1979-11-3&#34; * name: &#34;Sean Yeung&#34;, id: &#34;sy1055&#34;, psw: &#34;sha256$FGI...&#34;, classOf: &#34;2013&#34;, dob: &#34;1995-1-1&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$fMa...&#34;, classOf: &#34;1790&#34;, dob: &#34;1772-4-16&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Z5T...&#34;, classOf: &#34;2003&#34;, dob: &#34;1988-1-30&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$dFT4EIwN2EhlYOIZ$1de100fea6860db29e939fea00136f5eb8df760b811b37351270e0b95bfd8996&#34;, &#34;_classOf&#34;: &#34;2020&#34;, &#34;_dob&#34;: &#34;2003-11-4&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$aeuQOdB3dUsv6G10$0dcef2750dc799f4a4369f5d872ee6c113ad46e27765fd0aeead3288bc4e54af&#34;, &#34;_classOf&#34;: &#34;1993&#34;, &#34;_dob&#34;: &#34;1979-11-3&#34;}, {&#34;_name&#34;: &#34;Sean Yeung&#34;, &#34;_uid&#34;: &#34;sy1055&#34;, &#34;_password&#34;: &#34;sha256$FGItqoXjGGcQRdci$f580d3f1103ed797268318591cf04caa5562c4656ceb8f56cad65aded60de737&#34;, &#34;_classOf&#34;: &#34;2013&#34;, &#34;_dob&#34;: &#34;1995-1-1&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$fManm5jBijJvw9Fh$4f56b1c9515c753f9317c92fee0cdc4470c604b79513dc846d56ccec757cfd09&#34;, &#34;_classOf&#34;: &#34;1790&#34;, &#34;_dob&#34;: &#34;1772-4-16&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$Z5TbssqkdLr5w54c$26937cd6eeeaac98867d52e7bfe97bff162b2a677ebf89cbef0808d75e6d167a&#34;, &#34;_classOf&#34;: &#34;2003&#34;, &#34;_dob&#34;: &#34;1988-1-30&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$dFT4EIwN2EhlYOIZ$1de100fea6860db29e939fea00136f5eb8df760b811b37351270e0b95bfd8996&#34;, &#34;_classOf&#34;: &#34;2020&#34;, &#34;_dob&#34;: &#34;2003-11-4&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$aeuQOdB3dUsv6G10$0dcef2750dc799f4a4369f5d872ee6c113ad46e27765fd0aeead3288bc4e54af&#34;, &#34;_classOf&#34;: &#34;1993&#34;, &#34;_dob&#34;: &#34;1979-11-3&#34;}, {&#34;_name&#34;: &#34;Sean Yeung&#34;, &#34;_uid&#34;: &#34;sy1055&#34;, &#34;_password&#34;: &#34;sha256$FGItqoXjGGcQRdci$f580d3f1103ed797268318591cf04caa5562c4656ceb8f56cad65aded60de737&#34;, &#34;_classOf&#34;: &#34;2013&#34;, &#34;_dob&#34;: &#34;1995-1-1&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$fManm5jBijJvw9Fh$4f56b1c9515c753f9317c92fee0cdc4470c604b79513dc846d56ccec757cfd09&#34;, &#34;_classOf&#34;: &#34;1790&#34;, &#34;_dob&#34;: &#34;1772-4-16&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$Z5TbssqkdLr5w54c$26937cd6eeeaac98867d52e7bfe97bff162b2a677ebf89cbef0808d75e6d167a&#34;, &#34;_classOf&#34;: &#34;2003&#34;, &#34;_dob&#34;: &#34;1988-1-30&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2001, 12, 31) age = calculate_age(dob) print(age) . 21 . Age Hack Helper . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) #getter @property def classOf(self): return self._classOf #setter @classOf.setter def classOf(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Kaylee Hou&#39;, uid=&#39;kaylee&#39;, password=&#39;kaylee88&#39;, dob=date(2005, 10, 30), classOf=&#39;2023&#39;) u2 = User(name=&#39;Theodore Huntalas&#39;, uid=&#39;Theo&#39;, password=&#39;theoh123&#39;, dob=date(2006, 1, 31), classOf=&#39;2024&#39;) u3 = User(name=&#39;Haeryn Yu&#39;, uid=&#39;haeryn&#39;, password=&#39;hae1ryn&#39;, dob=date(2007, 4, 29), classOf=&#39;2025&#39;) u4 = User(name=&#39;Ellie Pang&#39;, uid=&#39;ellie&#39;, password=&#39;e11ie&#39;, dob=date(2007, 11, 1), classOf=&#39;2025&#39;) print(&quot;Print users info:&quot;) print(u1) print(u2) print(u3) print(u4) print(&quot; nJSON ready string: n&quot;, u1, u2, u3, u4,&quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . Print users info: {&#34;name&#34;: &#34;Kaylee Hou&#34;, &#34;uid&#34;: &#34;kaylee&#34;, &#34;dob&#34;: &#34;10-30-2005&#34;, &#34;age&#34;: 17, &#34;classOf&#34;: &#34;2023&#34;} {&#34;name&#34;: &#34;Theodore Huntalas&#34;, &#34;uid&#34;: &#34;Theo&#34;, &#34;dob&#34;: &#34;01-31-2006&#34;, &#34;age&#34;: 16, &#34;classOf&#34;: &#34;2024&#34;} {&#34;name&#34;: &#34;Haeryn Yu&#34;, &#34;uid&#34;: &#34;haeryn&#34;, &#34;dob&#34;: &#34;04-29-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: &#34;2025&#34;} {&#34;name&#34;: &#34;Ellie Pang&#34;, &#34;uid&#34;: &#34;ellie&#34;, &#34;dob&#34;: &#34;11-01-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: &#34;2025&#34;} JSON ready string: {&#34;name&#34;: &#34;Kaylee Hou&#34;, &#34;uid&#34;: &#34;kaylee&#34;, &#34;dob&#34;: &#34;10-30-2005&#34;, &#34;age&#34;: 17, &#34;classOf&#34;: &#34;2023&#34;} {&#34;name&#34;: &#34;Theodore Huntalas&#34;, &#34;uid&#34;: &#34;Theo&#34;, &#34;dob&#34;: &#34;01-31-2006&#34;, &#34;age&#34;: 16, &#34;classOf&#34;: &#34;2024&#34;} {&#34;name&#34;: &#34;Haeryn Yu&#34;, &#34;uid&#34;: &#34;haeryn&#34;, &#34;dob&#34;: &#34;04-29-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: &#34;2025&#34;} {&#34;name&#34;: &#34;Ellie Pang&#34;, &#34;uid&#34;: &#34;ellie&#34;, &#34;dob&#34;: &#34;11-01-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: &#34;2025&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Kaylee Hou&#39;, &#39;_uid&#39;: &#39;kaylee&#39;, &#39;_password&#39;: &#39;sha256$NpL9NoRTCRY60Zrl$4a1bb1f83a1c78a2adf8be02bd4ab173201e7b9ae2cbfaedb0867fbe343bb7a5&#39;, &#39;_dob&#39;: datetime.date(2005, 10, 30), &#39;_classOf&#39;: &#39;2023&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Kaylee Hou, uid=kaylee, password=sha256$NpL9NoRTCRY60Zrl$4a1bb1f83a1c78a2adf8be02bd4ab173201e7b9ae2cbfaedb0867fbe343bb7a5,dob=2005-10-30, classOf=2023) . My Class Design . import json class userInfo: def __init__(user, firstName, lastName, activity, minutesPerWeek, activityName): user._firstName = firstName # variables with self prefix become part of the object, user._lastName = lastName user._activity = activity user._minutesPerWeek = minutesPerWeek user._activityName = activityName # first name getter @property def firstName(user): return user._firstName # first name setter @firstName.setter def firstName(user, firstName): user._firstName = firstName # last name getter @property def lastName(user): return user._lastName # last name setter @lastName.setter def lastName(user, lastName): user._lastName = lastName #activity getter @property def activity(user): return user._activity #activity setter @activity.setter def activity(user, activity): user._activity = activity #minutesPerWeek getter @property def minutesPerWeek(user): return user._minutesPerWeek # minutesPerWeek setter @minutesPerWeek.setter def minutesPerWeek(user, minutesPerWeek): user._minutesPerWeek = minutesPerWeek #activityName getter @property def activityName(user): return user._activityName # activityName setter @activityName.setter def activityName(user,activityName): user._activityName = activityName # output content using str(object) in human readable form, uses getter def __str__(user): return f&#39;first name: &quot;{user.firstName}&quot;, last name: &quot;{user.lastName}&quot;, activity: &quot;{user.activity}&quot;, minutes per week: &quot;{user.minutesPerWeek}&quot;, activity name: &quot;{user.activityName}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(user): return f&#39;Person(first name={user._firstName}, last name={user._lastName}, activity={user._activity}, minutes per week: {user._minutesPerWeek}, activity name:{user.activityName})&#39; # tester method to print users def tester(user, firstName, lastName, activity, minutesPerWeek, activityName): result = None for user in users: print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = userInfo(firstName=&#39;Kaylee&#39;, lastName=&#39;Hou&#39;, activity=&#39;yoga&#39;, minutesPerWeek=&#39;60&#39;, activityName=&#39;pilates&#39;) u2 = userInfo(firstName=&#39;Theo&#39;, lastName=&#39;Huntalas&#39;, activity=&#39;Affirmations&#39;, minutesPerWeek=&#39;10&#39;, activityName=&#39;Motivating and confident boosting reminders&#39;) u3 = userInfo(firstName=&#39;Ellie&#39;, lastName=&#39;Pang&#39;,activity=&#39;Coloring&#39;, minutesPerWeek=&#39;15&#39;, activityName=&#39;Sunset, ocean, mountains&#39;) u4 = userInfo(firstName=&#39;Haeryn&#39;, lastName=&#39;Yu&#39;,activity=&#39;Meditation&#39;, minutesPerWeek=&#39;5&#39;, activityName=&#39;Controlled breathing&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4] print(&quot;Users in Database in JSON: n n&quot;,u1) print(u2) print(u3) print(u4) . Users in Database in JSON: first name: &#34;Kaylee&#34;, last name: &#34;Hou&#34;, activity: &#34;yoga&#34;, minutes per week: &#34;60&#34;, activity name: &#34;pilates&#34; first name: &#34;Theo&#34;, last name: &#34;Huntalas&#34;, activity: &#34;Affirmations&#34;, minutes per week: &#34;10&#34;, activity name: &#34;Motivating and confident boosting reminders&#34; first name: &#34;Ellie&#34;, last name: &#34;Pang&#34;, activity: &#34;Coloring&#34;, minutes per week: &#34;15&#34;, activity name: &#34;Sunset, ocean, mountains&#34; first name: &#34;Haeryn&#34;, last name: &#34;Yu&#34;, activity: &#34;Meditation&#34;, minutes per week: &#34;5&#34;, activity name: &#34;Controlled breathing&#34; .",
            "url": "https://1908901.github.io/elliepang/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Project",
            "content": "«««&lt; HEAD Mood Rating ======= — toc: true layout: post title: Self-Care — . Mood Rating . A healthy method to release stress and to feel less overwhelmed is to recognize your emotions. Based off research, having an awareness of your emotions makes you feel more in control, avoid negative thoughts, and have an understanding of your feelings. . Mood Rating . f44d76edc589c60593655631253fadb963713168 &lt;p class=&quot;description&quot;&gt;:grin: Rate your mood on a scale from 1-10 :)&lt;/p&gt; &lt;div class=&quot;slidecontainer&quot;&gt; &lt;p id=&quot;output&quot; class=&quot;output&quot;&gt;5&lt;/p&gt; &lt;/div&gt; «««&lt; HEAD ======= . Healthy Methods to Relieve Stress . Positive affirmations: . A positive affirmation is a phrase you can say to yourself that makes you feel good and reminds you that you can do anything and be anyone you want to be. . Examples of Positive Affirmations to Practice . I find joy and pleasure in the simplest things in life. . | I awaken every morning feeling happy and enthusiastic about life. . | By allowing myself to be happy,I inspire others to be happy too. . | All that I need comes to me at the right time and place in this life. . | I am the architect of my life; I build its foundation and choose its contents. . | Mindful Breathing: . Control your breathing. As you breath in through your nose, imagine breathing in positivity. As you breath out through your mouth, imagine release any negative thoughts/feelings. . . Mindful colouring: . Mindful colouring is where you draw a lot of different squiggles and patterns on a page and then spend time colouring them in. . . f44d76edc589c60593655631253fadb963713168 .",
            "url": "https://1908901.github.io/elliepang/2023/01/09/project.html",
            "relUrl": "/2023/01/09/project.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "hacks table submissions",
            "content": "Submission One . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 0 | The student did not meet the requirement because it does not fit the purpose of the task and is not specific in their response | . Data Abstraction | 1 | 1 | I thought that their response was thorough and easy to understand and met all of the guidelines | . Managing Complexity | 0 | 1 | It was slightly confusing to me when reading their response, however collegeboard gave them a higher score. I looked back at the rubric and concluded that their score was accurate from collegeboard. | . Procedural Abstraction | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Algorithm Implementation with specific variables | 1 | 1 | I gave the student the same score as collegeboard. After reviewing the rubric, I thought that this student met the guidelines with no issues. | . Testing | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Submission two . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | The response was unclear and did not meet the guidelines and collegeboard agreed. | . Data Abstraction | 1 | 0 | I thought that their response was thorough and easy to understand and met all of the guidelines | . Managing Complexity | 0 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Procedural Abstraction | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Algorithm Implementation with specific variables | 1 | 1 | I gave the student the same score as collegeboard. After reviewing the rubric, I thought that this student met the guidelines with no issues. | . Testing | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Overall, I think that my scoring and collegeboard’s were pretty much the same. When I create my own create task I think it will be very important to not only meet every criterion but also to have a little more than what is required. This way, if collegeboard thinks that one of the lists (example) I have doesn’t manage complexity, I will still have other lists that could fill this gap. In addition, I think that I will have to be very specific in my write-up and answer the questions precisely. .",
            "url": "https://1908901.github.io/elliepang/2023/01/04/hacks-tables-submissions.html",
            "relUrl": "/2023/01/04/hacks-tables-submissions.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Review Ticket",
            "content": "Lesson Grade Hacks . Unit 3.1-3.2 | Grade: 0.90/1 | Hacks | . Unit 3.3-3.4 | Grade: Our group received a 3.6/4 | Hacks | . Unit 3.5-3.7 | Grade: 0.90/1 | Hacks | . Unit 3.8-3.10 | Grade: 0.90/1 | Hacks | . Unit 3.9-3.11 | Grade: 0.90/1 | Hacks | . Unit 3.12-3.13 | Grade: 0.90/1 | Hacks | . Unit 3.14-3.15 | Grade: 1/1 | Hacks | . Unit 3.16 | Grade: 0.95/1 | Hacks | . Unit 3.17-3.18 | Grade: 0.95/1 | Hacks | . Unit 2 Binary/Data Terms . bits: the minimum unit of binary information stored in a computer system. A bit can have only two states, on or off, which are commonly represented as ones and zeros. In our binary markdown we used to change the number of bits. . | bytes: A group of eight bits put together is known as a byte. A byte consists of 256 different combinations if you include the number 00000000 — all the binary numbers between 00000000 and 11111111. . | hexadecimal/nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters -- A, B, C, D, E and F. For example, when we use Javascript to change the color of the background on our blogs, we use hexadecimals like #eb4034, which would give us a red color. . | RGB- Hexadecimal is basically a short code for RGB color, they are simply different ways of communicating the same thing – a red, green, and blue color value. For example, (235, 64, 52) is the RGB for RED. Here&#39;s an example of how it is implemented in our fastpages: a { color: rgb(255,255, 255) !important; } . | boolean- value that is either true or false ex: . | . x = 5 y = 4 z = 4 &gt; 5 print(z) # value of z is false . False . print(30 &gt; 19) # true, since is 30 is larger than 19 # variables and strings a = &quot;Yes&quot; b = &quot;No&quot; print(a == b) # false, not equal # Renaming b b = &quot;Yes&quot; print(a == b) # true, since both variables match . True False True . ASCII- is a character encoding standard for electronic communication. . | Unicode- is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world’s writing systems. . | Data Compression- is the process of encoding, restructuring or otherwise modifying data in order to reduce its size. . | Lossy- in which unnecessary information is discarded. . | Lossless- is a class of data compression algorithms that allows the original data to be perfectly reconstructed from the compressed data. . | . Unit 3 Algorithm/Programming Terms . variables- A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. Some programming languages provide types to represent data, which are referenced using variables. . | data types- integer, string, float, boolean, lists, dictionaries, arrays, etc. . | lists- Lists are used to store multiple items in a single variable. . | dictionaries- A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. . | . x = 2 #integer y = &quot;school&quot; #string z = True #boolean a = 2.7 #float list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] #list dict = {&quot;name&quot; : &quot;John&quot;, &quot;age&quot; : 36} # dictionary . Operators . A plus sign indicates addition: a + b | . A subtraction sign indicates subtraction: a - b . | An asterisk/star indicates multiplication: a * b . | A slash indicates division: a / b . | MOD represent the Modulus operator. Returns the value after division: a MOD b . | . result = 9 * 3 #multiplication operator print(result) answer = 4-4 #subtraction operator print(answer) . 27 0 . algorithms- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . | sequence- a section of code is run only if a condition is met. (ex: if statements) . | selection- repeating steps or instructions over and over again (ex: loops) . | iteration- outline or set of steps that we do and follow in order that they are given . | strings- a sequence of characters . | concatenation- combines two or more strings into one . | length- len function finds the number of characters in a string . | substring- a part of a existing string . | . stringExample = &quot;this is an example of a string!&quot; #strings are in quotations print(stringExample) print(len(stringExample)) # this will find the number of characters in the string . this is an example of a string! 31 . age = 15 print(&quot;I am&quot;, str(age), &quot;years old.&quot;) #concatenation example, combining a string and integer together str1 = &quot;hi&quot; str2 = &quot;:)&quot; print(str1, str2) # putting the strings together . I am 15 years old. hi :) . upper- upper() method returns the uppercase string from the given string. It converts all lowercase characters to uppercase. . | lower- lower() method returns the lowercase string from the given string. It converts all uppercase characters to lowercase. . | . lowerCase = &quot;lowercase&quot; upperCase = &quot;UPPERCASE&quot; print(lowerCase.upper()) # this will print the lower case in all upper case print(upperCase.lower()) # this will print the upper case in all lower case . LOWERCASE uppercase . comparison operators- Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. | . print(1 == 1 and 10 &gt;= 0) # Returns true because both statements are true pizza = 25 burger = 30 print(&quot;There is enough food&quot;) # First condition is false, but second condition is true print(pizza == 50 or pizza + burger &gt;= 35) # Ends up returning true since at least one condition is true # The expression &quot;Blue&quot; != &quot;Green&quot; is false print(not &quot;Blue&quot; != &quot;Green&quot;) # Not operator changes statement to not false, printing true . True There is enough food True False . Truth tables- A truth table is a way of summarizing and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. | . AND Operator . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not Operator . Value 1 Value 2 Result . Not | 1 | 0 | . Not | 0 | 1 | . if statement- will go through certain statements if the if expression is true . | if-else- will go through a statement no matter what, but the statement which is run depends on the if expression is true or false . | elif- elif is short for &quot;else if&quot; and is used when the first if statement isn&#39;t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . | nested selection statements- Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. Nesting processes are mostly used implemented in the selection control structures. . | . S = 12 if S % 2 == 0: print(S) else: print(&quot;This number is not even.&quot;) . 12 . number1 = 28 number2 = 43 def lessthan30(num): # Example of if statement if num &lt; 30: # If this condition is true(variable is less than 30) print(num) # Then the value of the variable will be printed lessthan30(number1) # The if statement is true, so it will print the value of 28 lessthan30(number2) # The if statement is false, nothing will be printed. . 28 . price = 100 if price &gt; 100: print(&quot;price is greater than 100&quot;) elif price == 100: #elif use print(&quot;price is 100&quot;) elif price &lt; 100: print(&quot;price is less than 100&quot;) . price is 100 . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] print(animals) for i in animals: # if else statement nested in for loop if i == &quot;shark&quot;: # What boolean value does this statement cause? Answer: True print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) else: print(i) . [&#39;lion&#39;, &#39;tiger&#39;, &#39;wildebeest&#39;, &#39;shark&#39;, &#39;jellyfish&#39;, &#39;blobfish&#39;, &#39;raven&#39;] lion tiger wildebeest Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven . For Loop: repeats a function for a set number of times; I is the number of times repeated. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. . | While Loop: the while loop is used to repeat a section of code an unknown number of times until a specific condition is met. A while loop will execute a set of statements as long as a condition is true. . | return values: The value that a function returns to the caller is generally known as the function&#39;s return value. All Python functions have a return value, either explicit or implicit. . | continue: With the continue statement we can stop the current iteration, and continue with the next: . | . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] for x in fruits: # loops through the entire list print(x) . apple banana cherry . i = 1 while i &lt; 6: print(i) # i will keep printing as long as the statement is true i += 1 . 1 2 3 4 5 . i = 0 while i &lt; 6: i += 1 if i == 3: continue print(i) . 1 2 4 5 6 . def my_function(x): return 5 * x print(my_function(3)) print(my_function(5)) . 15 25 . range: The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number. | . x = range(3, 6) for n in x: print(n) . 3 4 5 . class- A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions. Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword. . | parameters- Parameters are the variables that appear between the brackets in the &quot;def&quot; line of a Python function definition. . | Procedure: is a named group of programming instructions that may have parameters and return values. Procedures can be reffered to as method or function depending on the programing language. A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. . Two types: one that returns a value or some type of data and on that just executes a block of statements | . | Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program . | procedural abstraction- One good use of a procedure is to eliminate duplicate code. In addition to improving the readability of the app, the use of a procedure will make it easier to modify that chunk of code because it only occurs once in the program. Use of parameters and complexity. . | . class Person: &quot;This is a person class&quot; age = 10 def greet(self): #parameters print(&#39;Hello&#39;) # Output: 10 print(Person.age) . 10 . Python def procedures- A procedure allows us to group a block of code under a name, known as a procedure. . | simulation: A simulation is an simpler abstraction of an very complicated natural phenomena. It removes details that are unnecessary or are too difficult to simulate. The level of abstraction in a simulation depends on why we&#39;re creating it in the first place. . safer, repeatable, less expensive, can make predictions | . | A problem is a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. . | A decision problem is a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. . | An algorithm&#39;s efficiency is determine through formal or mathematical reasoning. undecidable problem- problems for which no algorithms can be built that can provide a correct yes or no answer or a solution . | decidable problem- problems for which algorithms could be written to solve/produce a correct output for all inputs. . | . number = 20 #set number equal to random value if number &gt; 10: # if the number is greater than 10 print(&quot;greater than 10&quot;) #print else: # if less than 10 print(&quot;not greater than 10&quot;) # print . greater than 10 . num = 1 while num == 0: # the number will never equal 0 since we set it to 1, so this is undecidable print(num) num = num + 1 . A recursion is when a function calls itself until someone stops it. If no one stops it then it&#39;ll recurse (call itself) forever. Recursive functions let you perform a unit of work multiple times. This would be much more efficient and faster than the code above because, there is much less code and you don&#39;t need to keep calling the function, it will just do it automatically. | . def tri_recursion(k): if(k&gt;0): result = k+tri_recursion(k-1) print(result) else: result = 0 return result print(&quot;Recursion Example Results&quot;) tri_recursion(6) . Recursion Example Results 1 3 6 10 15 21 . 21 . import random print(&quot;Coin flip simulation!&quot;) n = 100 #this value can easily be changed to change the sample size heads = 0 tails = 0 for i in range(n): flip = random.randint(1,2) # get a random number between 1 and 2 if flip == 1: # head heads = heads + 1 else: # tail tails = tails + 1 print(&#39;# of heads:&#39;, heads) print(&#39;# of tails:&#39;, tails) . Coin flip simulation! # of heads: 56 # of tails: 44 . APCSP Week 1 Notes . In class we learned how to use bash and python such as python functions if/else statements and variables. | We learned about keys and that bash can make scripts with terminal/shell. | Static Text do not change. | Output in Jupyter Notebook is under the code cell. It will vary based on development intentions and tools. | Sequence of code: two or more lines forms a sequence. | &quot;Msg&quot;: parameter to print command, causing input to be output to terminal. | Procedural abstraction: grouping a sequence of commands. | .",
            "url": "https://1908901.github.io/elliepang/2022/12/16/vocab.html",
            "relUrl": "/2022/12/16/vocab.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Video 3.17-18 Hacks",
            "content": "Notes . Vocab Definition . Problem | a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. | . Decision problem | a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. | . Algorithm&#39;s efficiency | determined through formal or mathematical reasoning. | . An algorithm is a process or set of rules to be followed in calculations or other problem-solving operations. | . There are four different types of algorithms. . 1 step: The first step consists of an integer being multiplied by a variable &#39;n&#39;. An example of this could be 5 * n. . Linear . | 2 step: A two-step algorithm consists of an integer to the power of the variable &#39;n&#39;. . Exponential . | 3 step: A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. . Square . | 4 step: A four-step algorithm is a variable factorial. For instance, 5! = 5 4 3 2 1 = 120. . Factorial . | . Run Times . We can categorize the run time of an algorithm according to how the number of steps increases as the input size increases. Does it always take the same amount of time? That&#39;s a constant increase, a very fast run time. Does it always require looking at every possible permutation of the input? That&#39;s an exponential increase, a very slow run time. Most run times are somewhere between. . Constant Time . | When an algorithm runs in constant time, it means that it always takes a fixed number of steps, no matter how large the input size increases. . Linear Time . | When an algorithm grows in linear time, its number of steps increases in direct proportion to the input size. . Quadratic Time . | When an algorithm grows in quadratic time, its steps increase in proportion to the input size squared. Several list sorting algorithms run in quadratic time, like selection sort. That algorithm starts from the front of the list, then keeps finding the next smallest value in the list and swapping it with the current value. . Exponential Time . | When an algorithm grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. An algorithm often requires superpolynomial time when it must look at every permutation of values. . | Polynomial time describes any run time that does not increase faster than n^k which includes Constant time, Quadratic time, and other higher degree polynomials. Superpolynomial time describes any run time that does increase faster than n^k which includes Exponential time and factorial time. So polynomial is considered reasonable. . | . What is a decidable problem? . These are problems for which algorithms can be written to solve/produce a correct output for all possible inputs. | . What is an undecidable problem? . These are problems for which no algorithms can be built that can provide a correct yes or no answer. Undecidable problems may have some instances of algorithmic solutions, but there are no algorithmic solutions that can solve all instances of the problem. | . Vocabulary . Undecidable problem:problems for which no algorithms can be built that can provide a correct yes or no answer or a solution Decidable problem:problems for which algorthms could be written to solve/produce a correct output for all inputs. | . Hack 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . Decidable problems can be use to design an algorithm unlike undecidable problems that cannot give an algorithm. If any decision problem has a correct algorithm that runs for finite amount of time, then the problem is decidable. Undecidable problems have no algorithm that gives correct output in finite time. . Decidable problem example . num = 10 #set number equal to random value if num &gt; 5: # if the number is greater than 10 print(&quot;greater than 5&quot;) #print else: # if less than 10 print(&quot;not greater than 5&quot;) # print . greater than 5 . Undecidable problem example . num = 1 while num == 0: print(num) num = num + 1 . while num == 0: the number will never equal 0 since it is set to 1, therefore, this is undecidable . Hack 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . EXPLANATION: C is a 3 step algorithm because a variable is being multiplied to an integer, all to the power of two, fitting the criteria of a 3 step algorithm. . Hack 3 . Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Input In [8] function peak_finder(array){ ^ SyntaxError: invalid syntax . My Hack 3 answer . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 recurse(peak_finder); // function code } recurse(); . Recursive function research and example . I was a bit confused on how to rewrite this code in a more efficient way. Now I understand that I would use a recursion to print the outputs in reverse. To learn more about recursion, I took some notes while researching more about it. . Notes . A recursive function is a function that calls itself. You essentially create a loop with a function. As you can imagine, these can be tricky functions to write. You do not want your code to run forever. . | Similar to a loop, a recursive function will be controlled by a condition. Once the condition is met, the function stops calling itself, which stops the loop. This is how you can create a function that calls itself without it running forever. . | Although a recursive function acts like a loop, it is executed by the computer differently. So, some algorithms are more efficient in a loop and others benefit from a recursive function. But before we look at how to use a recursive function, you need to know how to write one. . | . FUNCTION name   IF condition THEN     RETURN result   ELSE     CALL FUNCTION name END FUNCTION . def factorialFunction(numberToMultiply): if numberToMultiply == 1 :   return 1 else :   return numberToMultiply * factorialFunction(numberToMultiply - 1) result = factorialFunction(3) print(result) //Outputs: 6 . def recursiveFunction(number) :   if (number % 2) == 0 :     return number   else:     print(&quot;That number is not even. Please enter a new number:&quot;)     recursiveFunction(int(input())) print(&quot;Enter and even number:&quot;) i = recursiveFunction(int(input())) . Hack 4 . Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . My Hack 4 answer . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] # unsorted/not in order list of numbers print(&quot;unsorted data:&quot;, data) # unsorted data data.sort() # sort function to sort through data print(&quot;sorted data&quot;, data) # sorted data . unsorted data: [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] sorted data [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . I found that using the sort() function was an easier algorithm as it quickly sorts through the list and prints data in order. Since I used the sort() function, I avoided using statements or while loops. . Hack 5 . Rewrite this Python Code in a more efficient way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . My Hack 5 Answer . from itertools import permutations # using library function perm = permutations([1, 2, 3], 3) # 3 on outside the bracket is all the permutations of the length 3 for i in list(perm): print ([i]) # print the obtained permutations . [(1, 2, 3)] [(1, 3, 2)] [(2, 1, 3)] [(2, 3, 1)] [(3, 1, 2)] [(3, 2, 1)] . To use the permutations function (returns the number of permutations that are possible for a specified number of objects in a given set), I imported the itertools module. . In this function, it takes a list as an input and returns an object list of tuples ( finite ordered list of elements). The list of tuples that is returned contains all permutations in a list form. . I used the list [1,2,3] from the example above and set a parameter of 3 which would be the length of the permutation since there are 3 numbers. . I then used a for loop to loop through all possible permutations. .",
            "url": "https://1908901.github.io/elliepang/2022/12/15/hacks-17-18.html",
            "relUrl": "/2022/12/15/hacks-17-18.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 3 Sections 12-13 Hacks",
            "content": "Notes 3.12 Notes What is a procedure and a parameter? A procedure is a named group of programming instructions that may have parameters and return values. . Procedures can be reffered to as method or function depending on the programing language. . A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. Parameters are input values of a procedure. Arguements specifcy the values of the parameters when a procedure is called. . If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. . If you see a return statement you automatically end the procedure even if there is more statements . Procedures are that a catch-all term for codes used to identify what was done to or given to a patient If you have a set of statements in a procedure the statement will go thought the top of the procedure to the bottom in order. . 3.13 Notes Procedure: is a named group of programming instructions that serves a purpose Parameter: are input values of a procedur There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program Creating a Procedure When you are picking a name for the procedure it must be descriptive See if you need any parameters for this procedure (what data do you need to accomplish my goal? What king of information am I going to need?) 2 of the parameters in the example below could be the quizGrade and currentPoints (need this data) One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. The subdivision of a computer program into sepearate subprogrames is called modularity. . 3.12 Part 1 Hacks . Problem 1: This problem involves parameters . Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed = Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . Problem 2: Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . I think &#39;IM MAD!!!&#39; will display because the upper() function converts all lowercase to uppercase and the concat() function adds on three exclamation marks. Therefore something will be displayed. . Problem 3: Procedures with return values . Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Homework/Hacks pt 2 . PROCEDURE find a () | { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . a = 729 . cost ⟵ 173 tax - 10% | PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . the cost is $190.30 . Temperature - 103 Degrees PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . answer = 39.444 . 3.13 Homework/Hacks for pt 1 and 2 of the lesson . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) . 2 Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . 3 Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST . B. PROCEDURE MyList . because procedure should be in all caps and part of the procedure name should be capitalized . C. procedure mylist . 4 Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } .",
            "url": "https://1908901.github.io/elliepang/2022/12/12/hacks12-13.html",
            "relUrl": "/2022/12/12/hacks12-13.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3.14-3.15 Hacks",
            "content": "Reflection . After todays lesson on sections 14 through 15, I have a better understanding of libraries and documentations and how they make coding a more efficient process. I learned that libraries are efficient because they are pre-written and can be referenced throughout the code. Documentations are efficient as they explain how the code works. I also learned more about API&#39;s and that they facilitate communication amongst multiple computers. Finally, I learned about random values and how they can be used in determining possible results in an expression. . Reflection Practice . Reflection Practicing random.shuffle | import random number_list = [19, 11, 21, 28, 35, 42, 49, 56, 63, 70] print(&quot;Original list:&quot;, number_list) random.shuffle(number_list) print(&quot;List after first shuffle:&quot;, number_list) random.shuffle(number_list) print(&quot;List after second shuffle:&quot;, number_list) . Original list: [19, 11, 21, 28, 35, 42, 49, 56, 63, 70] List after first shuffle: [19, 42, 11, 56, 70, 35, 49, 63, 21, 28] List after second shuffle: [28, 63, 11, 35, 49, 42, 70, 56, 19, 21] . Reflection Practicing random.choice | import random number_list = [111, 222, 333, 444, 555] print(random.choice(number_list)) . 444 . Reflection Practice Documentation | def numAverage(value): sumNums = 0 for t in value: sumNums = sumNums + t average = sumNums / len(value) return average print(&quot;The number average is&quot;, numAverage([1, 2, 3, 4, 5, 6, 61, 84, 81, 83])) . The number average is 33.0 . Multiple choice . What does the random(a,b) function generate? | A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . ANSWER: B because the random function mean a random integer from the parameters set will be chosen. a,b are the parameters, a random integer from a to b will be given, including a and b. . What is x, y, and z in random.randrange(x, y, z)? | A. x = start, y = stop, z = step . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . ANSWER: A because the randrange function has the parameters so that the the start, x is the minimum value. Y is the stop (maximum), and z is the step/increment the values can be. . Which of the following is NOT part of the random library? A. random.item | B. random.random . C. random.shuffle . D. random.randint . ANSWER: A because the item() function is used in dictionaries to find an item in the dictionary. Since it does not have any parameters, is not a part of the random library. Example of a function without the import random funcion. . random = { &quot;day&quot;: &quot;Nike&quot;, &quot;clothing&quot;: &quot;shirt&quot;, &quot;year&quot;: 2012 } x = random.items() random[&quot;year&quot;] = 2018 print(x) . dict_items([(&#39;day&#39;, &#39;Nike&#39;), (&#39;clothing&#39;, &#39;shirt&#39;), (&#39;year&#39;, 2018)]) . Short Answer Questions . What is the advantage of using libraries? | Libraries are already pre-written and can be referenced in your code. Instead of taking the time to rewrite the same code multiple times, libraries are reusable functions that can be used without redefining them. Overall, libraries are efficient, easier for coding complex functions, and reducing coding errors. . Write a thorough documentation of the following code. | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) random_choice = random.randint(0, num_items - 1) person_who_will_pay = names[random_choice] print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . ellie is going to buy the meal today! . Documentation: . Using the library random, I set the variable names_string equal to the the names the user provides/inputs. . The split function will separate the names with a comma. . num_items will give each name given a number and using the random function randint, it randomly select a number that corresponds to a name. . The procedure returns the name and the sentence. . 4 Coding Challenge . Create a program to pick five random names from a list of at least 15 names | import random namesList = [&quot;Ellie&quot;, &quot;Katie&quot;, &quot;Haeryn&quot;, &quot;Dylan&quot;, &quot;Ava&quot;, &quot;Olivia&quot;, &quot;Sreeja&quot;, &quot;Yuna&quot;, &quot;Hannah&quot;, &quot;Taylor&quot;, &quot;Madison&quot;, &quot;Lizzy&quot;, &quot;Evan&quot;, &quot;Hailey&quot;, &quot;Ella&quot;] sample_namesList = random.sample(namesList, k=5) print(f&quot; These are your 5 random names: {sample_namesList}!&quot;) . These are your 5 random names: [&#39;Yuna&#39;, &#39;Hailey&#39;, &#39;Ella&#39;, &#39;Hannah&#39;, &#39;Katie&#39;]! . EXPLANATION: First I created a list that had all the names I wanted to use, I chose to use the names of my friends. Then I set a variable equal to a function that would pick 5 different random names. I used the random library function choices and set k equal to 5 which would choose 5 options from the list. After printing the list the random.sample function allows me to get 5 names. . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | import random p1dice1 = random.randrange(1,6) p1dice2 = random.randrange(1,6) print(&quot;Player 1 rolled a&quot;, p1dice1, &quot;and&quot;, p1dice2, &quot;for a sum of:&quot;, p1dice1+p1dice2) p2dice1 = random.randrange(1,6) p2dice2 = random.randrange(1,6) print(&quot;Player 2 rolled a&quot;, p2dice1, &quot;and&quot;, p2dice2, &quot;for a sum of:&quot;, p2dice1+p2dice2) p1sum = p1dice1 + p1dice2 p2sum = p2dice1 + p2dice2 if p1sum &gt; p2sum: print(&quot;Player 1 wins!&quot;) elif p1sum == p2sum: print(&quot;Roll again! You both rolled the same sum.&quot;) else: print(&quot;Congratulations! Player 2 wins!&quot;) . Player 1 rolled a 4 and 1 for a sum of: 5 Player 2 rolled a 5 and 1 for a sum of: 6 Congratulations! Player 2 wins! . Explanation: Using the random library, I set variables equal to a random number 1-6, which represents rolling the dice. I named the variables based on who rolled and what number they rolled it. Then I added the numbers together, whichever player had the higher sum wins. . Extra Credit Attempt . import random width = 5 height = 5 obstacles = 15 maze = [[0 for i in range(width)] for j in range(height)] for i in range(obstacles): x = random.randint(0, width - 1) y = random.randint(0, height - 1) maze[x][y] = &#39;x&#39; def startEnd(): a = random.randint(0, width - 1) b = random.randint(0, height - 1) maze[a][b] = &#39;S&#39; c = random.randint(0, width - 1) d = random.randint(0, height - 1) maze[c][d] = &#39;E&#39; startEnd() for row in maze: print(&#39; &#39;.join(str(cell) for cell in row)) . x 0 x x E x S 0 x x 0 0 0 0 0 x x 0 0 0 x x x 0 x . Extra Credit x2 . import random direction = [&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;] itemDirection = random.choices(direction) print(f&quot;Initial direction of the robot: {itemDirection}&quot;) startNumber = random.randrange(1,25) print(f&quot;Where the robot started: {startNumber}&quot;) goalPosition = [] for i in range(1): r=random.randrange(1,25) if r != startNumber: goalPosition.append(r) print(f&quot;The goal position is: {goalPosition}&quot;) obstacles = [] for i in range(12): r=random.randint(1,25) if r != startNumber: obstacles.append(r) if r != goalPosition: obstacles.append(r) if r not in obstacles: obstacles.append(r) print(f&quot;The goal position is: {obstacles}&quot;) . Initial direction of the robot: [&#39;left&#39;] Where the robot started: 3 The goal position is: [14] The goal position is: [18, 18, 6, 6, 22, 22, 3, 17, 17, 13, 13, 23, 23, 15, 15, 10, 10, 14, 14, 9, 9, 1, 1] .",
            "url": "https://1908901.github.io/elliepang/2022/12/12/hacks-14-15.html",
            "relUrl": "/2022/12/12/hacks-14-15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Section 8 and 10 Hacks",
            "content": "Notes . Iteration - Repitition of a Process . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. . increment/decrement - Modifies the counter variable after each repetition. . Indexing / List Index - The position of an element in a list, starting from 0 . append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. . Elements [in a list] - An item in a list. . Nesting - Having one data type or function inside another data type or function, such as lists or loops. . Array - Another name for a list, depends on the language . Exercise 1 . Task: Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Exercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array Expected Output The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Multiple Choice Quiz . I got a 9/10 on the quiz. . . To the question, &quot;How can we add something to the end of a list?&quot;, I chose &quot;Extend&quot;, instead of the correct answer, &quot;Append&quot;. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. .",
            "url": "https://1908901.github.io/elliepang/2022/12/06/hacks.html",
            "relUrl": "/2022/12/06/hacks.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Hacks",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Section 8 and 10 Hacks” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Notes n”, “Iteration - Repitition of a Process n”, “ n”, “For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated n”, “ n”, “While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met n”, “ n”, “Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. n”, “ n”, “Condition - Allows the computer to know whether or not to keep repeating the loop. n”, “ n”, “increment/decrement - Modifies the counter variable after each repetition. n”, “ n”, “Indexing / List Index - The position of an element in a list, starting from 0 n”, “ n”, “append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. n”, “ n”, “Elements [in a list] - An item in a list. n”, “ n”, “Nesting - Having one data type or function inside another data type or function, such as lists or loops. n”, “ n”, “Array - Another name for a list, depends on the language” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 1 n”, “Task: n”, “Reverse a list utilizing features of lists and iteration n”, “Hint: Use two parameters with the range function” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “List before reverse : [1, 2, 3, 4, 5] n”, “List after reverse : [5, 4, 3, 2, 1] n” ] } ], “source”: [ “original_list = [1, 2, 3, 4, 5] n”, “print(&quot;List before reverse : &quot;,original_list) n”, “reversed_list = [] n”, “for value in original_list: n”, “ reversed_list = [value] + reversed_list n”, “print(&quot;List after reverse : &quot;, reversed_list)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 2 n”, “Task: n”, “Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array n”, “Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array n”, “Expected Output n”, “The sorted array from 1-10” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] n” ] } ], “source”: [ “list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “print(f&quot;array before sort {list}&quot;) n”, “def insertion_sort(list): n”, “ for index in range(1,len(list)): # repeats through length of the array n”, “ value = list[index] n”, “ i = index - 1 n”, “ while i &gt;= 0: n”, “ if value &lt; list[i]: n”, “ list[i+1] = list[i] # shift number in slot i to the right n”, “ list[i] = value # shift value left into slot i n”, “ i = i - 1 n”, “ else: n”, “ break n”, “ n”, “IS = insertion_sort(list) n”, “print(f&quot;array after sort {list}&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ ## Multiple Choice Quiz n”, “ n”, “I got a 9/10 on the quiz. n”, “ n”, “ n”, “ n”, “To the question, &quot;How can we add something to the end of a list?&quot;, I chose &quot;Extend&quot;, instead of the correct answer, &quot;Append&quot;. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. n” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.8.10 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.10 (default, Jun 22 2022, 20:18:18) n[GCC 9.4.0]” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://1908901.github.io/elliepang/2022/12/06/hacks.ipynb",
            "relUrl": "/2022/12/06/hacks.ipynb",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Section 8 and 10 Hacks",
            "content": "Notes . Iteration - Repitition of a Process . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. . increment/decrement - Modifies the counter variable after each repetition. . Indexing / List Index - The position of an element in a list, starting from 0 . append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. . Elements [in a list] - An item in a list. . Nesting - Having one data type or function inside another data type or function, such as lists or loops. . Array - Another name for a list, depends on the language . Exercise 1 . Task: Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Exercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array Expected Output The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Multiple Choice Quiz . I got a 9/10 on the quiz. . . To the question, &quot;How can we add something to the end of a list?&quot;, I chose &quot;Extend&quot;, instead of the correct answer, &quot;Append&quot;. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. .",
            "url": "https://1908901.github.io/elliepang/2022/12/06/hacks-copy.html",
            "relUrl": "/2022/12/06/hacks-copy.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 8 10",
            "content": "Unit 8 and 10 Hacks . Lists and Iteration Exercises . Exercise #1 . Exercise #2 . Multiple Choice Quiz . I got a 9/10 on the quiz. . . To the question, “How can we add something to the end of a list?”, I chose “Extend”, instead of the correct answer, “Append”. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. .",
            "url": "https://1908901.github.io/elliepang/2022/12/05/unit-8-10.html",
            "relUrl": "/2022/12/05/unit-8-10.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Hacks for 3.1-3.2",
            "content": "3.1 Video 2 . Question 1 . because that is the latest value that was stored within the variable. | Question 2 . because the value stored in a variable will alwasy be the most recent value assigned. | Question 3 . because the value for num 2 becomes the value of num 1 therefore making the first outcome 6 and the second outcome would be six as well because that is the value that num2 is assigned. | Question 4 . because for num 1 the value is replaced by num 3’s value which is 30. For num 2 the value is 30 because its replaced by num 1’s value which was originally 25 but then was replaced by num 3’s value 30. For num 3, the value is 25 because it’s value is replaced by num 2 which num 2’s value was replaced by num 1’s. | Question 5 . because q is the variable assigned to p and q’s value is 20. | Question 6 . because the first two statements assign values to the variables. The third statement assigns the value of first (which is true) to second. The fourth statement assigns the value of second (which is true) to first. | Question 7 . because the first five statements assign values to the variables. The sixth statement assigns the value of x + b (which is 40) to b. The seventh statement assigns the value of x + 1 (which is 21) to a. The eighth statement assigns the value of c + d / 2 to d. According to the order of operations, division has higher precedence than addition. Since c is 30 and d / 2 is 20, d is assigned the value 50. The last four statements display the values of a, b, c, and d. | 3.1 Video 1 . Practice questions that I made . Consider the following code segment: | num1 ⟵ 12 num2 ⟵ 3 num3 ⟵ 9 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 18 . b. 17 . c. 1 . d. 19 . answer:17 . Consider the following code segment: | num1 ⟵ 7 num2 ⟵ 2 num3 ⟵ 19 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 22 . b. 28 . c. 12 . d. 16 . answer: 16 . Consider the following code segment: | num1 ⟵ 9 num2 ⟵ 4 num3 ⟵ 3 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 11 . b. 15 . c. 17 . d. 12 . answer: 12 . Consider the following code segment: | num1 ⟵ 7 num2 ⟵ 12 num3 ⟵ 10 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a.17 . b. 3 . c. 16 . d. 5 . answer: 16 . Consider the following code segment: | num1 ⟵ 6 num2 ⟵ 4 num3 ⟵ 10 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 2 . b. 16 . c. 12 . d. 4 . answer:4 . Consider the following code segment: | num1 ⟵ 6 num2 ⟵ 4 num3 ⟵ 10 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 13 . b. 14 . c. 19 . d. 11 . answer:11 . Question 1 . 1. Because the name is descriptive of what is stored. Also, the number of apples in the store can change so the integer lets you add a nd subtract to the number of apples. ## Question 2 . Because this is a true or false question. It is either cold or not, so the variable name describes the circumstance, then the boolean data type specifies true or false. | Question 3 . IDnumber because it is descriptive but not too long and innefective. it is also a string because it doesn’t change and its a string of numbers. | Question 4 . No, because it is too long and inefficient to use when trying to store variables. | Question 5 . A boolean data type allows a variable to store true and false. | Question 6 . This is the only answer that has two true statements | My Three questions: . To check if it is in the afternoon or not what would the answer be? Is it afternoonYes and boolean? . To check if the tide is good for surfing, what would the answer be? Is it tideGood and String? . To record the color of a shoe, what would the answer be? Is it shoeColor and string? . Binary Hacks . 7 | 11 | 107 | 1100 | 101100 | 11111110 3.2 Video 2 . | Question 1 . 4. Because the data is not being appended from scores2 into scores1. . Question 2 . Because all of the data from listA “Sam” and “Ann” replace what is in listB. So if listB replaces what is in listA, “Sam” and “Ann” will still be the only data in that list. | Question 3 . The length of the list is 6. | Question 4 . The index count starts at 0, making “Red” 0 and “Purple” index 5. | Question 5 . Any type of data can be stored within a list. A list can contain a mix of types of data. | Question 6 . 2. A float is a decimal number. . Question 7 . An index count starts at 0 so the index number of a variable is one less than it’s spot in the length. | Question 8 . False. Variables can be changed later on in the code. | Question 9 . The list has floats or decimals and strings, and the length is 10, the ratio of string to floats is 1:1, and the index number of “Avocado” is 4. |",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/29/hacks-for-3.2.html",
            "relUrl": "/collegeboard/2022/11/29/hacks-for-3.2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Assignment",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Unit 3 Sections 5-7 Hacks n”, “&gt; Hacks n”, “ n”, “- toc: true n”, “- badges: true n”, “- comments: true n”, “- categories: [csp]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.5-3.7 Notes n”, “ n”, “Boolean- binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; There are multiple operators used to evaluate 2 variables. In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. Python uses != instead of ≠. These operators help determine the boolean value of a statement. n”, “ n”, “Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). n”, “ n”, “Algorithm: Finite set of instructions that accomplish a specific task n”, “Conditional Statements: allow the code to act based on multiple conditions, such as user input or stored data n”, “use in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm n”, “Categories: 2 broad types of conditional statements are if statements and if-else statements n”, “if statement: will go through certain statements if the if expression is true n”, “if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false n”, “ n”, “Nested conditional: A conditional inside of a conditional. Used in algorithms in order to print specific data or run certain tasks, to create further conditions in algorithms. n”, “We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.5 Hacks n”, “ n”, “## Binary Practice n”, “Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. n”, “ n”, “1. 90(D) = 1000(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: B false because the binary value of B is larger than the value of D. n”, “ n”, “2. 10(D) ≠ 0110(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: A true because the binary value of B is not equal to the value of D. n”, “ n”, “3. 56(D) ≥ 111000(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: A true because the binary value of B is 56 which is equal to the value of D. n”, “ n”, “3. 99(D) &lt; 1110011(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: A true because the binary value of B is larger than the value of D.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Now, complete the binary truth tables” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;html&gt; n”, “ n”, “ &lt;div&gt;AND Operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Value 1&lt;/th&gt; n”, “ &lt;th&gt;Value 2&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “ &lt;div&gt;OR Operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Value 1&lt;/th&gt; n”, “ &lt;th&gt;Value 2&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “ &lt;div&gt;Not operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Not&lt;/th&gt; n”, “ &lt;th&gt;Value&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;Not&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;Not&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “&lt;/html&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Python Practice” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “False n”, “True n” ] } ], “source”: [ “# Testing out relational operators n”, “# Practice with these statements n”, “ n”, “print(20 &gt; 20) # How can you change the operator to print a value of False? n”, “ n”, “x = 30 n”, “y = 20 n”, “z = 10 n”, “print(x &gt;= y + z) # How can this return true by only manipulating the operator? n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.6 Hacks n”, “ n”, “## AP Prep n”, “ n”, “1. What is displayed by this code? n”, “- result &lt;– 75 n”, “- IF result &lt; 80 { n”, “ DISPLAY(&quot;Please schedule a retake.&quot;) n”, “} n”, “- ELSE { n”, “ DISPLAY(&quot;Nice job!&quot;) n”, “} n”, “ n”, “1. Nice job! n”, “2. Display n”, “3. Please schedule a retake. n”, “4. 75 n”, “ n”, “answer: 3 &quot;Please schedule a retake.&quot; If condition is met, 75 &lt; 80 so the if display is shown. n”, “ n”, “2. How is an if statement different from an if-else statement. n”, “ n”, “1. Extra words. n”, “2. An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. n”, “3. They are the exact same. n”, “4. An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. n”, “ n”, “answer: 2, in if statements the criteria must be made in order to go through the code. n”, “ n”, “3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. n”, “ n”, “1. If statement n”, “2. If-else statement n”, “ n”, “answer: 2 If-else, because if he has gas he will go to the bank BUT else (gas is not full) he will go home. n”, “ n”, “4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. n”, “ n”, “1. If statement n”, “2. If-else statement n”, “ n”, “answer: 1 Because it does not say what else he will do if it is not sunny n”, “ n”, “ n”, “## Using Python” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “lion n”, “tiger n”, “wildebeest n”, “Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! n”, “jellyfish n”, “blobfish n”, “raven n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n” ] } ], “source”: [ “animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] n”, “ n”, “for i in animals: n”, “ if i == &quot;shark&quot;: # What boolean value does this statement cause? n”, “ print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) n”, “ else: n”, “ print(i) n”, “ n”, “for i in animals: n”, “ if i == &quot;lion&quot; or &quot;wildebeest&quot; or &quot;raven&quot;: n”, “ print(&quot;This animal lives in the desert&quot;) n”, “ else: n”, “ print(i + &quot;does not live in the desert&quot;) n”, “# Practice n”, “# Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.7 Hacks n”, “ n”, “## Exercise 1 n”, “- Create dictionaries for multiple food items, with the listed specifications n”, “ - Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes n”, “ - Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes n”, “ - Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes n”, “- Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Sorry, you do not have enough time and cannot cook a Chicken Alfredo n”, “You can cook a Cheese Quesadilla n”, “Sorry, you do not have enough time and cannot cook a Beef Wellington n” ] } ], “source”: [ “# Write code here n”, “chickenAlfredo = { n”, “ &quot;meat&quot;: True, n”, “ &quot;prepTime&quot;: 60, n”, “ &quot;name&quot;: &quot;Chicken Alfredo&quot; n”, “} n”, “ n”, “cheeseQuesadilla = { n”, “ &quot;meat&quot;: False, n”, “ &quot;prepTime&quot;: 10, n”, “ &quot;name&quot;: &quot;Cheese Quesadilla&quot; n”, “ n”, “} n”, “ n”, “beefWellington = { n”, “ &quot;meat&quot;: True, n”, “ &quot;prepTime&quot;: 150, n”, “ &quot;name&quot;: &quot;Beef Wellington&quot; n”, “ n”, “} n”, “ n”, “def cookMeal(dish): n”, “ if dish[&quot;prepTime&quot;] &lt;= 30: n”, “ if dish[&quot;meat&quot;] == False: n”, “ print(&quot;You can cook a&quot;, dish[&quot;name&quot;]) n”, “ else: n”, “ print(&quot;Sorry, you do not have meat and cannot cook a&quot;, dish[&quot;name&quot;] ) n”, “ else: n”, “ print(&quot;Sorry, you do not have enough time and cannot cook a&quot;, dish[&quot;name&quot;] ) n”, “ n”, “cookMeal(chickenAlfredo) n”, “cookMeal(cheeseQuesadilla) n”, “cookMeal(beefWellington)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 2 n”, “ n”, “Make a flowchart(here is one we used) and write pseudocode for the following scenario. n”, “- Mr. Yeung would like to grade live reviews. n”, “- He wants to see if each student has at least 2 issues on their project. If they don’t they receive a score of 2.0. n”, “- If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. n”, “- If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. n”, “- How much would a student with 3 issues and 1 complete scrumboard task receive? n”, “ n”, “Answer: A student with 3 issues and 1 completed scrumboard task would receive a 2.5 n”, “ n”, “ n”, “ n” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.8.10 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.10” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://1908901.github.io/elliepang/2022/11/28/assignment.ipynb",
            "relUrl": "/2022/11/28/assignment.ipynb",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://1908901.github.io/elliepang/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Trimester 1 Final Test Corrections",
            "content": ". My Score: 46/50 . 1st Incorrect Question . . Takeaway/Correction: Alejandra’s geographic location is needed so that the application can determine which restaurants are nearby. The usernames of the people on Brandon and Cynthia’s contact lists are not needed. Since Alejandra is organizing the meal, only her contact list is used. . 2nd Incorrect Question . . Takeaway/Correction: Information about which restaurants Brandon and Cynthia have visited in the past is not needed. Restaurants are recommended based on whether they can accommodate all allergies and dietary restrictions, not based on whether group members have been there before. Information about which food allergies and dietary restrictions can be accommodated at nearby restaurants is needed so that a restaurant can be recommended for the group. . 3rd Incorrect Question . . Takeaway/Correction: This is the initial value of r. Both q and s have the value 30 after executing the code segment. . 4th Incorrect Question . . Takeaway/Correction: The eighth statement assigns the value of c + d / 2 (which is 50) to d. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/09/tri1final.html",
            "relUrl": "/collegeboard/2022/11/09/tri1final.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "🔆❤Relaxation Center ❤🔆",
            "content": ".",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/09/Relation-center.html",
            "relUrl": "/collegeboard/2022/11/09/Relation-center.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Night Of The Museum Blog",
            "content": "APCSP Project: Journal . . I watched a group’s presentation for their final project and I was really amazed by their final product. Their project was a journal that had had a text box to write your thoughts, buttons to rate your emotions or how your day was going, and had a really nice design. . AP ART . . I was really impressed by all of the projects in the room but I especially loved this colorful on. I could tell that the artist took a lot of time on their project and their final result was really great to look at. . 3D ART . . I found all of these projects to be really cool. I thought about how much time it took to design and execute their plan into their final project and the results were cool. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/09/Night-of-museum.html",
            "relUrl": "/collegeboard/2022/11/09/Night-of-museum.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "var CorrectAnswers = { &quot;question1&quot;: &quot;question1_answer_3&quot;, &quot;question2&quot;: &quot;question2_answer_1&quot;, &quot;question3&quot;: &quot;question3_answer_2&quot;, }; var correct_page = { &quot;question1&quot;: &quot;correct_page&quot;, &quot;question2&quot;: &quot;correct_page_2&quot;, &quot;question3&quot;: &quot;correct_page_3&quot;, }; var incorrect_page = { &quot;question1&quot;: &quot;incorrect_page&quot;, &quot;question2&quot;: &quot;incorrect_page_2&quot;, &quot;question3&quot;: &quot;incorrect_page_3&quot;, }; var screenButtons = { &quot;question1&quot; : 4, &quot;question2&quot; : 4, &quot;question3&quot; : 4 }; setAnswerButtonEvent(); onEvent(&quot;start_button&quot;, &quot;click&quot;, function( ) { console.log(&quot;Start Button Clicked&quot;); setScreen(&quot;question1&quot;); }); function setAnswerButtonEvent(){ var keys = Object.keys(screenButtons); console.log(keys); Object.keys(screenButtons).forEach(function (key) { var buttonCount = screenButtons[key]; for(var i=1; i &lt;= buttonCount; i++) { var answerButtonName = key + &quot;_answer_&quot; + i; console.log(answerButtonName); checkAnswer(key, answerButtonName ); } }); } function checkAnswer(question, choice ){ onEvent(choice, &quot;click&quot;, function(event) { console.log(choice + &quot; is clicked!&quot;); if (CorrectAnswers[question] !== choice ) { setScreen(incorrect_page[question]); } else { console.log(&quot;correct page&quot;); setScreen(correct_page[question]); } }); } onEvent(&quot;correct_continue_button_1&quot;, &quot;click&quot;, function( ) { console.log(&quot;Correct Continue Button Clicked&quot;); setScreen(&quot;question2&quot;); }); onEvent(&quot;incorrect_continue_button_1&quot;, &quot;click&quot;, function( ) { console.log(&quot;Incorrect Continue Button Clicked&quot;); setScreen(&quot;question2&quot;); }); onEvent(&quot;correct_continue_button_2&quot;, &quot;click&quot;, function( ) { console.log(&quot;Correct Continue Button Clicked&quot;); setScreen(&quot;question3&quot;); }); onEvent(&quot;incorrect_continue_button_2&quot;, &quot;click&quot;, function( ) { console.log(&quot;Incorrect Continue Button Clicked&quot;); setScreen(&quot;question3&quot;); }); onEvent(&quot;correct_continue_button_3&quot;, &quot;click&quot;, function( ) { console.log(&quot;Correct Continue Button Clicked&quot;); setScreen(&quot;finish_page&quot;); }); onEvent(&quot;incorrect_continue_button_3&quot;, &quot;click&quot;, function( ) { console.log(&quot;Incorrect Continue Button Clicked&quot;); setScreen(&quot;finish_page&quot;); }); . [ &#39;question1&#39;, &#39;question2&#39;, &#39;question3&#39; ] question1_answer_1 . evalmachine.&lt;anonymous&gt;:49 onEvent(choice, &#34;click&#34;, function(event) { ^ ReferenceError: onEvent is not defined at checkAnswer (evalmachine.&lt;anonymous&gt;:49:3) at evalmachine.&lt;anonymous&gt;:43:7 at Array.forEach (native) at setAnswerButtonEvent (evalmachine.&lt;anonymous&gt;:38:30) at evalmachine.&lt;anonymous&gt;:28:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) .",
            "url": "https://1908901.github.io/elliepang/2022/10/26/quiz.html",
            "relUrl": "/2022/10/26/quiz.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "College Board Program Design",
            "content": "College Board Program Design . Program Purpose and Function . Our program’s purpose is to provide vocabulary for math (AP Calc and AP Statistics), as well as physics, and provide quizzes to test skills. The program’s function will be to use dictionaries, inputs, and outputs, to show information. . Data Abstraction . Dictionaries can be used to store data; data can be backlogged using a ‘console.log’ command (or something similar). Lists/dictionaries can also be used for search functions (ie; if ‘Statistics’ is searched, a list of words related to ‘Statistics’ will be run, and those items will appear. . Managing Complexity . Multiple lists can be used to map data, and dictionaries can be used to map certain data to lists Ex: If a term for the name of a list is searched, it can bring up those terms, and when a term is clicked, a dictionary can direct to different links. . Procedural Abstraction . We will have a function to administer our quiz that references to a dictionary for the questions and answers, and has a score tracker that when the quiz is finished, outputs different phrases according to how well they did. We are also considering a functionality in which it will take the type of answers failed and relate it to either outside resources for it or something in our program . Algorithm Implementation . An algorithm we will have will first ask someone for their current math/science class, then look through dictionary to see the level it would be at in high school (eg. integraded 1a: low, pre-cal: mid, ap calc: high), if the class they state is not given the program will ask if they are taking something outside of school or if they misspelled, then give a chance to clarify. If they are taking something outside of school the program will tell them to try and relate it to one of or school’s courses through provided internet materials. After figuring out their class, our program will ask how much they are struggling, and show a correlated amount of related material to support them. . Testing . We will institute a reward for quizzes, which will test if there are high scores in the quizzes that the user took, which were stored in a dictionary made, and if there are enough decently high scores they will be redirected to a page that either has a game or links to something enjoyable. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/10/lcol.html",
            "relUrl": "/collegeboard/2022/10/10/lcol.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Identifying and Correcting Errors Quiz",
            "content": ". Takeaways Question 1 . Takeaways Question 2 . Takeaways Question 3 . . . Takeaways Question 1 . Messages are broken into packets. Each packet contains data to be transmitted, as well as metadata for routing and reassembling the data upon receipt. This allows the packets to be received in any order and still be reassembled correctly. . . Takeaways Question 2 . Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way. . . Takeaways Question 3 . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/10/identifying.html",
            "relUrl": "/collegeboard/2022/10/10/identifying.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . url = &quot;https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/random&quot; querystring = {&quot;tags&quot;:&quot;vegetarian,dessert,vegan,dinner&quot;,&quot;number&quot;:&quot;1&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spoonacular-recipe-food-nutrition-v1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;module&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? &lt;module &#39;json&#39; from &#39;/home/elliepang007/anaconda3/lib/python3.9/json/__init__.py&#39;&gt; . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . import requests url = &quot;https://sameer-kumar-aztro-v1.p.rapidapi.com/&quot; querystring = {&quot;sign&quot;:&quot;aquarius&quot;,&quot;day&quot;:&quot;today&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;sameer-kumar-aztro-v1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;date_range&#34;: &#34;Jan 20 - Feb 18&#34;, &#34;current_date&#34;: &#34;October 10, 2022&#34;, &#34;description&#34;: &#34;Oh, sure -- just when you thought you were totally focused on what you were doing, you&#39;re suddenly ready to ditch it all, just to have one perfect, romantic moment. Lucky for you, it&#39;s the right time.&#34;, &#34;compatibility&#34;: &#34;Leo&#34;, &#34;mood&#34;: &#34;Sweet&#34;, &#34;color&#34;: &#34;Spring Green&#34;, &#34;lucky_number&#34;: &#34;20&#34;, &#34;lucky_time&#34;: &#34;1am&#34;} . Error: I was not able to organize the data neatly. .",
            "url": "https://1908901.github.io/elliepang/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . from dataclasses import FrozenInstanceError from logging.handlers import BufferingHandler menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; n front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) def menuloop(): total = 0 choice = &#39;&#39; while choice != &#39;done&#39;: choice = input(&#39;Please select an item from the menu.&#39;) if choice != &#39;done&#39;: if choice in menu : print(&#39;Selected:&#39;, choice , &#39;. Price:&#39;, menu[choice]) total += menu [choice] else: print (&#39;Incorrect&#39;) return total total = menuloop() print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Selected: burger . Price: 3.99 Selected: drink . Price: 0.99 Selected: drink . Price: 0.99 Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect .",
            "url": "https://1908901.github.io/elliepang/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Program Design and Development Quiz",
            "content": ". Difficulty . While going through the quiz, I found it difficult to find the differences in each answer choice. All of the answer choices were very similar and it took some time to understand the image of the code. . Questions . . What the direction of the arrows inside the loop represent? . How does numList[k] and numlist[j] represent a number value? . In question 1,why do the end of the brackets overlap each other? . Takeaways from Question 1 . . The process starts the count at 1. The value of count is displayed inside the loop, after which it is increased by 2 to the following odd number. When count surpasses max, the loop ends, and any positive odd numbers that are less than or equal to max are displayed. . Takeaways from Question 2 . . The code section begins by adding the x and y numbers, divides the result by x, and then outputs the outcome. A divide-by-zero mistake will occur when result is divided by x if the value of x is 0. . Takeaways from Question 3 . . The process produces a newList object that is a clone of numList. It is assigned to the element at newList[j] that is at numList[k], and it is allocated to the element at newList[k] that is at newList[j]. As a result, the entries at indices j and k are switched between in newList as opposed to numList. It is crucial to specify that j and k are both between 1 and LENGTH(numList), inclusive, because the process only functions if j and k are valid list indices. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/02/Program-Dev-quiz.html",
            "relUrl": "/collegeboard/2022/10/02/Program-Dev-quiz.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "HTML Fragments and Javascript",
            "content": "&lt;h2&gt;HTML life&lt;/h2&gt; .",
            "url": "https://1908901.github.io/elliepang/javascript/2022/09/23/Javascript.html",
            "relUrl": "/javascript/2022/09/23/Javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Focus and Habits and Collaborations",
            "content": "Focus and Habits and Collaborations . Completed Collaborations From Our Team . . Completed Collaborations and Program Function Quiz . . . Takeaways from the video: . Takeaways from the video: • I’m going to start doing everyday activities that make me happy, even if it takes a lot of effort, since, as the video showed, pleasure comes from living in the present rather than in the past or the future. • I’ll make an effort to socialize more, interact with others, and become involved in groups. • I’ll always make a point of telling the individuals I love how much I value them and work to strengthen my bonds with others. n • I won’t explicitly concentrate on the future; instead, I’ll concentrate on the present and now and what I can do, all the options and the choices I can make now to make me happy and live a more fulfilled life. | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/20/Video-Notes.html",
            "relUrl": "/markdown/2022/09/20/Video-Notes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Performance Task Planning",
            "content": "Performance Task Planning . Main Concept: . Website will be mostly school based | There will be a Math, Physics, Volleyball, and Gacha section | . For Math Section: . Will have AP Calculus as well as AP Statistics | Calculators, both for equations as well as normal calculations | Will have definitions as well as equations | For quizzes, there will be some for both AP Statistics and AP Calculus Both will have the page format: Start -&gt; Question -&gt; Incorrect page with how to solve/Correct page -&gt; Repeats until last page | . | . For Physics Section: . Very similar to the Math Section, but with Physics | Calculators for physics equations will be included, as well as definitions/terms | Will also have quizzes with the same format | . For Volleyball Section . Mostly volleyball terms, strategies, and etc. | Will also have images explaining terms/strategies | . For Gacha Section . Essentially a gacha calculator that gives random character pulls at a precent chance (likely using a print function) | Mostly just a ‘For fun’ section, may or may not get to this but it would be fun to include | . Requirements . Knowledge of math | Knowledge of python math functions | Knowledge on quizzes | Knowledge of liquid for automation of certain portions | Probably other things as we flesh out the concept | . Current Ability . At this point in time, we can already do the design and quiz portions, however the calculator for the math section will require us to learn more aspects of python and liquid, and there are probably other minute details we haven’t noticed that we don’t know how to do . Resources . We have Github, Google, Khan academy, and the APCSP homepage to support us . Notes . The reasoning we had for our website is that the math and science sections will support us in our studying and school lives, and hopefully help others students struggling in school by providing them resources and learning materials. Volleyball stats will help us explore our interests while expanding our knowledge on computer science and its possibilities in many fields. The gacha sections will help us learn more on probability and output for the end user, as well as being something fun to do to encourage us. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/11/Performance.html",
            "relUrl": "/markdown/2022/09/11/Performance.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "App Lab",
            "content": "App Lab . Link to my App Lab . . Brainstorming Execution Successes and Failures . The theme of my quiz is volleyball. I will have three questions with 4 possible answers each. When the user clicks the incorrect answer, a sound will play and an red “incorrect” text will show. When the correct answer is clicked, a different sound will play and the quiz will continue to the next question. By the end of the quiz, it will collect the number of wrong and right answers and the calculate the score. To execute this, I will have a screen for the title, question one, question two, question three, and score results. | After coding, most of my planned executed successfully. I figured out how to put a certain amount of time for each event, how to use buttons, and calculate the score. The quiz adds up the total amount of points and then totals them to get the final score | Something that was successful for me was that the code on code.org is pretty simple and straightforward. Something that I found difficult was managing all of the buttons and screens since I had so many of each. | . . Row 1: Program Purpose and Function . The code starts simple with onEvents that set to a specific screen if the user clicks on a specific button. Later in the code I use if then and if else code to simplify the code and can used the blocks to calculate the score in a percentage. . Row 2: Data Abstraction . I learned more about javascript and how to code through coding blocks and learned how to store different types of code. The code can limit the input that a person can give. . Row 3: Managing Complexity . The code compares data and work simliar to MBTI tests to ask you a question and get feedback such as the score to get your results. . Row 4: Procedural Abstraction . The procedural is storing data through the person’s input contributes to the results of the program and depending on the results, the program can grade what you go on the website. . Row 5: Algorithm Implementation . The algorithm will be based on their results and what choices they choose from the 3 questions. The program will calculate your score and then grade you, it can also show if you got it right or wrong. . Row 6: Testing . I would normally do this on a video like they do for AP exams, but if you test out my website in the link below, you would know that it would work and that it shows the following commands that I put in. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/11/App-Lab.html",
            "relUrl": "/markdown/2022/09/11/App-Lab.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "My Findings From Editing Theme",
            "content": "My Findings From Editing Theme . . . There were a couple of issues that happened after I changed my theme from minima to midnight. Some issues included: . Opened up the 404 page | The formatting of my markdown pages was altered. | Some of my pages were empty | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/05/theme.html",
            "relUrl": "/markdown/2022/09/05/theme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hi, Ellie!&quot;); . Hi, Ellie! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, Ellie!&quot;; console.log(msg); . Hello, Ellie! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, Ellie! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Variables in JavaScript&quot;) logItType(&quot;APCSP&quot;); // String logItType(2022); // Number logItType([&quot;Ellie&quot;, &quot;Giannina&quot;, &quot;Keira&quot;,]); // Object is generic for this Array, which similar to Python List . Variables in JavaScript string ; APCSP number ; 2022 object ; [ &#39;Ellie&#39;, &#39;Giannina&#39;, &#39;Keira&#39; ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Ellie&quot;, &quot;elliepang007&quot;, 2025), new Person(&quot;Giannina&quot;, &quot;LoveMyDogs/Timeline&quot;, 2024), new Person(&quot;Keira&quot;, &quot;keiraokimoto&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Ellie&#39;, ghID: &#39;elliepang007&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Giannina&#39;, ghID: &#39;LoveMyDogs/Timeline&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Keira&#39;, ghID: &#39;keiraokimoto&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:purple;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em pink;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Ellie | elliepang007 | 2025 | Student | Giannina | LoveMyDogs/Timeline | 2024 | Student | Keira | keiraokimoto | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://1908901.github.io/elliepang/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Ellie&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 14 print(&quot;age&quot;, age, type(age)) # variable of type float score = 99.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[1]&quot;, langs[1], type(langs[1])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Ellie &lt;class &#39;str&#39;&gt; age 14 &lt;class &#39;int&#39;&gt; score 99.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[1] JavaScript &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Ellie&#39;, &#39;age&#39;: 14, &#39;score&#39;: 99.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Ellie &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] &quot;Favorite_Food&quot;: &quot;unknown&quot;, &quot;Owns_a_pet&quot;: &quot;unknown&quot; ======= &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;], &quot;Favorite_Food&quot;: &quot;unknown&quot;, &quot;Owns&quot;: &quot;unknown&quot; &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ellie&quot;, &quot;LastName&quot;: &quot;Pang&quot;, &quot;DOB&quot;: &quot;November 1&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;elliepang007@gmail,com&quot;, &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &quot;Owns_Cars&quot;: [&quot;No&quot;] &quot;Favorite_Food&quot;: &quot;Sushi&quot;, &quot;Owns_a_Pet&quot;: &quot;Yes&quot; ======= &quot;Owns_Cars&quot;: [&quot;No&quot;], &quot;Favorite_Food&quot;: &quot;Sushi&quot;, &quot;Owns&quot;: &quot;Yes&quot; &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 }) # Print the data structure print(InfoDb) . &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Input In [2] &#34;Favorite_Food&#34;: &#34;unknown&#34;, ^ SyntaxError: invalid syntax ======= [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;], &#39;Favorite_Food&#39;: &#39;unknown&#39;, &#39;Owns&#39;: &#39;unknown&#39;}, {&#39;FirstName&#39;: &#39;Ellie&#39;, &#39;LastName&#39;: &#39;Pang&#39;, &#39;DOB&#39;: &#39;November 1&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;elliepang007@gmail,com&#39;, &#39;Owns_Cars&#39;: [&#39;No&#39;], &#39;Favorite_Food&#39;: &#39;Sushi&#39;, &#39;Owns&#39;: &#39;Yes&#39;}] &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite_Food:&quot;, d_rec[&quot;Favorite_Food&quot;]) &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD print(&quot; t&quot;, &quot;Owns_a_Pet:&quot;, d_rec[&quot;Pet_Owner&quot;]) ======= print(&quot; t&quot;, &quot;Pet Owner:&quot;, d_rec[&quot;Owns&quot;]) &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 . &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD KeyError Traceback (most recent call last) /home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in &lt;cell line: 19&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; for record in InfoDb: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; print_data(record) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; for_loop() /home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in for_loop() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; print(&#34;For loop output n&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; for record in InfoDb: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; print_data(record) /home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in print_data(d_rec) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; print(&#34; t&#34;, &#34;Cars: &#34;, end=&#34;&#34;) # end=&#34;&#34; make sure no return occurs &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(&#34;, &#34;.join(d_rec[&#34;Owns_Cars&#34;])) # join allows printing a string list with separator -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; print(&#34; t&#34;, &#34;Favorite_Food:&#34;, d_rec[&#34;Favorite_Food&#34;]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(&#34; t&#34;, &#34;Owns_a_Pet:&#34;, d_rec[&#34;Pet_Owner&#34;]) KeyError: &#39;Favorite_Food&#39; . ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 . &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD KeyError Traceback (most recent call last) /home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 9 in &lt;cell line: 11&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; i += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; return &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; while_loop() /home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 9 in while_loop() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; while i &lt; len(InfoDb): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; record = InfoDb[i] -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print_data(record) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; i += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; return /home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 9 in print_data(d_rec) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; print(&#34; t&#34;, &#34;Cars: &#34;, end=&#34;&#34;) # end=&#34;&#34; make sure no return occurs &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(&#34;, &#34;.join(d_rec[&#34;Owns_Cars&#34;])) # join allows printing a string list with separator -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; print(&#34; t&#34;, &#34;Favorite_Food:&#34;, d_rec[&#34;Favorite_Food&#34;]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/elliepang007/elliepang/_notebooks/2022-08-29-TP120-python_lists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(&#34; t&#34;, &#34;Owns_a_Pet:&#34;, d_rec[&#34;Pet_Owner&#34;]) KeyError: &#39;Favorite_Food&#39; . ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= Favorite_Food: unknown Pet Owner: unknown &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= Favorite_Food: Sushi Pet Owner: Yes . food = [&quot;pasta&quot;, &quot;pizza&quot;, &quot;strawberries&quot;, &quot;chips&quot;, &quot;french fries&quot;, &quot;cherries&quot;] # while loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(food): print(food[i]) i += 1 return while_loop() . While loop output pasta pizza strawberries chips french fries cherries . def while_loop(): print(&quot;While loop output n&quot;) i = 5 while i &gt;=0: print(food[i]) i -= 1 return while_loop() . While loop output cherries french fries chips strawberries pizza pasta . food = [&quot;pasta&quot;, &quot;pizza&quot;, &quot;strawberries&quot;, &quot;chips&quot;, &quot;french fries&quot;, &quot;cherries&quot;] def while_loop(): print(&quot;While loop output n&quot;) i=0 while i&lt;len(food): print(food[i]) i +=1 return while_loop() def while_loop(): print(&quot;While loop output n&quot;) i=4 while i &gt;=0: print(food[i]) i -=1 return while_loop() for index, val in enumerate(food): print(index, val) . While loop output pasta pizza strawberries chips french fries cherries While loop output french fries chips strawberries pizza pasta 0 pasta 1 pizza 2 strawberries 3 chips 4 french fries 5 cherries . import getpass, sys FoodQuestion = [&quot;Fruit&quot;, &quot;Vegetable&quot;, &quot;Soup&quot;, &quot;Drink&quot;, &quot;Snack&quot;] FoodAnswer = [&quot;Apple&quot;, &quot;Carrot&quot;, &quot;Clam Chowder&quot;, &quot;Milkshake&quot;, &quot;Chips&quot;] # Lists (ignore these they aren&#39;t used in the code) Food = { &quot;Fruit&quot;: &quot;Apple&quot;, &quot;Vegetable&quot;: &quot;Carrot&quot;, &quot;Soup&quot;: &quot;Clam Chowder&quot;, &quot;Drink&quot;: &quot;Milkshake&quot;, &quot;Snack&quot;: &quot;Chips&quot;, } # The dictionary/list dictionary CorrectList = {} IncorrectList = {} # Empty dictionaries used to store data def question_with_response(question): print(&quot;What is my favorite &quot; + question + &quot;?&quot;) msg = input () return msg # defines and prints question; asks for input def question(): for question in FoodQuestion: rsp = question_with_response(question) if (rsp != Food [question]): print (rsp + &quot; is incorrect.&quot;) IncorrectList [question] = rsp else: print (rsp + &quot; is correct.&quot;) CorrectList [question] = rsp # defines unit as one of the keys in the dictionary # answers are marked as incorrect if they do not match the values that go with the keys question() . What is my favorite Fruit? is incorrect. What is my favorite Vegetable? is incorrect. What is my favorite Soup? is incorrect. What is my favorite Drink? is incorrect. What is my favorite Snack? is incorrect. &gt;&gt;&gt;&gt;&gt;&gt;&gt; f44d76edc589c60593655631253fadb963713168 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | . &lt;/div&gt; .",
            "url": "https://1908901.github.io/elliepang/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Bash Installation Check",
            "content": "%%bash #Check version of Conda conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda (.* )/ 1/p;&#39;) #conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #conda_version=&#39;conda -V | sed -n &#39;;s/conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39; #echo $conda_version #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $conda_version &gt; &quot;0&quot; ]; then echo &quot;Conda version: &quot;$conda_version else echo &quot;Conda not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . bash: fg: %%bash: no such job Conda version: 4.13.0 Python version: 3.9.12 . Conda Packages . conda list . # packages in environment at /home/elliepang007/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/elliepang007/.local/share/jupyter/kernels/bash javascript /home/elliepang007/.local/share/jupyter/kernels/javascript python3 /home/elliepang007/.local/share/jupyter/kernels/python3 .",
            "url": "https://1908901.github.io/elliepang/2022/08/28/test2.html",
            "relUrl": "/2022/08/28/test2.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Python Quiz",
            "content": "- title: Lists, Dictionaries, Iteration - toc: true - categories: [units] - permalink: /collegeboard/python_lists - image: /images/python_lists.png - categories: [collegeboard] - tags: [python] . #define: score = 0 questions = 4 def q_a(q, a): answer = input(q) score = 0 if answer == a: print(&quot;Good job! That is correct!&quot;) score = 1 else: print(&quot;Good try! The answer is &quot; + a + &quot;.&quot;) return score #intro: name = input(&quot;Enter your name:&quot;) print(&quot;Hey! &quot; + name) ready = input(&quot;This quiz will have 4 questions.&quot; + &quot; Are you ready to start this quiz? Answer yes or no.&quot;) if ready == &quot;yes&quot;: print(&quot;Let&#39;s get started!&quot;) else: print(&quot;Good Luck!&quot;) #question 1: score = score + q_a(&quot;1. Are static texts changeable?&quot;, &quot;No&quot;) #question 2: score = score + q_a(&quot;2. Where is output found in Jupyter Notebook?&quot;, &quot;Below the code cell&quot;) #question 3: score = score + q_a(&quot;3. What are grouping a sequence of commands called?&quot;, &quot;Procedural abstraction&quot;) #question 4: score = score + q_a(&quot;4. What are two or more lines that form a sequence called?&quot;, &quot;Sequence of code&quot;) #ending score if score &gt;= 3: print(&quot;Congratulations! You completed this quiz with an amazing score! You scored a: {}/4&quot; .format(score)) else: print(&quot;Congratulations! You completed the quiz. Your score is a: {}/4&quot; .format(score)) . Hey! Ellie Good Luck! Good job! That is correct! Good job! That is correct! Good job! That is correct! Good job! That is correct! Congratulations! You completed this quiz with an amazing score! You scored a: 4/4 .",
            "url": "https://1908901.github.io/elliepang/2022/08/28/ellie.html",
            "relUrl": "/2022/08/28/ellie.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Daily Schedule With Image",
            "content": ". Daily Blog . Period Class Activites . 1st | AP Bio | Activities about evolution with table groups. Homework: Taking notes for our unit, studying for clicker quiz, making flashcards, reading and watching about our unit | . 2nd | Math | Taking notes from lesson. Completing worksheets with table partners. Homework: Problems from the textbook | . 3rd | APCSP | Taking notes on lectures. Working on the weekly assignment. Collaborating with table partners | . 4th | AP World History | Activities with table partners. Interact with notes that were homework. Learning about religion and culture. Homework: Notes from the textbook | . 5th | Offroll | Volleyball practice/games during 5th period | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/08/26/testing-out-images.html",
            "relUrl": "/markdown/2022/08/26/testing-out-images.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Ap Bio  Data Analysis Galapagos Finches",
            "content": "Evolution in Action: Data Analysis Galapagos Finches . 1. Describe the major environmental change on Daphne Major that took place in 1977. . In 1977, Daphne Major was hit by a drought and there was virtually no rainfall for 18 months straight. This drought killed a lot of the island’s vegetation, resulting in many of the food sources that the finches relied on becoming very limited. Finches had to eat seeds, and as small seeds became scarce, they had to switch to eating large and hard seeds. . 2. What types of medium ground finches were more likely to survive the environmental change you described? . The medium ground finches that had larger beaks were more likely to survive the environmental change (drought) . Due to the drought, the finches had to rely on seeds as their main food source. As the smaller seeds became scarce, the ground finches had to turn to the large, spiky, and hard seeds for food. The finches with larger beaks were able to crack open these seeds, while the finches with smaller beaks were unable to. As a result, 80% of the medium ground finches with small beaks died, while the larger beaked finches survived. Overall, the finches with small beaks were not able to overcome the new changes in the environment. . 3. Observe the shapes of the graphs. It may help to draw a line connecting the tops of the black bars. . a. Describe the overall shape of each graph. . The overall shape of the graph is staggered. In general, it is higher in the middle of the data and lower on the sides of the data. . b. What do the shapes of the graphs indicate about the distribution of beak depths in these two groups of birds? . The shapes of the graph indicate that there is a variety of different beak depths, and they are close to the mean value. On average beak depths of the survivors was higher than the average beak depths of the non-survivors. As a result, the survivors had a larger population of larger beaks than the non-survivors. . 4. Compare and contrast the distributions of beak depths for the survivors and nonsurvivors. For each distribution, include the range of the data and the most common measurements. . The distribution and shape of the beak depths for the survivors and non-survivors are pretty similar. The non-survivors’ beak depths ranged from 7.5mm to 11.25mm, with the most common beak depths being 8.5mm and 9.25mm. On the other hand, the survivors’ beak depths ranged from 8mm to 11.25mm, with the most common beak depth being 10mm. The average beak depth for non-survivors was 9.11mm and for survivors it was 9.67mm. This data displays how the survivors had a longer beak depth on average. . 5. Propose a biological hypothesis to explain the differences in the distribution of beak depths for the survivors and nonsurvivors. (Hint: It may help to review your answers for Part 1.) . When there is change in food source for the birds during the drought, natural selection will increase chances for individuals with the most suitable trait (in this case, larger beaks) to survive. When the food source went from soft seeds to large hard seeds, the bird with larger beak depths had a higher chance of survival because they could eat these seeds for survival when food was scarce during drought. These birds were better adapted to the drought environment’s main food source than the birds with smaller beaks were. . 6. Take a look at the means and standard deviations of beak depth in each group. . a. How do these means and standard deviations compare between the groups? . The data for beak depths of non-survivors has a mean of 9.11mm and a standard deviation of 0.88. As for the beak depths of the survivors there is a mean of 9.67mm and a standard deviation of 0.84. The mean for the non-survivors is less than the mean for the survivors meaning that the more depth a beak has the higher the chance of survival is. The standard deviations for both groups was around the same and didn’t have much of an impact on the survival rate. . b. If the standard deviations of the two groups were very different, what would you conclude about the groups? . If the standard deviations of the two groups were very different, we can conclude that one group would be a lot less dispersed and have data closer/clustered to the mean, meaning that it is more reliable and has less variety. Standard deviation is a measure of how dispersed the data is relative to the mean, so having large differences in the two groups deviations would mean that the data is dispersed very differently, and as a result one group would be more reliable than the other. . 7. For each sample, calculate the mean beak depth and standard deviation (s). Record your answers in Table 1. . Non-survivors . 5-Finch Sample . | Non-survivors . 15-Finch Sample . | Survivors . 5-Finch Sample . | Survivors . 15-Finch Sample . | . Mean 8.784mm Mean 9.113mm Mean 9.78mm Mean 9.56mm . s | 1.153mm | s | 0.984mm | s | 1.06mm | s | 0.903mm | . 8. Record the means and standard deviations for each sample of survivors and nonsurvivors (the 50-bird samples in Figure 3, then the 15-bird and 5-bird samples in Table 1) in Table 2. .       .   | Mean | Standard Deviation | .   50-bird Sample 15-bird Sample 5-bird Sample 50-bird Sample 15-bird Sample 5-bird Sample . Non-survivors | 9.11mm | 9.113mm | 8.784mm | 0.88mm | 0.98mm | 1.153mm | . Survivors | 9.67mm | 9.56mm | 9.78mm | 0.84 | 0.903 | 1.06mm | . 9. Compare the means and standard deviations for the samples in Table 2. . 1) &gt; Are the means in smaller samples different from the means in larger samples? Explain why you think that is. . Yes, the means of the smaller samples and larger samples differ because there is more data for the larger sample. This means that the average will be slightly different because of the difference in data values, but overall it should produce relatively similar results. Larger samples are more accurate than smaller samples for this reason, because they have more data to base the mean off of. Each sample depends on which birds were randomly selected. All of the samples were randomly taken from a population with a variety of beak depths. . 2) &gt; Are the standard deviations in smaller samples different from the standard deviations in larger samples? Explain why you think that is. . Yes, the standard deviations of smaller samples and larger samples differ because the samples have different mean values and the larger sample has more data values. Since the value of standard deviation is dependent on how the data values are dispersed from the mean, the two samples will have different standard deviations because they have different means and data values. . The standard deviations of both groups of birds decrease while the sample size increases. . 10. Which results (from 5, 15, or 50 birds) do you think are closest to the means and standard deviations of the entire population of medium ground finches on the island? Explain your answer. . The results from the 50-bird sample would be the closest to the means and standard deviations of the entire population of medium ground finches on the island. This is because it has the most data. The widest/largest data range would result in the most accurate results that reflect the whole population’s data the best. Data from a larger sample is accurate to describe the patterns of the entire population’s adaptation to changes in their environment because there is more data to base it off of. . 11. What is one advantage and one disadvantage of calculating the mean from a sample of a population rather than the entire population? . One disadvantage of calculating the mean from a sample of a population instead of the entire population is that there is less data to study, so there is less cost and time. If the population to study is larger, then there is more information to be collected for research. Studying the same population in a wide range of environments can expose how each species adapts to changes in their habitat. However, a disadvantage of studying the entire population is that it . Advantages of calculating the mean from a sample of a population is that it takes less time and work than calculating from the whole population. It’s not practical to take the mean of a whole population if the population is large. Using samples of a population also helps avoid repetition within the data. One disadvantage is that using a sample population might create bias within the data. . 12. Construct two bar graphs, one comparing the means of wing length for the two groups and another comparing the means of body mass. . • You can draw the graphs by hand below, or you can make them on a computer using Data Explorer (under the “Visualize” tab at the top) or another program. Make sure to include all your graphs when submitting this handout. . • For each graph, make sure to include a title and labels for the axes (including units). . . . 13. Based on your graphs, how does the mean wing length compare between survivors and nonsurvivors? What about the mean body mass? . Based on the graphs, the mean wing length of the survivors is longer than the mean wing length of the non-survivors. For body mass, the mean for the survivors is higher than that of the non-survivors. . 14. What do your graphs suggest about the effects of the drought on birds with particular wing lengths and body masses? . The graphs suggest that during the drought, the survivors were finches with longer wings and larger body masses. The finches with small wings and small body mass were at a disadvantage and were less likely to survive. We can assume that since the survivors had larger beaks, they had large wings and large body masses. . 15. The film in Part 1 claimed that beak depth is the trait that made the greatest difference in survival for the birds during the drought. Do the data you examined support this claim? Explain your answer. . The data shows that the average beak depth was larger for survivors compared to non survivors. This supports how larger beak depths increased the rate of survival for the birds. The data in the graphs shows how wing length and body mass was larger for non-survivors. This allows us to conclude that birds with bigger beaks also were larger overall. However, the graphs show that wing length and body mass were larger for survivors. Therefore, with the information we were given, the important trait for survival is not clear. . 16. Based on what you learned from the film, why might beak depth play a more important role in survival during the drought than either wing length or body mass? (Hint: According to the film, what was the main impact of the drought on the finches?) . Beak depth plays a more important role in survivors compared to wing length or body mass because the Galapagos Finches had to adapt to the environmental change, leading to a change in food source. Ground finches with larger beaks had more of an advantage picking up larger seeds compared to finches with smaller beaks. This made it more likely for birds with bigger beaks to survive the drought and reproduce.Birds with longer wings were also more likely to have bigger beaks.Body mass was a factor affecting the birds during the drought because bigger birds also had bigger beaks. . 17. How might variation in key traits within a population, such as beak depth in medium ground finches, make that population more likely to survive environmental changes? . Variation in key traits within a population makes that population more likely to survive environmental changes because it increases the chances that one of those traits will help individuals with it survive. This can be seen with the medium ground finches, who had variation with beak sizes. Due to the variation, some birds had larger beaks which helped those individuals survive when food became scarce during the drought. . Activity #2 . 1. Describe the major environmental change on Daphne Major that took place in 1977. . In Daphne Major, 1977 a drought resulted in a major environmental change. The finches had to switch from small seeds to larger and harder seeds. The birds had to adapt to these changes and in the end larger birds with bigger beaks survived. . 2. Based on what you know so far, what differences (if any) do you think there were between the finches that . survived this major environmental change and the finches that did not? . The main difference between the survivors and the non-survivors was their size. The finches that survived had larger body mass, larger wings, and larger beaks. This means that in this environment change, it was necessary for the finches to have specific traits. The reason that the larger beaked finches were able to survive over the small beaked finches was their ability to feed from the large seeds. . 3. Calculate the mean for each column in Table 1, and record your results (rounded to two decimal places) in the table. . 4. Calculate the standard deviation for each column in Table 1, and record your results (rounded to two decimal places) in the table. . 5.Calculate the standard error of the mean for each column in Table 1, and record your results (rounded to two decimal places) in the table. . 6. Calculate the 95% CI for each column in Table 1, and record your results (rounded to two decimal places) in the table. . Non-survivors Survivors . Descriptive statistics Body . mass (g) . Wing Length(mm) Tarsus length (mm) beak depth (mm) Body mass (g) Wing length (mm) Tarsus length (mm) Beak depth (mm) . Mean | 15.71 | 67.79 | 19.04 | 9.11 | 16.99 | 69.30 | 19.35 | 9.67 | . Variance (s^2) | | | | | | | | | . Standard deviation (s) | 1.36 | 2.28 | 0.84 | 0.88 | 1.76 | 2.33 | 0.86 | 0.84 | . Standard error of the mean (SEM) | | | | | | | | | . 95% confidence interval (CI) | | | | | | | | | . 7. Construct four bar graphs that compare the means of each physical characteristic (body mass, wing length, tarsus length, and beak depth) for survivors and nonsurvivors. . 8. In some cases, whether or not your error bars overlap can suggest whether the difference between the means is statistically significant — that is, due to actual differences between nonsurvivors and survivors instead of just happening by chance. . You created error bars that represent 95% CIs. What does it suggest if these error bars do not overlap? . | For which of the four physical characteristics did your error bars not overlap? . | 9. Summarize the differences between nonsurvivors and survivors that you observed from your graphs. Make sure to consider each of the four physical characteristics and the error bars from the previous question. .",
            "url": "https://1908901.github.io/elliepang/2022/08/25/AP-Bio-Data-Analysis-Galapagos-Finches.html",
            "relUrl": "/2022/08/25/AP-Bio-Data-Analysis-Galapagos-Finches.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Title",
            "content": "",
            "url": "https://1908901.github.io/elliepang/2022/08/23/python.html",
            "relUrl": "/2022/08/23/python.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Markdown Post",
            "content": "My name is Ellie and I am a sophomore. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/08/22/mark.html",
            "relUrl": "/markdown/2022/08/22/mark.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Section 3.9-3.11 Notes",
            "content": "1 . Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . IF (isCold or isRaining) { stayInside ⟵ True } ELSE { stayInside ⟵ False } . 2 . Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . During a turn, each player gets 4 attempts/chances to get the greatest number possible. During each attempt, the player will use a random number generator to select a random number from 1 to 10. After they have had 4 chances, their score is the greatest number they received from the random number generator, and their turn is over. . import random numAttempts = [] i = 1 while i &lt;= 4: numAttempts.append(random.randint(1,10)) i = i +1 print(&quot;Attempts:&quot;, numAttempts) print (&quot;-&quot;) print(&quot;Maximum number from player:&quot;) print(max(numAttempts)) . Attempts: [9, 2, 9, 4] - Maximum number from player: 9 . 3 . Create an algorithm that will allow the arrow to reach the gray square: . for x in range(0, 3): move forward turn right for x in range(0, 5): move forward turn right for x in range(0, 2): move forward . # it is much more efficient coding wise { if CANMOVEFORWARD{ moveForwards } else{ if CANTURNRIGHT{ turnright } if CANTURNLEFT{ turnleft } } } . 4 . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See comment for image . 5 . Explain thoroughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process is repeated until the number 69 is found. . 6 . Make a diagram explaining how you found the list (not tree, include equation) . See comment for image . 7 . Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [”Market”,”Walmart”,“store”,Target”,”Ralphs”] . 8 . Explain why Binary Search is more efficient than Sequential Search . Binary search is more efficient because it moves exponentially while sequential search moves through the list one by one. Binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . 9 . [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . If I am searching for the number 11, which would take two iterations. You would start at 16, the middle index. Then you would do 3+5/2 to get 4, so the next middle index would be 11, which is the number we want to find. . See comment for image .",
            "url": "https://1908901.github.io/elliepang/2022/08/22/hacks9-11.html",
            "relUrl": "/2022/08/22/hacks9-11.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Title",
            "content": "ls . 2022-08-22-My-First-Notebook.ipynb README.md 2022-08-22-bash.ipynb ghtop_images/ 2022-08-23-Ellie-Jupyter-Notebook.ipynb my_icons/ .",
            "url": "https://1908901.github.io/elliepang/2022/08/22/bash.html",
            "relUrl": "/2022/08/22/bash.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "This is my first notebook",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://1908901.github.io/elliepang/jupyter/2022/08/22/My-First-Notebook.html",
            "relUrl": "/jupyter/2022/08/22/My-First-Notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi my name is Ellie. .",
          "url": "https://1908901.github.io/elliepang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocab",
          "content": "Fundamental Vocab Definitions . Unit 3.1-3.2: Hacks . Grade: 0.90 . Unit 3.3-3.4: Hacks . Grade: Our group . Unit 3.5-3.7: Hacks . Grade: 0.90 . Unit 3.8-3.10:Hacks . Grade: 0.90 . Unit 2 Binary/Data Terms . bits: the minimum unit of binary information stored in a computer system. A bit can have only two states, on or off, which are commonly represented as ones and zeros. In our binary markdown we used to change the number of bits. . | bytes: A group of eight bits put together is known as a byte. A byte consists of 256 different combinations if you include the number 00000000 — all the binary numbers between 00000000 and 11111111. . | hexadecimal/nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. For example, when we use Javascript to change the color of the background on our blogs, we use hexadecimals like #eb4034, which would give us a red color. . | RGB- Hexadecimal is basically a short code for RGB color, they are simply different ways of communicating the same thing – a red, green, and blue color value. For example, (235, 64, 52) is the RGB for RED. Here’s an example of how it is implemented in our fastpages: a { color: rgb(255,255, 255) !important; } . | boolean- value that is either true or false . | ASCII- is a character encoding standard for electronic communication. . | Unicode- is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world’s writing systems. . | Data Compression- is the process of encoding, restructuring or otherwise modifying data in order to reduce its size. . | Lossy- in which unnecessary information is discarded. . | Lossless- is a class of data compression algorithms that allows the original data to be perfectly reconstructed from the compressed data. . | . Unit 3 Algorithm/Programming Terms . variables- A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. Some programming languages provide types to represent data, which are referenced using variables. . | data types- integer, string, float, boolean, lists, dictionaries, arrays, etc. . | lists- Lists are used to store multiple items in a single variable. . | dictionaries- A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. . | . A plus sign indicates addition: a + b . A subtraction sign indicates subtraction: a - b . An asterisk/star indicates multiplication: a * b . A slash indicates division: a / b . MOD represent the Modulus operator. Returns the value after division: a MOD b . algorithms- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . | sequence- a section of code is run only if a condition is met. (ex: if statements) . | selection- repeating steps or instructions over and over again (ex: loops) . | iteration- outline or set of steps that we do and follow in order that they are given . | strings- a sequence of characters . | concatenation- combines two or more strings into one . | length- len function finds the number of characters in a string . | substring- a part of a existing string . | upper- upper() method returns the uppercase string from the given string. It converts all lowercase characters to uppercase. . | lower- lower() method returns the lowercase string from the given string. It converts all uppercase characters to lowercase. . | comparison operators- Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. . | Truth tables- A truth table is a way of summarizing and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. . | if statement- will go through certain statements if the if expression is true . | if-else- will go through a statement no matter what, but the statement which is run depends on the if expression is true or false . | elif- elif is short for “else if” and is used when the first if statement isn’t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . | nested selection statements- Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. Nesting processes are mostly used implemented in the selection control structures. . | For Loop: repeats a function for a set number of times; I is the number of times repeated. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. . | While Loop: the while loop is used to repeat a section of code an unknown number of times until a specific condition is met. A while loop will execute a set of statements as long as a condition is true. . | return values: The value that a function returns to the caller is generally known as the function’s return value. All Python functions have a return value, either explicit or implicit. . | class- A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions. Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword. . | parameters- Parameters are the variables that appear between the brackets in the “def” line of a Python function definition. . | procedural abstraction- One good use of a procedure is to eliminate duplicate code. In addition to improving the readability of the app, the use of a procedure will make it easier to modify that chunk of code because it only occurs once in the program. Use of parameters and complexity. . | Python def procedures- A procedure allows us to group a block of code under a name, known as a procedure. . | . APCSP Week 1 Notes . In class we learned how to use bash and python such as python functions if/else statements and variables. | We learned about keys and that bash can make scripts with terminal/shell. | Static Text do not change. | Output in Jupyter Notebook is under the code cell. It will vary based on development intentions and tools. | Sequence of code: two or more lines forms a sequence. | “Msg”: parameter to print command, causing input to be output to terminal. | Procedural abstraction: grouping a sequence of commands. | .",
          "url": "https://1908901.github.io/elliepang/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  

  

  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://1908901.github.io/elliepang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}