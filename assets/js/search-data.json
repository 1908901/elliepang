{
  
    
        "post0": {
            "title": "Ap Bio  Data Analysis Galapagos Finches",
            "content": "Evolution in Action: Data Analysis Galapagos Finches . 1. Describe the major environmental change on Daphne Major that took place in 1977. . In 1977, Daphne Major was hit by a drought and there was virtually no rainfall for 18 months straight. This drought killed a lot of the island’s vegetation, resulting in many of the food sources that the finches relied on becoming very limited. Finches had to eat seeds, and as small seeds became scarce, they had to switch to eating large and hard seeds. . 2. What types of medium ground finches were more likely to survive the environmental change you described? . The medium ground finches that had larger beaks were more likely to survive the environmental change (drought) . Due to the drought, the finches had to rely on seeds as their main food source. As the smaller seeds became scarce, the ground finches had to turn to the large, spiky, and hard seeds for food. The finches with larger beaks were able to crack open these seeds, while the finches with smaller beaks were unable to. As a result, 80% of the medium ground finches with small beaks died, while the larger beaked finches survived. Overall, the finches with small beaks were not able to overcome the new changes in the environment. . 3. Observe the shapes of the graphs. It may help to draw a line connecting the tops of the black bars. . a. Describe the overall shape of each graph. . The overall shape of the graph is staggered. In general, it is higher in the middle of the data and lower on the sides of the data. . b. What do the shapes of the graphs indicate about the distribution of beak depths in these two groups of birds? . The shapes of the graph indicate that there is a variety of different beak depths, and they are close to the mean value. On average beak depths of the survivors was higher than the average beak depths of the non-survivors. As a result, the survivors had a larger population of larger beaks than the non-survivors. . 4. Compare and contrast the distributions of beak depths for the survivors and nonsurvivors. For each distribution, include the range of the data and the most common measurements. . The distribution and shape of the beak depths for the survivors and non-survivors are pretty similar. The non-survivors’ beak depths ranged from 7.5mm to 11.25mm, with the most common beak depths being 8.5mm and 9.25mm. On the other hand, the survivors’ beak depths ranged from 8mm to 11.25mm, with the most common beak depth being 10mm. The average beak depth for non-survivors was 9.11mm and for survivors it was 9.67mm. This data displays how the survivors had a longer beak depth on average. . 5. Propose a biological hypothesis to explain the differences in the distribution of beak depths for the survivors and nonsurvivors. (Hint: It may help to review your answers for Part 1.) . When there is change in food source for the birds during the drought, natural selection will increase chances for individuals with the most suitable trait (in this case, larger beaks) to survive. When the food source went from soft seeds to large hard seeds, the bird with larger beak depths had a higher chance of survival because they could eat these seeds for survival when food was scarce during drought. These birds were better adapted to the drought environment’s main food source than the birds with smaller beaks were. . 6. Take a look at the means and standard deviations of beak depth in each group. . a. How do these means and standard deviations compare between the groups? . The data for beak depths of non-survivors has a mean of 9.11mm and a standard deviation of 0.88. As for the beak depths of the survivors there is a mean of 9.67mm and a standard deviation of 0.84. The mean for the non-survivors is less than the mean for the survivors meaning that the more depth a beak has the higher the chance of survival is. The standard deviations for both groups was around the same and didn’t have much of an impact on the survival rate. . b. If the standard deviations of the two groups were very different, what would you conclude about the groups? . If the standard deviations of the two groups were very different, we can conclude that one group would be a lot less dispersed and have data closer/clustered to the mean, meaning that it is more reliable and has less variety. Standard deviation is a measure of how dispersed the data is relative to the mean, so having large differences in the two groups deviations would mean that the data is dispersed very differently, and as a result one group would be more reliable than the other. . 7. For each sample, calculate the mean beak depth and standard deviation (s). Record your answers in Table 1. . Non-survivors . 5-Finch Sample . | Non-survivors . 15-Finch Sample . | Survivors . 5-Finch Sample . | Survivors . 15-Finch Sample . | . Mean 8.784mm Mean 9.113mm Mean 9.78mm Mean 9.56mm . s | 1.153mm | s | 0.984mm | s | 1.06mm | s | 0.903mm | . 8. Record the means and standard deviations for each sample of survivors and nonsurvivors (the 50-bird samples in Figure 3, then the 15-bird and 5-bird samples in Table 1) in Table 2. .       .   | Mean | Standard Deviation | .   50-bird Sample 15-bird Sample 5-bird Sample 50-bird Sample 15-bird Sample 5-bird Sample . Non-survivors | 9.11mm | 9.113mm | 8.784mm | 0.88mm | 0.98mm | 1.153mm | . Survivors | 9.67mm | 9.56mm | 9.78mm | 0.84 | 0.903 | 1.06mm | . 9. Compare the means and standard deviations for the samples in Table 2. . 1) &gt; Are the means in smaller samples different from the means in larger samples? Explain why you think that is. . Yes, the means of the smaller samples and larger samples differ because there is more data for the larger sample. This means that the average will be slightly different because of the difference in data values, but overall it should produce relatively similar results. Larger samples are more accurate than smaller samples for this reason, because they have more data to base the mean off of. Each sample depends on which birds were randomly selected. All of the samples were randomly taken from a population with a variety of beak depths. . 2) &gt; Are the standard deviations in smaller samples different from the standard deviations in larger samples? Explain why you think that is. . Yes, the standard deviations of smaller samples and larger samples differ because the samples have different mean values and the larger sample has more data values. Since the value of standard deviation is dependent on how the data values are dispersed from the mean, the two samples will have different standard deviations because they have different means and data values. . The standard deviations of both groups of birds decrease while the sample size increases. . 10. Which results (from 5, 15, or 50 birds) do you think are closest to the means and standard deviations of the entire population of medium ground finches on the island? Explain your answer. . The results from the 50-bird sample would be the closest to the means and standard deviations of the entire population of medium ground finches on the island. This is because it has the most data. The widest/largest data range would result in the most accurate results that reflect the whole population’s data the best. Data from a larger sample is accurate to describe the patterns of the entire population’s adaptation to changes in their environment because there is more data to base it off of. . 11. What is one advantage and one disadvantage of calculating the mean from a sample of a population rather than the entire population? . One disadvantage of calculating the mean from a sample of a population instead of the entire population is that there is less data to study, so there is less cost and time. If the population to study is larger, then there is more information to be collected for research. Studying the same population in a wide range of environments can expose how each species adapts to changes in their habitat. However, a disadvantage of studying the entire population is that it . Advantages of calculating the mean from a sample of a population is that it takes less time and work than calculating from the whole population. It’s not practical to take the mean of a whole population if the population is large. Using samples of a population also helps avoid repetition within the data. One disadvantage is that using a sample population might create bias within the data. . 12. Construct two bar graphs, one comparing the means of wing length for the two groups and another comparing the means of body mass. . • You can draw the graphs by hand below, or you can make them on a computer using Data Explorer (under the “Visualize” tab at the top) or another program. Make sure to include all your graphs when submitting this handout. . • For each graph, make sure to include a title and labels for the axes (including units). . . . 13. Based on your graphs, how does the mean wing length compare between survivors and nonsurvivors? What about the mean body mass? . Based on the graphs, the mean wing length of the survivors is longer than the mean wing length of the non-survivors. For body mass, the mean for the survivors is higher than that of the non-survivors. . 14. What do your graphs suggest about the effects of the drought on birds with particular wing lengths and body masses? . The graphs suggest that during the drought, the survivors were finches with longer wings and larger body masses. The finches with small wings and small body mass were at a disadvantage and were less likely to survive. We can assume that since the survivors had larger beaks, they had large wings and large body masses. . 15. The film in Part 1 claimed that beak depth is the trait that made the greatest difference in survival for the birds during the drought. Do the data you examined support this claim? Explain your answer. . The data shows that the average beak depth was larger for survivors compared to non survivors. This supports how larger beak depths increased the rate of survival for the birds. The data in the graphs shows how wing length and body mass was larger for non-survivors. This allows us to conclude that birds with bigger beaks also were larger overall. However, the graphs show that wing length and body mass were larger for survivors. Therefore, with the information we were given, the important trait for survival is not clear. . 16. Based on what you learned from the film, why might beak depth play a more important role in survival during the drought than either wing length or body mass? (Hint: According to the film, what was the main impact of the drought on the finches?) . Beak depth plays a more important role in survivors compared to wing length or body mass because the Galapagos Finches had to adapt to the environmental change, leading to a change in food source. Ground finches with larger beaks had more of an advantage picking up larger seeds compared to finches with smaller beaks. This made it more likely for birds with bigger beaks to survive the drought and reproduce.Birds with longer wings were also more likely to have bigger beaks.Body mass was a factor affecting the birds during the drought because bigger birds also had bigger beaks. . 17. How might variation in key traits within a population, such as beak depth in medium ground finches, make that population more likely to survive environmental changes? . Variation in key traits within a population makes that population more likely to survive environmental changes because it increases the chances that one of those traits will help individuals with it survive. This can be seen with the medium ground finches, who had variation with beak sizes. Due to the variation, some birds had larger beaks which helped those individuals survive when food became scarce during the drought. . Activity #2 . 1. Describe the major environmental change on Daphne Major that took place in 1977. . In Daphne Major, 1977 a drought resulted in a major environmental change. The finches had to switch from small seeds to larger and harder seeds. The birds had to adapt to these changes and in the end larger birds with bigger beaks survived. . 2. Based on what you know so far, what differences (if any) do you think there were between the finches that . survived this major environmental change and the finches that did not? . The main difference between the survivors and the non-survivors was their size. The finches that survived had larger body mass, larger wings, and larger beaks. This means that in this environment change, it was necessary for the finches to have specific traits. The reason that the larger beaked finches were able to survive over the small beaked finches was their ability to feed from the large seeds. . 3. Calculate the mean for each column in Table 1, and record your results (rounded to two decimal places) in the table. . 4. Calculate the standard deviation for each column in Table 1, and record your results (rounded to two decimal places) in the table. . 5.Calculate the standard error of the mean for each column in Table 1, and record your results (rounded to two decimal places) in the table. . 6. Calculate the 95% CI for each column in Table 1, and record your results (rounded to two decimal places) in the table. . Non-survivors Survivors . Descriptive statistics Body . mass (g) . Wing Length(mm) Tarsus length (mm) beak depth (mm) Body mass (g) Wing length (mm) Tarsus length (mm) Beak depth (mm) . Mean | 15.71 | 67.79 | 19.04 | 9.11 | 16.99 | 69.30 | 19.35 | 9.67 | . Variance (s^2) | | | | | | | | | . Standard deviation (s) | 1.36 | 2.28 | 0.84 | 0.88 | 1.76 | 2.33 | 0.86 | 0.84 | . Standard error of the mean (SEM) | | | | | | | | | . 95% confidence interval (CI) | | | | | | | | | . 7. Construct four bar graphs that compare the means of each physical characteristic (body mass, wing length, tarsus length, and beak depth) for survivors and nonsurvivors. . 8. In some cases, whether or not your error bars overlap can suggest whether the difference between the means is statistically significant — that is, due to actual differences between nonsurvivors and survivors instead of just happening by chance. . You created error bars that represent 95% CIs. What does it suggest if these error bars do not overlap? . | For which of the four physical characteristics did your error bars not overlap? . | 9. Summarize the differences between nonsurvivors and survivors that you observed from your graphs. Make sure to consider each of the four physical characteristics and the error bars from the previous question. .",
            "url": "https://1908901.github.io/elliepang/2022/10/16/AP-Bio-Data-Analysis-Galapagos-Finches.html",
            "relUrl": "/2022/10/16/AP-Bio-Data-Analysis-Galapagos-Finches.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board Program Design",
            "content": "College Board Program Design . Program Purpose and Function . Our program’s purpose is to provide vocabulary for math (AP Calc and AP Statistics), as well as physics, and provide quizzes to test skills. The program’s function will be to use dictionaries, inputs, and outputs, to show information. . Data Abstraction . Dictionaries can be used to store data; data can be backlogged using a ‘console.log’ command (or something similar). Lists/dictionaries can also be used for search functions (ie; if ‘Statistics’ is searched, a list of words related to ‘Statistics’ will be run, and those items will appear. . Managing Complexity . Multiple lists can be used to map data, and dictionaries can be used to map certain data to lists Ex: If a term for the name of a list is searched, it can bring up those terms, and when a term is clicked, a dictionary can direct to different links. . Procedural Abstraction . We will have a function to administer our quiz that references to a dictionary for the questions and answers, and has a score tracker that when the quiz is finished, outputs different phrases according to how well they did. We are also considering a functionality in which it will take the type of answers failed and relate it to either outside resources for it or something in our program . Algorithm Implementation . An algorithm we will have will first ask someone for their current math/science class, then look through dictionary to see the level it would be at in high school (eg. integraded 1a: low, pre-cal: mid, ap calc: high), if the class they state is not given the program will ask if they are taking something outside of school or if they misspelled, then give a chance to clarify. If they are taking something outside of school the program will tell them to try and relate it to one of or school’s courses through provided internet materials. After figuring out their class, our program will ask how much they are struggling, and show a correlated amount of related material to support them. . Testing . We will institute a reward for quizzes, which will test if there are high scores in the quizzes that the user took, which were stored in a dictionary made, and if there are enough decently high scores they will be redirected to a page that either has a game or links to something enjoyable. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/10/lcol.html",
            "relUrl": "/collegeboard/2022/10/10/lcol.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Identifying and Correcting Errors Quiz",
            "content": ". Takeaways Question 1 . Takeaways Question 2 . Takeaways Question 3 . . . Takeaways Question 1 . Messages are broken into packets. Each packet contains data to be transmitted, as well as metadata for routing and reassembling the data upon receipt. This allows the packets to be received in any order and still be reassembled correctly. . . Takeaways Question 2 . Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way. . . Takeaways Question 3 . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/10/identifying.html",
            "relUrl": "/collegeboard/2022/10/10/identifying.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . url = &quot;https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/random&quot; querystring = {&quot;tags&quot;:&quot;vegetarian,dessert,vegan,dinner&quot;,&quot;number&quot;:&quot;1&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spoonacular-recipe-food-nutrition-v1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;module&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? &lt;module &#39;json&#39; from &#39;/home/elliepang007/anaconda3/lib/python3.9/json/__init__.py&#39;&gt; . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . import requests url = &quot;https://sameer-kumar-aztro-v1.p.rapidapi.com/&quot; querystring = {&quot;sign&quot;:&quot;aquarius&quot;,&quot;day&quot;:&quot;today&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;sameer-kumar-aztro-v1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;date_range&#34;: &#34;Jan 20 - Feb 18&#34;, &#34;current_date&#34;: &#34;October 10, 2022&#34;, &#34;description&#34;: &#34;Oh, sure -- just when you thought you were totally focused on what you were doing, you&#39;re suddenly ready to ditch it all, just to have one perfect, romantic moment. Lucky for you, it&#39;s the right time.&#34;, &#34;compatibility&#34;: &#34;Leo&#34;, &#34;mood&#34;: &#34;Sweet&#34;, &#34;color&#34;: &#34;Spring Green&#34;, &#34;lucky_number&#34;: &#34;20&#34;, &#34;lucky_time&#34;: &#34;1am&#34;} . Error: I was not able to organize the data neatly. .",
            "url": "https://1908901.github.io/elliepang/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . from dataclasses import FrozenInstanceError from logging.handlers import BufferingHandler menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; n front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) def menuloop(): total = 0 choice = &#39;&#39; while choice != &#39;done&#39;: choice = input(&#39;Please select an item from the menu.&#39;) if choice != &#39;done&#39;: if choice in menu : print(&#39;Selected:&#39;, choice , &#39;. Price:&#39;, menu[choice]) total += menu [choice] else: print (&#39;Incorrect&#39;) return total total = menuloop() print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Selected: burger . Price: 3.99 Selected: drink . Price: 0.99 Selected: drink . Price: 0.99 Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect .",
            "url": "https://1908901.github.io/elliepang/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Program Design and Development Quiz",
            "content": ". Difficulty . While going through the quiz, I found it difficult to find the differences in each answer choice. All of the answer choices were very similar and it took some time to understand the image of the code. . Questions . . What the direction of the arrows inside the loop represent? . How does numList[k] and numlist[j] represent a number value? . In question 1,why do the end of the brackets overlap each other? . Takeaways from Question 1 . . The process starts the count at 1. The value of count is displayed inside the loop, after which it is increased by 2 to the following odd number. When count surpasses max, the loop ends, and any positive odd numbers that are less than or equal to max are displayed. . Takeaways from Question 2 . . The code section begins by adding the x and y numbers, divides the result by x, and then outputs the outcome. A divide-by-zero mistake will occur when result is divided by x if the value of x is 0. . Takeaways from Question 3 . . The process produces a newList object that is a clone of numList. It is assigned to the element at newList[j] that is at numList[k], and it is allocated to the element at newList[k] that is at newList[j]. As a result, the entries at indices j and k are switched between in newList as opposed to numList. It is crucial to specify that j and k are both between 1 and LENGTH(numList), inclusive, because the process only functions if j and k are valid list indices. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/02/Program-Dev-quiz.html",
            "relUrl": "/collegeboard/2022/10/02/Program-Dev-quiz.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "HTML Fragments and Javascript",
            "content": "&lt;h2&gt;HTML life&lt;/h2&gt; .",
            "url": "https://1908901.github.io/elliepang/javascript/2022/09/23/Javascript.html",
            "relUrl": "/javascript/2022/09/23/Javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Focus and Habits and Collaborations",
            "content": "Focus and Habits and Collaborations . Completed Collaborations From Our Team . . Completed Collaborations and Program Function Quiz . . . Takeaways from the video: . Takeaways from the video: • I’m going to start doing everyday activities that make me happy, even if it takes a lot of effort, since, as the video showed, pleasure comes from living in the present rather than in the past or the future. • I’ll make an effort to socialize more, interact with others, and become involved in groups. • I’ll always make a point of telling the individuals I love how much I value them and work to strengthen my bonds with others. n • I won’t explicitly concentrate on the future; instead, I’ll concentrate on the present and now and what I can do, all the options and the choices I can make now to make me happy and live a more fulfilled life. | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/20/Video-Notes.html",
            "relUrl": "/markdown/2022/09/20/Video-Notes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Performance Task Planning",
            "content": "Performance Task Planning . Main Concept: . Website will be mostly school based | There will be a Math, Physics, Volleyball, and Gacha section | . For Math Section: . Will have AP Calculus as well as AP Statistics | Calculators, both for equations as well as normal calculations | Will have definitions as well as equations | For quizzes, there will be some for both AP Statistics and AP Calculus Both will have the page format: Start -&gt; Question -&gt; Incorrect page with how to solve/Correct page -&gt; Repeats until last page | . | . For Physics Section: . Very similar to the Math Section, but with Physics | Calculators for physics equations will be included, as well as definitions/terms | Will also have quizzes with the same format | . For Volleyball Section . Mostly volleyball terms, strategies, and etc. | Will also have images explaining terms/strategies | . For Gacha Section . Essentially a gacha calculator that gives random character pulls at a precent chance (likely using a print function) | Mostly just a ‘For fun’ section, may or may not get to this but it would be fun to include | . Requirements . Knowledge of math | Knowledge of python math functions | Knowledge on quizzes | Knowledge of liquid for automation of certain portions | Probably other things as we flesh out the concept | . Current Ability . At this point in time, we can already do the design and quiz portions, however the calculator for the math section will require us to learn more aspects of python and liquid, and there are probably other minute details we haven’t noticed that we don’t know how to do . Resources . We have Github, Google, Khan academy, and the APCSP homepage to support us . Notes . The reasoning we had for our website is that the math and science sections will support us in our studying and school lives, and hopefully help others students struggling in school by providing them resources and learning materials. Volleyball stats will help us explore our interests while expanding our knowledge on computer science and its possibilities in many fields. The gacha sections will help us learn more on probability and output for the end user, as well as being something fun to do to encourage us. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/11/Performance.html",
            "relUrl": "/markdown/2022/09/11/Performance.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "App Lab",
            "content": "App Lab . Link to my App Lab . . Brainstorming Execution Successes and Failures . The theme of my quiz is volleyball. I will have three questions with 4 possible answers each. When the user clicks the incorrect answer, a sound will play and an red “incorrect” text will show. When the correct answer is clicked, a different sound will play and the quiz will continue to the next question. By the end of the quiz, it will collect the number of wrong and right answers and the calculate the score. To execute this, I will have a screen for the title, question one, question two, question three, and score results. | After coding, most of my planned executed successfully. I figured out how to put a certain amount of time for each event, how to use buttons, and calculate the score. The quiz adds up the total amount of points and then totals them to get the final score | Something that was successful for me was that the code on code.org is pretty simple and straightforward. Something that I found difficult was managing all of the buttons and screens since I had so many of each. | . . Row 1: Program Purpose and Function . The code starts simple with onEvents that set to a specific screen if the user clicks on a specific button. Later in the code I use if then and if else code to simplify the code and can used the blocks to calculate the score in a percentage. . Row 2: Data Abstraction . I learned more about javascript and how to code through coding blocks and learned how to store different types of code. The code can limit the input that a person can give. . Row 3: Managing Complexity . The code compares data and work simliar to MBTI tests to ask you a question and get feedback such as the score to get your results. . Row 4: Procedural Abstraction . The procedural is storing data through the person’s input contributes to the results of the program and depending on the results, the program can grade what you go on the website. . Row 5: Algorithm Implementation . The algorithm will be based on their results and what choices they choose from the 3 questions. The program will calculate your score and then grade you, it can also show if you got it right or wrong. . Row 6: Testing . I would normally do this on a video like they do for AP exams, but if you test out my website in the link below, you would know that it would work and that it shows the following commands that I put in. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/11/App-Lab.html",
            "relUrl": "/markdown/2022/09/11/App-Lab.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "My Findings From Editing Theme",
            "content": "My Findings From Editing Theme . . . There were a couple of issues that happened after I changed my theme from minima to midnight. Some issues included: . Opened up the 404 page | The formatting of my markdown pages was altered. | Some of my pages were empty | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/05/theme.html",
            "relUrl": "/markdown/2022/09/05/theme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hi, Ellie!&quot;); . Hi, Ellie! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, Ellie!&quot;; console.log(msg); . Hello, Ellie! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, Ellie! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Variables in JavaScript&quot;) logItType(&quot;APCSP&quot;); // String logItType(2022); // Number logItType([&quot;Ellie&quot;, &quot;Giannina&quot;, &quot;Keira&quot;,]); // Object is generic for this Array, which similar to Python List . Variables in JavaScript string ; APCSP number ; 2022 object ; [ &#39;Ellie&#39;, &#39;Giannina&#39;, &#39;Keira&#39; ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Ellie&quot;, &quot;elliepang007&quot;, 2025), new Person(&quot;Giannina&quot;, &quot;LoveMyDogs/Timeline&quot;, 2024), new Person(&quot;Keira&quot;, &quot;keiraokimoto&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Ellie&#39;, ghID: &#39;elliepang007&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Giannina&#39;, ghID: &#39;LoveMyDogs/Timeline&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Keira&#39;, ghID: &#39;keiraokimoto&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:purple;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em pink;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Ellie | elliepang007 | 2025 | Student | Giannina | LoveMyDogs/Timeline | 2024 | Student | Keira | keiraokimoto | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://1908901.github.io/elliepang/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Ellie&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 14 print(&quot;age&quot;, age, type(age)) # variable of type float score = 99.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[1]&quot;, langs[1], type(langs[1])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Ellie &lt;class &#39;str&#39;&gt; age 14 &lt;class &#39;int&#39;&gt; score 99.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[1] JavaScript &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Ellie&#39;, &#39;age&#39;: 14, &#39;score&#39;: 99.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Ellie &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;], &quot;Favorite_Food&quot;: &quot;unknown&quot;, &quot;Owns&quot;: &quot;unknown&quot; }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ellie&quot;, &quot;LastName&quot;: &quot;Pang&quot;, &quot;DOB&quot;: &quot;November 1&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;elliepang007@gmail,com&quot;, &quot;Owns_Cars&quot;: [&quot;No&quot;], &quot;Favorite_Food&quot;: &quot;Sushi&quot;, &quot;Owns&quot;: &quot;Yes&quot; }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;], &#39;Favorite_Food&#39;: &#39;unknown&#39;, &#39;Owns&#39;: &#39;unknown&#39;}, {&#39;FirstName&#39;: &#39;Ellie&#39;, &#39;LastName&#39;: &#39;Pang&#39;, &#39;DOB&#39;: &#39;November 1&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;elliepang007@gmail,com&#39;, &#39;Owns_Cars&#39;: [&#39;No&#39;], &#39;Favorite_Food&#39;: &#39;Sushi&#39;, &#39;Owns&#39;: &#39;Yes&#39;}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite_Food:&quot;, d_rec[&quot;Favorite_Food&quot;]) print(&quot; t&quot;, &quot;Pet Owner:&quot;, d_rec[&quot;Owns&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes . food = [&quot;pasta&quot;, &quot;pizza&quot;, &quot;strawberries&quot;, &quot;chips&quot;, &quot;french fries&quot;, &quot;cherries&quot;] # while loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(food): print(food[i]) i += 1 return while_loop() . While loop output pasta pizza strawberries chips french fries cherries . def while_loop(): print(&quot;While loop output n&quot;) i = 5 while i &gt;=0: print(food[i]) i -= 1 return while_loop() . While loop output cherries french fries chips strawberries pizza pasta . food = [&quot;pasta&quot;, &quot;pizza&quot;, &quot;strawberries&quot;, &quot;chips&quot;, &quot;french fries&quot;, &quot;cherries&quot;] def while_loop(): print(&quot;While loop output n&quot;) i=0 while i&lt;len(food): print(food[i]) i +=1 return while_loop() def while_loop(): print(&quot;While loop output n&quot;) i=4 while i &gt;=0: print(food[i]) i -=1 return while_loop() for index, val in enumerate(food): print(index, val) . While loop output pasta pizza strawberries chips french fries cherries While loop output french fries chips strawberries pizza pasta 0 pasta 1 pizza 2 strawberries 3 chips 4 french fries 5 cherries . import getpass, sys FoodQuestion = [&quot;Fruit&quot;, &quot;Vegetable&quot;, &quot;Soup&quot;, &quot;Drink&quot;, &quot;Snack&quot;] FoodAnswer = [&quot;Apple&quot;, &quot;Carrot&quot;, &quot;Clam Chowder&quot;, &quot;Milkshake&quot;, &quot;Chips&quot;] # Lists (ignore these they aren&#39;t used in the code) Food = { &quot;Fruit&quot;: &quot;Apple&quot;, &quot;Vegetable&quot;: &quot;Carrot&quot;, &quot;Soup&quot;: &quot;Clam Chowder&quot;, &quot;Drink&quot;: &quot;Milkshake&quot;, &quot;Snack&quot;: &quot;Chips&quot;, } # The dictionary/list dictionary CorrectList = {} IncorrectList = {} # Empty dictionaries used to store data def question_with_response(question): print(&quot;What is my favorite &quot; + question + &quot;?&quot;) msg = input () return msg # defines and prints question; asks for input def question(): for question in FoodQuestion: rsp = question_with_response(question) if (rsp != Food [question]): print (rsp + &quot; is incorrect.&quot;) IncorrectList [question] = rsp else: print (rsp + &quot; is correct.&quot;) CorrectList [question] = rsp # defines unit as one of the keys in the dictionary # answers are marked as incorrect if they do not match the values that go with the keys question() . What is my favorite Fruit? is incorrect. What is my favorite Vegetable? is incorrect. What is my favorite Soup? is incorrect. What is my favorite Drink? is incorrect. What is my favorite Snack? is incorrect. . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://1908901.github.io/elliepang/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Bash Installation Check",
            "content": "%%bash #Check version of Conda conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda (.* )/ 1/p;&#39;) #conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #conda_version=&#39;conda -V | sed -n &#39;;s/conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39; #echo $conda_version #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $conda_version &gt; &quot;0&quot; ]; then echo &quot;Conda version: &quot;$conda_version else echo &quot;Conda not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . bash: fg: %%bash: no such job Conda version: 4.13.0 Python version: 3.9.12 . Conda Packages . conda list . # packages in environment at /home/elliepang007/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/elliepang007/.local/share/jupyter/kernels/bash javascript /home/elliepang007/.local/share/jupyter/kernels/javascript python3 /home/elliepang007/.local/share/jupyter/kernels/python3 .",
            "url": "https://1908901.github.io/elliepang/2022/08/28/test2.html",
            "relUrl": "/2022/08/28/test2.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Python Quiz",
            "content": "- title: Lists, Dictionaries, Iteration - toc: true - categories: [units] - permalink: /collegeboard/python_lists - image: /images/python_lists.png - categories: [collegeboard] - tags: [python] . #define: score = 0 questions = 4 def q_a(q, a): answer = input(q) score = 0 if answer == a: print(&quot;Good job! That is correct!&quot;) score = 1 else: print(&quot;Good try! The answer is &quot; + a + &quot;.&quot;) return score #intro: name = input(&quot;Enter your name:&quot;) print(&quot;Hey! &quot; + name) ready = input(&quot;This quiz will have 4 questions.&quot; + &quot; Are you ready to start this quiz? Answer yes or no.&quot;) if ready == &quot;yes&quot;: print(&quot;Let&#39;s get started!&quot;) else: print(&quot;Good Luck!&quot;) #question 1: score = score + q_a(&quot;1. Are static texts changeable?&quot;, &quot;No&quot;) #question 2: score = score + q_a(&quot;2. Where is output found in Jupyter Notebook?&quot;, &quot;Below the code cell&quot;) #question 3: score = score + q_a(&quot;3. What are grouping a sequence of commands called?&quot;, &quot;Procedural abstraction&quot;) #question 4: score = score + q_a(&quot;4. What are two or more lines that form a sequence called?&quot;, &quot;Sequence of code&quot;) #ending score if score &gt;= 3: print(&quot;Congratulations! You completed this quiz with an amazing score! You scored a: {}/4&quot; .format(score)) else: print(&quot;Congratulations! You completed the quiz. Your score is a: {}/4&quot; .format(score)) . Hey! Ellie Good Luck! Good job! That is correct! Good job! That is correct! Good job! That is correct! Good job! That is correct! Congratulations! You completed this quiz with an amazing score! You scored a: 4/4 .",
            "url": "https://1908901.github.io/elliepang/2022/08/28/ellie.html",
            "relUrl": "/2022/08/28/ellie.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Daily Schedule With Image",
            "content": ". Daily Blog . Period Class Activites . 1st | AP Bio | Activities about evolution with table groups. Homework: Taking notes for our unit, studying for clicker quiz, making flashcards, reading and watching about our unit | . 2nd | Math | Taking notes from lesson. Completing worksheets with table partners. Homework: Problems from the textbook | . 3rd | APCSP | Taking notes on lectures. Working on the weekly assignment. Collaborating with table partners | . 4th | AP World History | Activities with table partners. Interact with notes that were homework. Learning about religion and culture. Homework: Notes from the textbook | . 5th | Offroll | Volleyball practice/games during 5th period | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/08/26/testing-out-images.html",
            "relUrl": "/markdown/2022/08/26/testing-out-images.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Markdown Post",
            "content": "My name is Ellie and I am a sophomore. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/08/22/mark.html",
            "relUrl": "/markdown/2022/08/22/mark.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "This is my first notebook",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://1908901.github.io/elliepang/jupyter/2022/08/22/My-First-Notebook.html",
            "relUrl": "/jupyter/2022/08/22/My-First-Notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi my name is Ellie. .",
          "url": "https://1908901.github.io/elliepang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocab",
          "content": "APCSP Week 1 Notes . In class we learned how to use bash and python such as python functions if/else statements and variables. | We learned about keys and that bash can make scripts with terminal/shell. | Static Text do not change. | Output in Jupyter Notebook is under the code cell. It will vary based on development intentions and tools. | Sequence of code: two or more lines forms a sequence. | “Msg”: parameter to print command, causing input to be output to terminal. | Procedural abstraction: grouping a sequence of commands. | .",
          "url": "https://1908901.github.io/elliepang/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  

  

  

  

  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://1908901.github.io/elliepang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}