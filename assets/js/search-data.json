{
  
    
        "post0": {
            "title": "Unit 3.16 Hacks",
            "content": "Notes . Vocab Definition . Simulation | A simpler abstraction that removes details that are unessesary or too complicated to simulate. Abstraction levels in a simulation varies depending on the situation. Simulations are a simple way to model complicated situations. | . Why would you make a simulation? | Simulations are needed for modeling complicated situations (such as population dynamics or flying a plane) in a much simpler way so that any user can still manage most aspects of the model without delving into complexities. | . Why simulations over experiment? | Simulations are safer, less expensive, repeatable, and can make predictions | . Hacks . Question Answer . Name(First+Last) | Ellie Pang | . 1 | x | . 2 | x | . 3 | C- To make the simulation more accurate | . 4 | C- Imperfections on aircraft | . 5 | C Situation considered | . 6 | A- simulation, because it&#39;s too dangerous to have this be an experiment | . 7 | A- simulation, we don&#39;t want to experiment with this because it could cause great harm on the environment | . 8 | x | . 9 | B- experiment/calculation because there is no need to simulate anything, this will only be a simple calculation of the average | . Extra Simulation . import random rolls = 4 # manipulate how many rolls total = 0 i = 0 while rolls != 0: # rolls dice for number of rolls diceroll = random.randint(1,6) # change the &quot;6&quot; to how many sides on the dice you want i = i + 1 print(&quot;Roll&quot;, i, &quot;is a &quot;, diceroll) total = total + diceroll rolls = rolls - 1 print(&quot;Sum of dice rolls:&quot;, total) . Roll 1 is a 4 Roll 2 is a 3 Roll 3 is a 3 Roll 4 is a 4 Sum of dice rolls: 14 . This simulation represents a six-sided dice roll. It calculates the sum of the rolls and also shows which random number was rolled for each turn. The number of sides can be changed by changing the 6 in random.randint (1,6) to any number. You can also change the number of rolls by manipulating rolls = 4. . Extra Simulation x2 . import random print(&quot;Coin flip simulation!&quot;) e = 100 h = 0 #heads t = 0 #tails for i in range(e): flip = random.randint(1,2) # random number between 1 and 2 if flip == 1: h = h + 1 # calculates number of heads else: t = t + 1 # calculates number of tails print(&#39;Number of heads:&#39;, heads) print(&#39;Number of tails:&#39;, tails) . Coin flip simulation! Number of heads: 42 Number of tails: 58 . This simulation represents a coin toss of 100 tosses. I set e equal to the sample size and h and t to 0 which is the default value. Then I used a for loop, with each flip, the procedure will either give heads or tails until the coin has been flipped 100 times. Using a simulation is much more efficient and better than actually running an experiment. Simulations save a lot of time and effort. It would take forever to flip a coin 100 times. .",
            "url": "https://1908901.github.io/elliepang/2023/01/08/hacks-16.html",
            "relUrl": "/2023/01/08/hacks-16.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Hacks 3.12-3.13",
            "content": "Notes 3.12 - 3.13 pt1 . A procedure is a named group of programming instructions that may have parameters and return values. . | Procedures can be reffered to as method or function depending on the programing language. . | A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. . | Parameters are input values of a procedure. . | Argurments specifcy the values of the parameters when a procedure is called. . | If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. . | If you see a return statement you automatically end the procedure even if there is more statements . | .",
            "url": "https://1908901.github.io/elliepang/2023/01/08/.12-hacks.html",
            "relUrl": "/2023/01/08/.12-hacks.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "hacks table submissions",
            "content": "Submission One . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 0 | The student did not meet the requirement because it does not fit the purpose of the task and is not specific in their response | . Data Abstraction | 1 | 1 | I thought that their response was thorough and easy to understand and met all of the guidelines | . Managing Complexity | 0 | 1 | It was slightly confusing to me when reading their response, however collegeboard gave them a higher score. I looked back at the rubric and concluded that their score was accurate from collegeboard. | . Procedural Abstraction | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Algorithm Implementation with specific variables | 1 | 1 | I gave the student the same score as collegeboard. After reviewing the rubric, I thought that this student met the guidelines with no issues. | . Testing | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Submission two . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | The response was unclear and did not meet the guidelines and collegeboard agreed. | . Data Abstraction | 1 | 0 | I thought that their response was thorough and easy to understand and met all of the guidelines | . Managing Complexity | 0 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Procedural Abstraction | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Algorithm Implementation with specific variables | 1 | 1 | I gave the student the same score as collegeboard. After reviewing the rubric, I thought that this student met the guidelines with no issues. | . Testing | 1 | 1 | I agree with collegeboard because I thought their response met all the guidelines and was very easy to understand. | . Overall, I think that my scoring and collegeboard’s were pretty much the same. When I create my own create task I think it will be very important to not only meet every criterion but also to have a little more than what is required. This way, if collegeboard thinks that one of the lists (example) I have doesn’t manage complexity, I will still have other lists that could fill this gap. In addition, I think that I will have to be very specific in my write-up and answer the questions precisely. .",
            "url": "https://1908901.github.io/elliepang/2023/01/04/hacks-tables-submissions.html",
            "relUrl": "/2023/01/04/hacks-tables-submissions.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Review Ticket",
            "content": "Lesson Grade Hacks . Unit 3.1-3.2 | Grade: 0.90/1 | Hacks | . Unit 3.3-3.4 | Grade: Our group received a 3.6/4 | Hacks | . Unit 3.5-3.7 | Grade: 0.90/1 | Hacks | . Unit 3.8-3.10 | Grade: 0.90/1 | Hacks | . Unit 3.9-3.11 | Grade: 0.90/1 | Hacks | . Unit 3.12-3.13 | Grade: 0.90/1 | Hacks | . Unit 3.14-3.15 | Grade: 1/1 | Hacks | . Unit 3.16 | Grade: 0.95/1 | Hacks | . Unit 3.17-3.18 | Grade: 0.95/1 | Hacks | . Unit 2 Binary/Data Terms . bits: the minimum unit of binary information stored in a computer system. A bit can have only two states, on or off, which are commonly represented as ones and zeros. In our binary markdown we used to change the number of bits. . | bytes: A group of eight bits put together is known as a byte. A byte consists of 256 different combinations if you include the number 00000000 — all the binary numbers between 00000000 and 11111111. . | hexadecimal/nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters -- A, B, C, D, E and F. For example, when we use Javascript to change the color of the background on our blogs, we use hexadecimals like #eb4034, which would give us a red color. . | RGB- Hexadecimal is basically a short code for RGB color, they are simply different ways of communicating the same thing – a red, green, and blue color value. For example, (235, 64, 52) is the RGB for RED. Here&#39;s an example of how it is implemented in our fastpages: a { color: rgb(255,255, 255) !important; } . | boolean- value that is either true or false ex: . | . x = 5 y = 4 z = 4 &gt; 5 print(z) # value of z is false . False . print(30 &gt; 19) # true, since is 30 is larger than 19 # variables and strings a = &quot;Yes&quot; b = &quot;No&quot; print(a == b) # false, not equal # Renaming b b = &quot;Yes&quot; print(a == b) # true, since both variables match . True False True . ASCII- is a character encoding standard for electronic communication. . | Unicode- is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world’s writing systems. . | Data Compression- is the process of encoding, restructuring or otherwise modifying data in order to reduce its size. . | Lossy- in which unnecessary information is discarded. . | Lossless- is a class of data compression algorithms that allows the original data to be perfectly reconstructed from the compressed data. . | . Unit 3 Algorithm/Programming Terms . variables- A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. Some programming languages provide types to represent data, which are referenced using variables. . | data types- integer, string, float, boolean, lists, dictionaries, arrays, etc. . | lists- Lists are used to store multiple items in a single variable. . | dictionaries- A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. . | . x = 2 #integer y = &quot;school&quot; #string z = True #boolean a = 2.7 #float list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] #list dict = {&quot;name&quot; : &quot;John&quot;, &quot;age&quot; : 36} # dictionary . Operators . A plus sign indicates addition: a + b | . A subtraction sign indicates subtraction: a - b . | An asterisk/star indicates multiplication: a * b . | A slash indicates division: a / b . | MOD represent the Modulus operator. Returns the value after division: a MOD b . | . result = 9 * 3 #multiplication operator print(result) answer = 4-4 #subtraction operator print(answer) . 27 0 . algorithms- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . | sequence- a section of code is run only if a condition is met. (ex: if statements) . | selection- repeating steps or instructions over and over again (ex: loops) . | iteration- outline or set of steps that we do and follow in order that they are given . | strings- a sequence of characters . | concatenation- combines two or more strings into one . | length- len function finds the number of characters in a string . | substring- a part of a existing string . | . stringExample = &quot;this is an example of a string!&quot; #strings are in quotations print(stringExample) print(len(stringExample)) # this will find the number of characters in the string . this is an example of a string! 31 . age = 15 print(&quot;I am&quot;, str(age), &quot;years old.&quot;) #concatenation example, combining a string and integer together str1 = &quot;hi&quot; str2 = &quot;:)&quot; print(str1, str2) # putting the strings together . I am 15 years old. hi :) . upper- upper() method returns the uppercase string from the given string. It converts all lowercase characters to uppercase. . | lower- lower() method returns the lowercase string from the given string. It converts all uppercase characters to lowercase. . | . lowerCase = &quot;lowercase&quot; upperCase = &quot;UPPERCASE&quot; print(lowerCase.upper()) # this will print the lower case in all upper case print(upperCase.lower()) # this will print the upper case in all lower case . LOWERCASE uppercase . comparison operators- Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. | . print(1 == 1 and 10 &gt;= 0) # Returns true because both statements are true pizza = 25 burger = 30 print(&quot;There is enough food&quot;) # First condition is false, but second condition is true print(pizza == 50 or pizza + burger &gt;= 35) # Ends up returning true since at least one condition is true # The expression &quot;Blue&quot; != &quot;Green&quot; is false print(not &quot;Blue&quot; != &quot;Green&quot;) # Not operator changes statement to not false, printing true . True There is enough food True False . Truth tables- A truth table is a way of summarizing and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. | . AND Operator . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not Operator . Value 1 Value 2 Result . Not | 1 | 0 | . Not | 0 | 1 | . if statement- will go through certain statements if the if expression is true . | if-else- will go through a statement no matter what, but the statement which is run depends on the if expression is true or false . | elif- elif is short for &quot;else if&quot; and is used when the first if statement isn&#39;t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . | nested selection statements- Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. Nesting processes are mostly used implemented in the selection control structures. . | . S = 12 if S % 2 == 0: print(S) else: print(&quot;This number is not even.&quot;) . 12 . number1 = 28 number2 = 43 def lessthan30(num): # Example of if statement if num &lt; 30: # If this condition is true(variable is less than 30) print(num) # Then the value of the variable will be printed lessthan30(number1) # The if statement is true, so it will print the value of 28 lessthan30(number2) # The if statement is false, nothing will be printed. . 28 . price = 100 if price &gt; 100: print(&quot;price is greater than 100&quot;) elif price == 100: #elif use print(&quot;price is 100&quot;) elif price &lt; 100: print(&quot;price is less than 100&quot;) . price is 100 . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] print(animals) for i in animals: # if else statement nested in for loop if i == &quot;shark&quot;: # What boolean value does this statement cause? Answer: True print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) else: print(i) . [&#39;lion&#39;, &#39;tiger&#39;, &#39;wildebeest&#39;, &#39;shark&#39;, &#39;jellyfish&#39;, &#39;blobfish&#39;, &#39;raven&#39;] lion tiger wildebeest Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven . For Loop: repeats a function for a set number of times; I is the number of times repeated. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. . | While Loop: the while loop is used to repeat a section of code an unknown number of times until a specific condition is met. A while loop will execute a set of statements as long as a condition is true. . | return values: The value that a function returns to the caller is generally known as the function&#39;s return value. All Python functions have a return value, either explicit or implicit. . | continue: With the continue statement we can stop the current iteration, and continue with the next: . | . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] for x in fruits: # loops through the entire list print(x) . apple banana cherry . i = 1 while i &lt; 6: print(i) # i will keep printing as long as the statement is true i += 1 . 1 2 3 4 5 . i = 0 while i &lt; 6: i += 1 if i == 3: continue print(i) . 1 2 4 5 6 . def my_function(x): return 5 * x print(my_function(3)) print(my_function(5)) . 15 25 . range: The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number. | . x = range(3, 6) for n in x: print(n) . 3 4 5 . class- A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions. Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword. . | parameters- Parameters are the variables that appear between the brackets in the &quot;def&quot; line of a Python function definition. . | Procedure: is a named group of programming instructions that may have parameters and return values. Procedures can be reffered to as method or function depending on the programing language. A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. . Two types: one that returns a value or some type of data and on that just executes a block of statements | . | Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program . | procedural abstraction- One good use of a procedure is to eliminate duplicate code. In addition to improving the readability of the app, the use of a procedure will make it easier to modify that chunk of code because it only occurs once in the program. Use of parameters and complexity. . | . class Person: &quot;This is a person class&quot; age = 10 def greet(self): #parameters print(&#39;Hello&#39;) # Output: 10 print(Person.age) . 10 . Python def procedures- A procedure allows us to group a block of code under a name, known as a procedure. . | simulation: A simulation is an simpler abstraction of an very complicated natural phenomena. It removes details that are unnecessary or are too difficult to simulate. The level of abstraction in a simulation depends on why we&#39;re creating it in the first place. . safer, repeatable, less expensive, can make predictions | . | A problem is a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. . | A decision problem is a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. . | An algorithm&#39;s efficiency is determine through formal or mathematical reasoning. undecidable problem- problems for which no algorithms can be built that can provide a correct yes or no answer or a solution . | decidable problem- problems for which algorithms could be written to solve/produce a correct output for all inputs. . | . number = 20 #set number equal to random value if number &gt; 10: # if the number is greater than 10 print(&quot;greater than 10&quot;) #print else: # if less than 10 print(&quot;not greater than 10&quot;) # print . greater than 10 . num = 1 while num == 0: # the number will never equal 0 since we set it to 1, so this is undecidable print(num) num = num + 1 . A recursion is when a function calls itself until someone stops it. If no one stops it then it&#39;ll recurse (call itself) forever. Recursive functions let you perform a unit of work multiple times. This would be much more efficient and faster than the code above because, there is much less code and you don&#39;t need to keep calling the function, it will just do it automatically. | . def tri_recursion(k): if(k&gt;0): result = k+tri_recursion(k-1) print(result) else: result = 0 return result print(&quot;Recursion Example Results&quot;) tri_recursion(6) . Recursion Example Results 1 3 6 10 15 21 . 21 . import random print(&quot;Coin flip simulation!&quot;) n = 100 #this value can easily be changed to change the sample size heads = 0 tails = 0 for i in range(n): flip = random.randint(1,2) # get a random number between 1 and 2 if flip == 1: # head heads = heads + 1 else: # tail tails = tails + 1 print(&#39;# of heads:&#39;, heads) print(&#39;# of tails:&#39;, tails) . Coin flip simulation! # of heads: 56 # of tails: 44 . APCSP Week 1 Notes . In class we learned how to use bash and python such as python functions if/else statements and variables. | We learned about keys and that bash can make scripts with terminal/shell. | Static Text do not change. | Output in Jupyter Notebook is under the code cell. It will vary based on development intentions and tools. | Sequence of code: two or more lines forms a sequence. | &quot;Msg&quot;: parameter to print command, causing input to be output to terminal. | Procedural abstraction: grouping a sequence of commands. | .",
            "url": "https://1908901.github.io/elliepang/2022/12/16/vocab.html",
            "relUrl": "/2022/12/16/vocab.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Video 3.17-18 Hacks",
            "content": "Notes . Vocab Definition . Problem | a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. | . Decision problem | a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. | . Algorithm&#39;s efficiency | determined through formal or mathematical reasoning. | . An algorithm is a process or set of rules to be followed in calculations or other problem-solving operations. | . There are four different types of algorithms. . 1 step: The first step consists of an integer being multiplied by a variable &#39;n&#39;. An example of this could be 5 * n. . Linear . | 2 step: A two-step algorithm consists of an integer to the power of the variable &#39;n&#39;. . Exponential . | 3 step: A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. . Square . | 4 step: A four-step algorithm is a variable factorial. For instance, 5! = 5 4 3 2 1 = 120. . Factorial . | . Run Times . We can categorize the run time of an algorithm according to how the number of steps increases as the input size increases. Does it always take the same amount of time? That&#39;s a constant increase, a very fast run time. Does it always require looking at every possible permutation of the input? That&#39;s an exponential increase, a very slow run time. Most run times are somewhere between. . Constant Time . | When an algorithm runs in constant time, it means that it always takes a fixed number of steps, no matter how large the input size increases. . Linear Time . | When an algorithm grows in linear time, its number of steps increases in direct proportion to the input size. . Quadratic Time . | When an algorithm grows in quadratic time, its steps increase in proportion to the input size squared. Several list sorting algorithms run in quadratic time, like selection sort. That algorithm starts from the front of the list, then keeps finding the next smallest value in the list and swapping it with the current value. . Exponential Time . | When an algorithm grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. An algorithm often requires superpolynomial time when it must look at every permutation of values. . | Polynomial time describes any run time that does not increase faster than n^k which includes Constant time, Quadratic time, and other higher degree polynomials. Superpolynomial time describes any run time that does increase faster than n^k which includes Exponential time and factorial time. So polynomial is considered reasonable. . | . What is a decidable problem? . These are problems for which algorithms can be written to solve/produce a correct output for all possible inputs. | . What is an undecidable problem? . These are problems for which no algorithms can be built that can provide a correct yes or no answer. Undecidable problems may have some instances of algorithmic solutions, but there are no algorithmic solutions that can solve all instances of the problem. | . Vocabulary . Undecidable problem:problems for which no algorithms can be built that can provide a correct yes or no answer or a solution Decidable problem:problems for which algorthms could be written to solve/produce a correct output for all inputs. | . Hack 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . Decidable problems can be use to design an algorithm unlike undecidable problems that cannot give an algorithm. If any decision problem has a correct algorithm that runs for finite amount of time, then the problem is decidable. Undecidable problems have no algorithm that gives correct output in finite time. . Decidable problem example . num = 10 #set number equal to random value if num &gt; 5: # if the number is greater than 10 print(&quot;greater than 5&quot;) #print else: # if less than 10 print(&quot;not greater than 5&quot;) # print . greater than 5 . Undecidable problem example . num = 1 while num == 0: print(num) num = num + 1 . while num == 0: the number will never equal 0 since it is set to 1, therefore, this is undecidable . Hack 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . EXPLANATION: C is a 3 step algorithm because a variable is being multiplied to an integer, all to the power of two, fitting the criteria of a 3 step algorithm. . Hack 3 . Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Input In [8] function peak_finder(array){ ^ SyntaxError: invalid syntax . My Hack 3 answer . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 recurse(peak_finder); // function code } recurse(); . Recursive function research and example . I was a bit confused on how to rewrite this code in a more efficient way. Now I understand that I would use a recursion to print the outputs in reverse. To learn more about recursion, I took some notes while researching more about it. . Notes . A recursive function is a function that calls itself. You essentially create a loop with a function. As you can imagine, these can be tricky functions to write. You do not want your code to run forever. . | Similar to a loop, a recursive function will be controlled by a condition. Once the condition is met, the function stops calling itself, which stops the loop. This is how you can create a function that calls itself without it running forever. . | Although a recursive function acts like a loop, it is executed by the computer differently. So, some algorithms are more efficient in a loop and others benefit from a recursive function. But before we look at how to use a recursive function, you need to know how to write one. . | . FUNCTION name   IF condition THEN     RETURN result   ELSE     CALL FUNCTION name END FUNCTION . def factorialFunction(numberToMultiply): if numberToMultiply == 1 :   return 1 else :   return numberToMultiply * factorialFunction(numberToMultiply - 1) result = factorialFunction(3) print(result) //Outputs: 6 . def recursiveFunction(number) :   if (number % 2) == 0 :     return number   else:     print(&quot;That number is not even. Please enter a new number:&quot;)     recursiveFunction(int(input())) print(&quot;Enter and even number:&quot;) i = recursiveFunction(int(input())) . Hack 4 . Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . My Hack 4 answer . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] # unsorted/not in order list of numbers print(&quot;unsorted data:&quot;, data) # unsorted data data.sort() # sort function to sort through data print(&quot;sorted data&quot;, data) # sorted data . unsorted data: [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] sorted data [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . I found that using the sort() function was an easier algorithm as it quickly sorts through the list and prints data in order. Since I used the sort() function, I avoided using statements or while loops. . Hack 5 . Rewrite this Python Code in a more efficient way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . My Hack 5 Answer . from itertools import permutations # using library function perm = permutations([1, 2, 3], 3) # 3 on outside the bracket is all the permutations of the length 3 for i in list(perm): print ([i]) # print the obtained permutations . [(1, 2, 3)] [(1, 3, 2)] [(2, 1, 3)] [(2, 3, 1)] [(3, 1, 2)] [(3, 2, 1)] . To use the permutations function (returns the number of permutations that are possible for a specified number of objects in a given set), I imported the itertools module. . In this function, it takes a list as an input and returns an object list of tuples ( finite ordered list of elements). The list of tuples that is returned contains all permutations in a list form. . I used the list [1,2,3] from the example above and set a parameter of 3 which would be the length of the permutation since there are 3 numbers. . I then used a for loop to loop through all possible permutations. .",
            "url": "https://1908901.github.io/elliepang/2022/12/15/hacks-17-18.html",
            "relUrl": "/2022/12/15/hacks-17-18.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Sections 12-13 Hacks",
            "content": "Notes 3.12 Notes What is a procedure and a parameter? A procedure is a named group of programming instructions that may have parameters and return values. . Procedures can be reffered to as method or function depending on the programing language. . A procedrure call interrupts an execution of statements and makes the program execute the statements in the procedure. Parameters are input values of a procedure. Arguements specifcy the values of the parameters when a procedure is called. . If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. . If you see a return statement you automatically end the procedure even if there is more statements . Procedures are that a catch-all term for codes used to identify what was done to or given to a patient If you have a set of statements in a procedure the statement will go thought the top of the procedure to the bottom in order. . 3.13 Notes Procedure: is a named group of programming instructions that serves a purpose Parameter: are input values of a procedur There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program Creating a Procedure When you are picking a name for the procedure it must be descriptive See if you need any parameters for this procedure (what data do you need to accomplish my goal? What king of information am I going to need?) 2 of the parameters in the example below could be the quizGrade and currentPoints (need this data) One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. The subdivision of a computer program into sepearate subprogrames is called modularity. . 3.12 Part 1 Hacks . Problem 1: This problem involves parameters . Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed = Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . Problem 2: Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . I think &#39;IM MAD!!!&#39; will display because the upper() function converts all lowercase to uppercase and the concat() function adds on three exclamation marks. Therefore something will be displayed. . Problem 3: Procedures with return values . Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Homework/Hacks pt 2 . PROCEDURE find a () | { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . a = 729 . cost ⟵ 173 tax - 10% | PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . the cost is $190.30 . Temperature - 103 Degrees PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . answer = 39.444 . 3.13 Homework/Hacks for pt 1 and 2 of the lesson . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) . 2 Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . 3 Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST . B. PROCEDURE MyList . because procedure should be in all caps and part of the procedure name should be capitalized . C. procedure mylist . 4 Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } .",
            "url": "https://1908901.github.io/elliepang/2022/12/12/hacks12-13.html",
            "relUrl": "/2022/12/12/hacks12-13.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 3.14-3.15 Hacks",
            "content": "Reflection . After todays lesson on sections 14 through 15, I have a better understanding of libraries and documentations and how they make coding a more efficient process. I learned that libraries are efficient because they are pre-written and can be referenced throughout the code. Documentations are efficient as they explain how the code works. I also learned more about API&#39;s and that they facilitate communication amongst multiple computers. Finally, I learned about random values and how they can be used in determining possible results in an expression. . Reflection Practice . Reflection Practicing random.shuffle | import random number_list = [19, 11, 21, 28, 35, 42, 49, 56, 63, 70] print(&quot;Original list:&quot;, number_list) random.shuffle(number_list) print(&quot;List after first shuffle:&quot;, number_list) random.shuffle(number_list) print(&quot;List after second shuffle:&quot;, number_list) . Original list: [19, 11, 21, 28, 35, 42, 49, 56, 63, 70] List after first shuffle: [19, 42, 11, 56, 70, 35, 49, 63, 21, 28] List after second shuffle: [28, 63, 11, 35, 49, 42, 70, 56, 19, 21] . Reflection Practicing random.choice | import random number_list = [111, 222, 333, 444, 555] print(random.choice(number_list)) . 444 . Reflection Practice Documentation | def numAverage(value): sumNums = 0 for t in value: sumNums = sumNums + t average = sumNums / len(value) return average print(&quot;The number average is&quot;, numAverage([1, 2, 3, 4, 5, 6, 61, 84, 81, 83])) . The number average is 33.0 . Multiple choice . What does the random(a,b) function generate? | A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . ANSWER: B because the random function mean a random integer from the parameters set will be chosen. a,b are the parameters, a random integer from a to b will be given, including a and b. . What is x, y, and z in random.randrange(x, y, z)? | A. x = start, y = stop, z = step . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . ANSWER: A because the randrange function has the parameters so that the the start, x is the minimum value. Y is the stop (maximum), and z is the step/increment the values can be. . Which of the following is NOT part of the random library? A. random.item | B. random.random . C. random.shuffle . D. random.randint . ANSWER: A because the item() function is used in dictionaries to find an item in the dictionary. Since it does not have any parameters, is not a part of the random library. Example of a function without the import random funcion. . random = { &quot;day&quot;: &quot;Nike&quot;, &quot;clothing&quot;: &quot;shirt&quot;, &quot;year&quot;: 2012 } x = random.items() random[&quot;year&quot;] = 2018 print(x) . dict_items([(&#39;day&#39;, &#39;Nike&#39;), (&#39;clothing&#39;, &#39;shirt&#39;), (&#39;year&#39;, 2018)]) . Short Answer Questions . What is the advantage of using libraries? | Libraries are already pre-written and can be referenced in your code. Instead of taking the time to rewrite the same code multiple times, libraries are reusable functions that can be used without redefining them. Overall, libraries are efficient, easier for coding complex functions, and reducing coding errors. . Write a thorough documentation of the following code. | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) random_choice = random.randint(0, num_items - 1) person_who_will_pay = names[random_choice] print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . ellie is going to buy the meal today! . Documentation: . Using the library random, I set the variable names_string equal to the the names the user provides/inputs. . The split function will separate the names with a comma. . num_items will give each name given a number and using the random function randint, it randomly select a number that corresponds to a name. . The procedure returns the name and the sentence. . 4 Coding Challenge . Create a program to pick five random names from a list of at least 15 names | import random namesList = [&quot;Ellie&quot;, &quot;Katie&quot;, &quot;Haeryn&quot;, &quot;Dylan&quot;, &quot;Ava&quot;, &quot;Olivia&quot;, &quot;Sreeja&quot;, &quot;Yuna&quot;, &quot;Hannah&quot;, &quot;Taylor&quot;, &quot;Madison&quot;, &quot;Lizzy&quot;, &quot;Evan&quot;, &quot;Hailey&quot;, &quot;Ella&quot;] sample_namesList = random.sample(namesList, k=5) print(f&quot; These are your 5 random names: {sample_namesList}!&quot;) . These are your 5 random names: [&#39;Yuna&#39;, &#39;Hailey&#39;, &#39;Ella&#39;, &#39;Hannah&#39;, &#39;Katie&#39;]! . EXPLANATION: First I created a list that had all the names I wanted to use, I chose to use the names of my friends. Then I set a variable equal to a function that would pick 5 different random names. I used the random library function choices and set k equal to 5 which would choose 5 options from the list. After printing the list the random.sample function allows me to get 5 names. . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | import random p1dice1 = random.randrange(1,6) p1dice2 = random.randrange(1,6) print(&quot;Player 1 rolled a&quot;, p1dice1, &quot;and&quot;, p1dice2, &quot;for a sum of:&quot;, p1dice1+p1dice2) p2dice1 = random.randrange(1,6) p2dice2 = random.randrange(1,6) print(&quot;Player 2 rolled a&quot;, p2dice1, &quot;and&quot;, p2dice2, &quot;for a sum of:&quot;, p2dice1+p2dice2) p1sum = p1dice1 + p1dice2 p2sum = p2dice1 + p2dice2 if p1sum &gt; p2sum: print(&quot;Player 1 wins!&quot;) elif p1sum == p2sum: print(&quot;Roll again! You both rolled the same sum.&quot;) else: print(&quot;Congratulations! Player 2 wins!&quot;) . Player 1 rolled a 4 and 1 for a sum of: 5 Player 2 rolled a 5 and 1 for a sum of: 6 Congratulations! Player 2 wins! . Explanation: Using the random library, I set variables equal to a random number 1-6, which represents rolling the dice. I named the variables based on who rolled and what number they rolled it. Then I added the numbers together, whichever player had the higher sum wins. . Extra Credit Attempt . import random width = 5 height = 5 obstacles = 15 maze = [[0 for i in range(width)] for j in range(height)] for i in range(obstacles): x = random.randint(0, width - 1) y = random.randint(0, height - 1) maze[x][y] = &#39;x&#39; def startEnd(): a = random.randint(0, width - 1) b = random.randint(0, height - 1) maze[a][b] = &#39;S&#39; c = random.randint(0, width - 1) d = random.randint(0, height - 1) maze[c][d] = &#39;E&#39; startEnd() for row in maze: print(&#39; &#39;.join(str(cell) for cell in row)) . x 0 x x E x S 0 x x 0 0 0 0 0 x x 0 0 0 x x x 0 x . Extra Credit x2 . import random direction = [&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;] itemDirection = random.choices(direction) print(f&quot;Initial direction of the robot: {itemDirection}&quot;) startNumber = random.randrange(1,25) print(f&quot;Where the robot started: {startNumber}&quot;) goalPosition = [] for i in range(1): r=random.randrange(1,25) if r != startNumber: goalPosition.append(r) print(f&quot;The goal position is: {goalPosition}&quot;) obstacles = [] for i in range(12): r=random.randint(1,25) if r != startNumber: obstacles.append(r) if r != goalPosition: obstacles.append(r) if r not in obstacles: obstacles.append(r) print(f&quot;The goal position is: {obstacles}&quot;) . Initial direction of the robot: [&#39;left&#39;] Where the robot started: 3 The goal position is: [14] The goal position is: [18, 18, 6, 6, 22, 22, 3, 17, 17, 13, 13, 23, 23, 15, 15, 10, 10, 14, 14, 9, 9, 1, 1] .",
            "url": "https://1908901.github.io/elliepang/2022/12/12/hacks-14-15.html",
            "relUrl": "/2022/12/12/hacks-14-15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Section 8 and 10 Hacks",
            "content": "Notes . Iteration - Repitition of a Process . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. . increment/decrement - Modifies the counter variable after each repetition. . Indexing / List Index - The position of an element in a list, starting from 0 . append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. . Elements [in a list] - An item in a list. . Nesting - Having one data type or function inside another data type or function, such as lists or loops. . Array - Another name for a list, depends on the language . Exercise 1 . Task: Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Exercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array Expected Output The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Multiple Choice Quiz . I got a 9/10 on the quiz. . . To the question, &quot;How can we add something to the end of a list?&quot;, I chose &quot;Extend&quot;, instead of the correct answer, &quot;Append&quot;. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. .",
            "url": "https://1908901.github.io/elliepang/2022/12/06/hacks.html",
            "relUrl": "/2022/12/06/hacks.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Hacks",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Section 8 and 10 Hacks” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Notes n”, “Iteration - Repitition of a Process n”, “ n”, “For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated n”, “ n”, “While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met n”, “ n”, “Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. n”, “ n”, “Condition - Allows the computer to know whether or not to keep repeating the loop. n”, “ n”, “increment/decrement - Modifies the counter variable after each repetition. n”, “ n”, “Indexing / List Index - The position of an element in a list, starting from 0 n”, “ n”, “append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. n”, “ n”, “Elements [in a list] - An item in a list. n”, “ n”, “Nesting - Having one data type or function inside another data type or function, such as lists or loops. n”, “ n”, “Array - Another name for a list, depends on the language” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 1 n”, “Task: n”, “Reverse a list utilizing features of lists and iteration n”, “Hint: Use two parameters with the range function” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “List before reverse : [1, 2, 3, 4, 5] n”, “List after reverse : [5, 4, 3, 2, 1] n” ] } ], “source”: [ “original_list = [1, 2, 3, 4, 5] n”, “print(&quot;List before reverse : &quot;,original_list) n”, “reversed_list = [] n”, “for value in original_list: n”, “ reversed_list = [value] + reversed_list n”, “print(&quot;List after reverse : &quot;, reversed_list)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 2 n”, “Task: n”, “Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array n”, “Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array n”, “Expected Output n”, “The sorted array from 1-10” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] n” ] } ], “source”: [ “list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “print(f&quot;array before sort {list}&quot;) n”, “def insertion_sort(list): n”, “ for index in range(1,len(list)): # repeats through length of the array n”, “ value = list[index] n”, “ i = index - 1 n”, “ while i &gt;= 0: n”, “ if value &lt; list[i]: n”, “ list[i+1] = list[i] # shift number in slot i to the right n”, “ list[i] = value # shift value left into slot i n”, “ i = i - 1 n”, “ else: n”, “ break n”, “ n”, “IS = insertion_sort(list) n”, “print(f&quot;array after sort {list}&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ ## Multiple Choice Quiz n”, “ n”, “I got a 9/10 on the quiz. n”, “ n”, “ n”, “ n”, “To the question, &quot;How can we add something to the end of a list?&quot;, I chose &quot;Extend&quot;, instead of the correct answer, &quot;Append&quot;. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. n” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.8.10 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.10 (default, Jun 22 2022, 20:18:18) n[GCC 9.4.0]” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://1908901.github.io/elliepang/2022/12/06/hacks.ipynb",
            "relUrl": "/2022/12/06/hacks.ipynb",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Section 8 and 10 Hacks",
            "content": "Notes . Iteration - Repitition of a Process . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. . increment/decrement - Modifies the counter variable after each repetition. . Indexing / List Index - The position of an element in a list, starting from 0 . append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. . Elements [in a list] - An item in a list. . Nesting - Having one data type or function inside another data type or function, such as lists or loops. . Array - Another name for a list, depends on the language . Exercise 1 . Task: Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Exercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array Expected Output The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Multiple Choice Quiz . I got a 9/10 on the quiz. . . To the question, &quot;How can we add something to the end of a list?&quot;, I chose &quot;Extend&quot;, instead of the correct answer, &quot;Append&quot;. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. .",
            "url": "https://1908901.github.io/elliepang/2022/12/06/hacks-copy.html",
            "relUrl": "/2022/12/06/hacks-copy.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 8 10",
            "content": "Unit 8 and 10 Hacks . Lists and Iteration Exercises . Exercise #1 . Exercise #2 . Multiple Choice Quiz . I got a 9/10 on the quiz. . . To the question, “How can we add something to the end of a list?”, I chose “Extend”, instead of the correct answer, “Append”. Appending in Python, refers to adding its arguments as a single element to the end of a list. In other words, the length of the list keeps increasing by one. In extending, you are adding two lists together but in appending, you are just adding one thing to the list. .",
            "url": "https://1908901.github.io/elliepang/2022/12/05/unit-8-10.html",
            "relUrl": "/2022/12/05/unit-8-10.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Hacks for 3.1-3.2",
            "content": "3.1 Video 2 . Question 1 . because that is the latest value that was stored within the variable. | Question 2 . because the value stored in a variable will alwasy be the most recent value assigned. | Question 3 . because the value for num 2 becomes the value of num 1 therefore making the first outcome 6 and the second outcome would be six as well because that is the value that num2 is assigned. | Question 4 . because for num 1 the value is replaced by num 3’s value which is 30. For num 2 the value is 30 because its replaced by num 1’s value which was originally 25 but then was replaced by num 3’s value 30. For num 3, the value is 25 because it’s value is replaced by num 2 which num 2’s value was replaced by num 1’s. | Question 5 . because q is the variable assigned to p and q’s value is 20. | Question 6 . because the first two statements assign values to the variables. The third statement assigns the value of first (which is true) to second. The fourth statement assigns the value of second (which is true) to first. | Question 7 . because the first five statements assign values to the variables. The sixth statement assigns the value of x + b (which is 40) to b. The seventh statement assigns the value of x + 1 (which is 21) to a. The eighth statement assigns the value of c + d / 2 to d. According to the order of operations, division has higher precedence than addition. Since c is 30 and d / 2 is 20, d is assigned the value 50. The last four statements display the values of a, b, c, and d. | 3.1 Video 1 . Practice questions that I made . Consider the following code segment: | num1 ⟵ 12 num2 ⟵ 3 num3 ⟵ 9 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 18 . b. 17 . c. 1 . d. 19 . answer:17 . Consider the following code segment: | num1 ⟵ 7 num2 ⟵ 2 num3 ⟵ 19 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 22 . b. 28 . c. 12 . d. 16 . answer: 16 . Consider the following code segment: | num1 ⟵ 9 num2 ⟵ 4 num3 ⟵ 3 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 11 . b. 15 . c. 17 . d. 12 . answer: 12 . Consider the following code segment: | num1 ⟵ 7 num2 ⟵ 12 num3 ⟵ 10 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a.17 . b. 3 . c. 16 . d. 5 . answer: 16 . Consider the following code segment: | num1 ⟵ 6 num2 ⟵ 4 num3 ⟵ 10 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 2 . b. 16 . c. 12 . d. 4 . answer:4 . Consider the following code segment: | num1 ⟵ 6 num2 ⟵ 4 num3 ⟵ 10 IF num1 &lt; num2 . num1 ⟵ num2 ELSE . num3 ⟵ num2 IF num2 ≥ num3 . num1 ⟵ num2 + num3 sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . a. 13 . b. 14 . c. 19 . d. 11 . answer:11 . Question 1 . 1. Because the name is descriptive of what is stored. Also, the number of apples in the store can change so the integer lets you add a nd subtract to the number of apples. ## Question 2 . Because this is a true or false question. It is either cold or not, so the variable name describes the circumstance, then the boolean data type specifies true or false. | Question 3 . IDnumber because it is descriptive but not too long and innefective. it is also a string because it doesn’t change and its a string of numbers. | Question 4 . No, because it is too long and inefficient to use when trying to store variables. | Question 5 . A boolean data type allows a variable to store true and false. | Question 6 . This is the only answer that has two true statements | My Three questions: . To check if it is in the afternoon or not what would the answer be? Is it afternoonYes and boolean? . To check if the tide is good for surfing, what would the answer be? Is it tideGood and String? . To record the color of a shoe, what would the answer be? Is it shoeColor and string? . Binary Hacks . 7 | 11 | 107 | 1100 | 101100 | 11111110 3.2 Video 2 . | Question 1 . 4. Because the data is not being appended from scores2 into scores1. . Question 2 . Because all of the data from listA “Sam” and “Ann” replace what is in listB. So if listB replaces what is in listA, “Sam” and “Ann” will still be the only data in that list. | Question 3 . The length of the list is 6. | Question 4 . The index count starts at 0, making “Red” 0 and “Purple” index 5. | Question 5 . Any type of data can be stored within a list. A list can contain a mix of types of data. | Question 6 . 2. A float is a decimal number. . Question 7 . An index count starts at 0 so the index number of a variable is one less than it’s spot in the length. | Question 8 . False. Variables can be changed later on in the code. | Question 9 . The list has floats or decimals and strings, and the length is 10, the ratio of string to floats is 1:1, and the index number of “Avocado” is 4. |",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/29/hacks-for-3.2.html",
            "relUrl": "/collegeboard/2022/11/29/hacks-for-3.2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Assignment",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Unit 3 Sections 5-7 Hacks n”, “&gt; Hacks n”, “ n”, “- toc: true n”, “- badges: true n”, “- comments: true n”, “- categories: [csp]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.5-3.7 Notes n”, “ n”, “Boolean- binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; There are multiple operators used to evaluate 2 variables. In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. Python uses != instead of ≠. These operators help determine the boolean value of a statement. n”, “ n”, “Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). n”, “ n”, “Algorithm: Finite set of instructions that accomplish a specific task n”, “Conditional Statements: allow the code to act based on multiple conditions, such as user input or stored data n”, “use in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm n”, “Categories: 2 broad types of conditional statements are if statements and if-else statements n”, “if statement: will go through certain statements if the if expression is true n”, “if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false n”, “ n”, “Nested conditional: A conditional inside of a conditional. Used in algorithms in order to print specific data or run certain tasks, to create further conditions in algorithms. n”, “We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.5 Hacks n”, “ n”, “## Binary Practice n”, “Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. n”, “ n”, “1. 90(D) = 1000(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: B false because the binary value of B is larger than the value of D. n”, “ n”, “2. 10(D) ≠ 0110(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: A true because the binary value of B is not equal to the value of D. n”, “ n”, “3. 56(D) ≥ 111000(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: A true because the binary value of B is 56 which is equal to the value of D. n”, “ n”, “3. 99(D) &lt; 1110011(B) n”, “ n”, “- A. True n”, “- B. False n”, “answer: A true because the binary value of B is larger than the value of D.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Now, complete the binary truth tables” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;html&gt; n”, “ n”, “ &lt;div&gt;AND Operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Value 1&lt;/th&gt; n”, “ &lt;th&gt;Value 2&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “ &lt;div&gt;OR Operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Value 1&lt;/th&gt; n”, “ &lt;th&gt;Value 2&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “ &lt;div&gt;Not operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Not&lt;/th&gt; n”, “ &lt;th&gt;Value&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;Not&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;Not&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “&lt;/html&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Python Practice” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “False n”, “True n” ] } ], “source”: [ “# Testing out relational operators n”, “# Practice with these statements n”, “ n”, “print(20 &gt; 20) # How can you change the operator to print a value of False? n”, “ n”, “x = 30 n”, “y = 20 n”, “z = 10 n”, “print(x &gt;= y + z) # How can this return true by only manipulating the operator? n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.6 Hacks n”, “ n”, “## AP Prep n”, “ n”, “1. What is displayed by this code? n”, “- result &lt;– 75 n”, “- IF result &lt; 80 { n”, “ DISPLAY(&quot;Please schedule a retake.&quot;) n”, “} n”, “- ELSE { n”, “ DISPLAY(&quot;Nice job!&quot;) n”, “} n”, “ n”, “1. Nice job! n”, “2. Display n”, “3. Please schedule a retake. n”, “4. 75 n”, “ n”, “answer: 3 &quot;Please schedule a retake.&quot; If condition is met, 75 &lt; 80 so the if display is shown. n”, “ n”, “2. How is an if statement different from an if-else statement. n”, “ n”, “1. Extra words. n”, “2. An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. n”, “3. They are the exact same. n”, “4. An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. n”, “ n”, “answer: 2, in if statements the criteria must be made in order to go through the code. n”, “ n”, “3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. n”, “ n”, “1. If statement n”, “2. If-else statement n”, “ n”, “answer: 2 If-else, because if he has gas he will go to the bank BUT else (gas is not full) he will go home. n”, “ n”, “4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. n”, “ n”, “1. If statement n”, “2. If-else statement n”, “ n”, “answer: 1 Because it does not say what else he will do if it is not sunny n”, “ n”, “ n”, “## Using Python” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “lion n”, “tiger n”, “wildebeest n”, “Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! n”, “jellyfish n”, “blobfish n”, “raven n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n”, “This animal lives in the desert n” ] } ], “source”: [ “animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] n”, “ n”, “for i in animals: n”, “ if i == &quot;shark&quot;: # What boolean value does this statement cause? n”, “ print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) n”, “ else: n”, “ print(i) n”, “ n”, “for i in animals: n”, “ if i == &quot;lion&quot; or &quot;wildebeest&quot; or &quot;raven&quot;: n”, “ print(&quot;This animal lives in the desert&quot;) n”, “ else: n”, “ print(i + &quot;does not live in the desert&quot;) n”, “# Practice n”, “# Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.7 Hacks n”, “ n”, “## Exercise 1 n”, “- Create dictionaries for multiple food items, with the listed specifications n”, “ - Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes n”, “ - Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes n”, “ - Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes n”, “- Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Sorry, you do not have enough time and cannot cook a Chicken Alfredo n”, “You can cook a Cheese Quesadilla n”, “Sorry, you do not have enough time and cannot cook a Beef Wellington n” ] } ], “source”: [ “# Write code here n”, “chickenAlfredo = { n”, “ &quot;meat&quot;: True, n”, “ &quot;prepTime&quot;: 60, n”, “ &quot;name&quot;: &quot;Chicken Alfredo&quot; n”, “} n”, “ n”, “cheeseQuesadilla = { n”, “ &quot;meat&quot;: False, n”, “ &quot;prepTime&quot;: 10, n”, “ &quot;name&quot;: &quot;Cheese Quesadilla&quot; n”, “ n”, “} n”, “ n”, “beefWellington = { n”, “ &quot;meat&quot;: True, n”, “ &quot;prepTime&quot;: 150, n”, “ &quot;name&quot;: &quot;Beef Wellington&quot; n”, “ n”, “} n”, “ n”, “def cookMeal(dish): n”, “ if dish[&quot;prepTime&quot;] &lt;= 30: n”, “ if dish[&quot;meat&quot;] == False: n”, “ print(&quot;You can cook a&quot;, dish[&quot;name&quot;]) n”, “ else: n”, “ print(&quot;Sorry, you do not have meat and cannot cook a&quot;, dish[&quot;name&quot;] ) n”, “ else: n”, “ print(&quot;Sorry, you do not have enough time and cannot cook a&quot;, dish[&quot;name&quot;] ) n”, “ n”, “cookMeal(chickenAlfredo) n”, “cookMeal(cheeseQuesadilla) n”, “cookMeal(beefWellington)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 2 n”, “ n”, “Make a flowchart(here is one we used) and write pseudocode for the following scenario. n”, “- Mr. Yeung would like to grade live reviews. n”, “- He wants to see if each student has at least 2 issues on their project. If they don’t they receive a score of 2.0. n”, “- If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. n”, “- If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. n”, “- How much would a student with 3 issues and 1 complete scrumboard task receive? n”, “ n”, “Answer: A student with 3 issues and 1 completed scrumboard task would receive a 2.5 n”, “ n”, “ n”, “ n” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.8.10 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.10” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://1908901.github.io/elliepang/2022/11/28/assignment.ipynb",
            "relUrl": "/2022/11/28/assignment.ipynb",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://1908901.github.io/elliepang/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Trimester 1 Final Test Corrections",
            "content": ". My Score: 46/50 . 1st Incorrect Question . . Takeaway/Correction: Alejandra’s geographic location is needed so that the application can determine which restaurants are nearby. The usernames of the people on Brandon and Cynthia’s contact lists are not needed. Since Alejandra is organizing the meal, only her contact list is used. . 2nd Incorrect Question . . Takeaway/Correction: Information about which restaurants Brandon and Cynthia have visited in the past is not needed. Restaurants are recommended based on whether they can accommodate all allergies and dietary restrictions, not based on whether group members have been there before. Information about which food allergies and dietary restrictions can be accommodated at nearby restaurants is needed so that a restaurant can be recommended for the group. . 3rd Incorrect Question . . Takeaway/Correction: This is the initial value of r. Both q and s have the value 30 after executing the code segment. . 4th Incorrect Question . . Takeaway/Correction: The eighth statement assigns the value of c + d / 2 (which is 50) to d. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/09/tri1final.html",
            "relUrl": "/collegeboard/2022/11/09/tri1final.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "🔆❤Relaxation Center ❤🔆",
            "content": ".",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/09/Relation-center.html",
            "relUrl": "/collegeboard/2022/11/09/Relation-center.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Night Of The Museum Blog",
            "content": "APCSP Project: Journal . . I watched a group’s presentation for their final project and I was really amazed by their final product. Their project was a journal that had had a text box to write your thoughts, buttons to rate your emotions or how your day was going, and had a really nice design. . AP ART . . I was really impressed by all of the projects in the room but I especially loved this colorful on. I could tell that the artist took a lot of time on their project and their final result was really great to look at. . 3D ART . . I found all of these projects to be really cool. I thought about how much time it took to design and execute their plan into their final project and the results were cool. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/11/09/Night-of-museum.html",
            "relUrl": "/collegeboard/2022/11/09/Night-of-museum.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Title",
            "content": "var CorrectAnswers = { &quot;question1&quot;: &quot;question1_answer_3&quot;, &quot;question2&quot;: &quot;question2_answer_1&quot;, &quot;question3&quot;: &quot;question3_answer_2&quot;, }; var correct_page = { &quot;question1&quot;: &quot;correct_page&quot;, &quot;question2&quot;: &quot;correct_page_2&quot;, &quot;question3&quot;: &quot;correct_page_3&quot;, }; var incorrect_page = { &quot;question1&quot;: &quot;incorrect_page&quot;, &quot;question2&quot;: &quot;incorrect_page_2&quot;, &quot;question3&quot;: &quot;incorrect_page_3&quot;, }; var screenButtons = { &quot;question1&quot; : 4, &quot;question2&quot; : 4, &quot;question3&quot; : 4 }; setAnswerButtonEvent(); onEvent(&quot;start_button&quot;, &quot;click&quot;, function( ) { console.log(&quot;Start Button Clicked&quot;); setScreen(&quot;question1&quot;); }); function setAnswerButtonEvent(){ var keys = Object.keys(screenButtons); console.log(keys); Object.keys(screenButtons).forEach(function (key) { var buttonCount = screenButtons[key]; for(var i=1; i &lt;= buttonCount; i++) { var answerButtonName = key + &quot;_answer_&quot; + i; console.log(answerButtonName); checkAnswer(key, answerButtonName ); } }); } function checkAnswer(question, choice ){ onEvent(choice, &quot;click&quot;, function(event) { console.log(choice + &quot; is clicked!&quot;); if (CorrectAnswers[question] !== choice ) { setScreen(incorrect_page[question]); } else { console.log(&quot;correct page&quot;); setScreen(correct_page[question]); } }); } onEvent(&quot;correct_continue_button_1&quot;, &quot;click&quot;, function( ) { console.log(&quot;Correct Continue Button Clicked&quot;); setScreen(&quot;question2&quot;); }); onEvent(&quot;incorrect_continue_button_1&quot;, &quot;click&quot;, function( ) { console.log(&quot;Incorrect Continue Button Clicked&quot;); setScreen(&quot;question2&quot;); }); onEvent(&quot;correct_continue_button_2&quot;, &quot;click&quot;, function( ) { console.log(&quot;Correct Continue Button Clicked&quot;); setScreen(&quot;question3&quot;); }); onEvent(&quot;incorrect_continue_button_2&quot;, &quot;click&quot;, function( ) { console.log(&quot;Incorrect Continue Button Clicked&quot;); setScreen(&quot;question3&quot;); }); onEvent(&quot;correct_continue_button_3&quot;, &quot;click&quot;, function( ) { console.log(&quot;Correct Continue Button Clicked&quot;); setScreen(&quot;finish_page&quot;); }); onEvent(&quot;incorrect_continue_button_3&quot;, &quot;click&quot;, function( ) { console.log(&quot;Incorrect Continue Button Clicked&quot;); setScreen(&quot;finish_page&quot;); }); . [ &#39;question1&#39;, &#39;question2&#39;, &#39;question3&#39; ] question1_answer_1 . evalmachine.&lt;anonymous&gt;:49 onEvent(choice, &#34;click&#34;, function(event) { ^ ReferenceError: onEvent is not defined at checkAnswer (evalmachine.&lt;anonymous&gt;:49:3) at evalmachine.&lt;anonymous&gt;:43:7 at Array.forEach (native) at setAnswerButtonEvent (evalmachine.&lt;anonymous&gt;:38:30) at evalmachine.&lt;anonymous&gt;:28:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) .",
            "url": "https://1908901.github.io/elliepang/2022/10/26/quiz.html",
            "relUrl": "/2022/10/26/quiz.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "College Board Program Design",
            "content": "College Board Program Design . Program Purpose and Function . Our program’s purpose is to provide vocabulary for math (AP Calc and AP Statistics), as well as physics, and provide quizzes to test skills. The program’s function will be to use dictionaries, inputs, and outputs, to show information. . Data Abstraction . Dictionaries can be used to store data; data can be backlogged using a ‘console.log’ command (or something similar). Lists/dictionaries can also be used for search functions (ie; if ‘Statistics’ is searched, a list of words related to ‘Statistics’ will be run, and those items will appear. . Managing Complexity . Multiple lists can be used to map data, and dictionaries can be used to map certain data to lists Ex: If a term for the name of a list is searched, it can bring up those terms, and when a term is clicked, a dictionary can direct to different links. . Procedural Abstraction . We will have a function to administer our quiz that references to a dictionary for the questions and answers, and has a score tracker that when the quiz is finished, outputs different phrases according to how well they did. We are also considering a functionality in which it will take the type of answers failed and relate it to either outside resources for it or something in our program . Algorithm Implementation . An algorithm we will have will first ask someone for their current math/science class, then look through dictionary to see the level it would be at in high school (eg. integraded 1a: low, pre-cal: mid, ap calc: high), if the class they state is not given the program will ask if they are taking something outside of school or if they misspelled, then give a chance to clarify. If they are taking something outside of school the program will tell them to try and relate it to one of or school’s courses through provided internet materials. After figuring out their class, our program will ask how much they are struggling, and show a correlated amount of related material to support them. . Testing . We will institute a reward for quizzes, which will test if there are high scores in the quizzes that the user took, which were stored in a dictionary made, and if there are enough decently high scores they will be redirected to a page that either has a game or links to something enjoyable. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/10/lcol.html",
            "relUrl": "/collegeboard/2022/10/10/lcol.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Identifying and Correcting Errors Quiz",
            "content": ". Takeaways Question 1 . Takeaways Question 2 . Takeaways Question 3 . . . Takeaways Question 1 . Messages are broken into packets. Each packet contains data to be transmitted, as well as metadata for routing and reassembling the data upon receipt. This allows the packets to be received in any order and still be reassembled correctly. . . Takeaways Question 2 . Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way. . . Takeaways Question 3 . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/10/identifying.html",
            "relUrl": "/collegeboard/2022/10/10/identifying.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . url = &quot;https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/random&quot; querystring = {&quot;tags&quot;:&quot;vegetarian,dessert,vegan,dinner&quot;,&quot;number&quot;:&quot;1&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spoonacular-recipe-food-nutrition-v1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;module&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? &lt;module &#39;json&#39; from &#39;/home/elliepang007/anaconda3/lib/python3.9/json/__init__.py&#39;&gt; . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . import requests url = &quot;https://sameer-kumar-aztro-v1.p.rapidapi.com/&quot; querystring = {&quot;sign&quot;:&quot;aquarius&quot;,&quot;day&quot;:&quot;today&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b3323bf068msh78fdc9a03f97535p1332dcjsnfe5d256eaa9a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;sameer-kumar-aztro-v1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;date_range&#34;: &#34;Jan 20 - Feb 18&#34;, &#34;current_date&#34;: &#34;October 10, 2022&#34;, &#34;description&#34;: &#34;Oh, sure -- just when you thought you were totally focused on what you were doing, you&#39;re suddenly ready to ditch it all, just to have one perfect, romantic moment. Lucky for you, it&#39;s the right time.&#34;, &#34;compatibility&#34;: &#34;Leo&#34;, &#34;mood&#34;: &#34;Sweet&#34;, &#34;color&#34;: &#34;Spring Green&#34;, &#34;lucky_number&#34;: &#34;20&#34;, &#34;lucky_time&#34;: &#34;1am&#34;} . Error: I was not able to organize the data neatly. .",
            "url": "https://1908901.github.io/elliepang/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . from dataclasses import FrozenInstanceError from logging.handlers import BufferingHandler menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; n front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) def menuloop(): total = 0 choice = &#39;&#39; while choice != &#39;done&#39;: choice = input(&#39;Please select an item from the menu.&#39;) if choice != &#39;done&#39;: if choice in menu : print(&#39;Selected:&#39;, choice , &#39;. Price:&#39;, menu[choice]) total += menu [choice] else: print (&#39;Incorrect&#39;) return total total = menuloop() print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Selected: burger . Price: 3.99 Selected: drink . Price: 0.99 Selected: drink . Price: 0.99 Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect Incorrect .",
            "url": "https://1908901.github.io/elliepang/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Program Design and Development Quiz",
            "content": ". Difficulty . While going through the quiz, I found it difficult to find the differences in each answer choice. All of the answer choices were very similar and it took some time to understand the image of the code. . Questions . . What the direction of the arrows inside the loop represent? . How does numList[k] and numlist[j] represent a number value? . In question 1,why do the end of the brackets overlap each other? . Takeaways from Question 1 . . The process starts the count at 1. The value of count is displayed inside the loop, after which it is increased by 2 to the following odd number. When count surpasses max, the loop ends, and any positive odd numbers that are less than or equal to max are displayed. . Takeaways from Question 2 . . The code section begins by adding the x and y numbers, divides the result by x, and then outputs the outcome. A divide-by-zero mistake will occur when result is divided by x if the value of x is 0. . Takeaways from Question 3 . . The process produces a newList object that is a clone of numList. It is assigned to the element at newList[j] that is at numList[k], and it is allocated to the element at newList[k] that is at newList[j]. As a result, the entries at indices j and k are switched between in newList as opposed to numList. It is crucial to specify that j and k are both between 1 and LENGTH(numList), inclusive, because the process only functions if j and k are valid list indices. .",
            "url": "https://1908901.github.io/elliepang/collegeboard/2022/10/02/Program-Dev-quiz.html",
            "relUrl": "/collegeboard/2022/10/02/Program-Dev-quiz.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "HTML Fragments and Javascript",
            "content": "&lt;h2&gt;HTML life&lt;/h2&gt; .",
            "url": "https://1908901.github.io/elliepang/javascript/2022/09/23/Javascript.html",
            "relUrl": "/javascript/2022/09/23/Javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Focus and Habits and Collaborations",
            "content": "Focus and Habits and Collaborations . Completed Collaborations From Our Team . . Completed Collaborations and Program Function Quiz . . . Takeaways from the video: . Takeaways from the video: • I’m going to start doing everyday activities that make me happy, even if it takes a lot of effort, since, as the video showed, pleasure comes from living in the present rather than in the past or the future. • I’ll make an effort to socialize more, interact with others, and become involved in groups. • I’ll always make a point of telling the individuals I love how much I value them and work to strengthen my bonds with others. n • I won’t explicitly concentrate on the future; instead, I’ll concentrate on the present and now and what I can do, all the options and the choices I can make now to make me happy and live a more fulfilled life. | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/20/Video-Notes.html",
            "relUrl": "/markdown/2022/09/20/Video-Notes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Performance Task Planning",
            "content": "Performance Task Planning . Main Concept: . Website will be mostly school based | There will be a Math, Physics, Volleyball, and Gacha section | . For Math Section: . Will have AP Calculus as well as AP Statistics | Calculators, both for equations as well as normal calculations | Will have definitions as well as equations | For quizzes, there will be some for both AP Statistics and AP Calculus Both will have the page format: Start -&gt; Question -&gt; Incorrect page with how to solve/Correct page -&gt; Repeats until last page | . | . For Physics Section: . Very similar to the Math Section, but with Physics | Calculators for physics equations will be included, as well as definitions/terms | Will also have quizzes with the same format | . For Volleyball Section . Mostly volleyball terms, strategies, and etc. | Will also have images explaining terms/strategies | . For Gacha Section . Essentially a gacha calculator that gives random character pulls at a precent chance (likely using a print function) | Mostly just a ‘For fun’ section, may or may not get to this but it would be fun to include | . Requirements . Knowledge of math | Knowledge of python math functions | Knowledge on quizzes | Knowledge of liquid for automation of certain portions | Probably other things as we flesh out the concept | . Current Ability . At this point in time, we can already do the design and quiz portions, however the calculator for the math section will require us to learn more aspects of python and liquid, and there are probably other minute details we haven’t noticed that we don’t know how to do . Resources . We have Github, Google, Khan academy, and the APCSP homepage to support us . Notes . The reasoning we had for our website is that the math and science sections will support us in our studying and school lives, and hopefully help others students struggling in school by providing them resources and learning materials. Volleyball stats will help us explore our interests while expanding our knowledge on computer science and its possibilities in many fields. The gacha sections will help us learn more on probability and output for the end user, as well as being something fun to do to encourage us. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/11/Performance.html",
            "relUrl": "/markdown/2022/09/11/Performance.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "App Lab",
            "content": "App Lab . Link to my App Lab . . Brainstorming Execution Successes and Failures . The theme of my quiz is volleyball. I will have three questions with 4 possible answers each. When the user clicks the incorrect answer, a sound will play and an red “incorrect” text will show. When the correct answer is clicked, a different sound will play and the quiz will continue to the next question. By the end of the quiz, it will collect the number of wrong and right answers and the calculate the score. To execute this, I will have a screen for the title, question one, question two, question three, and score results. | After coding, most of my planned executed successfully. I figured out how to put a certain amount of time for each event, how to use buttons, and calculate the score. The quiz adds up the total amount of points and then totals them to get the final score | Something that was successful for me was that the code on code.org is pretty simple and straightforward. Something that I found difficult was managing all of the buttons and screens since I had so many of each. | . . Row 1: Program Purpose and Function . The code starts simple with onEvents that set to a specific screen if the user clicks on a specific button. Later in the code I use if then and if else code to simplify the code and can used the blocks to calculate the score in a percentage. . Row 2: Data Abstraction . I learned more about javascript and how to code through coding blocks and learned how to store different types of code. The code can limit the input that a person can give. . Row 3: Managing Complexity . The code compares data and work simliar to MBTI tests to ask you a question and get feedback such as the score to get your results. . Row 4: Procedural Abstraction . The procedural is storing data through the person’s input contributes to the results of the program and depending on the results, the program can grade what you go on the website. . Row 5: Algorithm Implementation . The algorithm will be based on their results and what choices they choose from the 3 questions. The program will calculate your score and then grade you, it can also show if you got it right or wrong. . Row 6: Testing . I would normally do this on a video like they do for AP exams, but if you test out my website in the link below, you would know that it would work and that it shows the following commands that I put in. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/11/App-Lab.html",
            "relUrl": "/markdown/2022/09/11/App-Lab.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "My Findings From Editing Theme",
            "content": "My Findings From Editing Theme . . . There were a couple of issues that happened after I changed my theme from minima to midnight. Some issues included: . Opened up the 404 page | The formatting of my markdown pages was altered. | Some of my pages were empty | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/09/05/theme.html",
            "relUrl": "/markdown/2022/09/05/theme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hi, Ellie!&quot;); . Hi, Ellie! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, Ellie!&quot;; console.log(msg); . Hello, Ellie! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, Ellie! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Variables in JavaScript&quot;) logItType(&quot;APCSP&quot;); // String logItType(2022); // Number logItType([&quot;Ellie&quot;, &quot;Giannina&quot;, &quot;Keira&quot;,]); // Object is generic for this Array, which similar to Python List . Variables in JavaScript string ; APCSP number ; 2022 object ; [ &#39;Ellie&#39;, &#39;Giannina&#39;, &#39;Keira&#39; ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Ellie&quot;, &quot;elliepang007&quot;, 2025), new Person(&quot;Giannina&quot;, &quot;LoveMyDogs/Timeline&quot;, 2024), new Person(&quot;Keira&quot;, &quot;keiraokimoto&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Ellie&#39;, ghID: &#39;elliepang007&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Giannina&#39;, ghID: &#39;LoveMyDogs/Timeline&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Keira&#39;, ghID: &#39;keiraokimoto&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:purple;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em pink;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Ellie | elliepang007 | 2025 | Student | Giannina | LoveMyDogs/Timeline | 2024 | Student | Keira | keiraokimoto | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://1908901.github.io/elliepang/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Ellie&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 14 print(&quot;age&quot;, age, type(age)) # variable of type float score = 99.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[1]&quot;, langs[1], type(langs[1])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Ellie &lt;class &#39;str&#39;&gt; age 14 &lt;class &#39;int&#39;&gt; score 99.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[1] JavaScript &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Ellie&#39;, &#39;age&#39;: 14, &#39;score&#39;: 99.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Ellie &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;], &quot;Favorite_Food&quot;: &quot;unknown&quot;, &quot;Owns&quot;: &quot;unknown&quot; }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ellie&quot;, &quot;LastName&quot;: &quot;Pang&quot;, &quot;DOB&quot;: &quot;November 1&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;elliepang007@gmail,com&quot;, &quot;Owns_Cars&quot;: [&quot;No&quot;], &quot;Favorite_Food&quot;: &quot;Sushi&quot;, &quot;Owns&quot;: &quot;Yes&quot; }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;], &#39;Favorite_Food&#39;: &#39;unknown&#39;, &#39;Owns&#39;: &#39;unknown&#39;}, {&#39;FirstName&#39;: &#39;Ellie&#39;, &#39;LastName&#39;: &#39;Pang&#39;, &#39;DOB&#39;: &#39;November 1&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;elliepang007@gmail,com&#39;, &#39;Owns_Cars&#39;: [&#39;No&#39;], &#39;Favorite_Food&#39;: &#39;Sushi&#39;, &#39;Owns&#39;: &#39;Yes&#39;}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite_Food:&quot;, d_rec[&quot;Favorite_Food&quot;]) print(&quot; t&quot;, &quot;Pet Owner:&quot;, d_rec[&quot;Owns&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Favorite_Food: unknown Pet Owner: unknown Ellie Pang Residence: Del Sur Birth Day: November 1 Cars: No Favorite_Food: Sushi Pet Owner: Yes . food = [&quot;pasta&quot;, &quot;pizza&quot;, &quot;strawberries&quot;, &quot;chips&quot;, &quot;french fries&quot;, &quot;cherries&quot;] # while loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(food): print(food[i]) i += 1 return while_loop() . While loop output pasta pizza strawberries chips french fries cherries . def while_loop(): print(&quot;While loop output n&quot;) i = 5 while i &gt;=0: print(food[i]) i -= 1 return while_loop() . While loop output cherries french fries chips strawberries pizza pasta . food = [&quot;pasta&quot;, &quot;pizza&quot;, &quot;strawberries&quot;, &quot;chips&quot;, &quot;french fries&quot;, &quot;cherries&quot;] def while_loop(): print(&quot;While loop output n&quot;) i=0 while i&lt;len(food): print(food[i]) i +=1 return while_loop() def while_loop(): print(&quot;While loop output n&quot;) i=4 while i &gt;=0: print(food[i]) i -=1 return while_loop() for index, val in enumerate(food): print(index, val) . While loop output pasta pizza strawberries chips french fries cherries While loop output french fries chips strawberries pizza pasta 0 pasta 1 pizza 2 strawberries 3 chips 4 french fries 5 cherries . import getpass, sys FoodQuestion = [&quot;Fruit&quot;, &quot;Vegetable&quot;, &quot;Soup&quot;, &quot;Drink&quot;, &quot;Snack&quot;] FoodAnswer = [&quot;Apple&quot;, &quot;Carrot&quot;, &quot;Clam Chowder&quot;, &quot;Milkshake&quot;, &quot;Chips&quot;] # Lists (ignore these they aren&#39;t used in the code) Food = { &quot;Fruit&quot;: &quot;Apple&quot;, &quot;Vegetable&quot;: &quot;Carrot&quot;, &quot;Soup&quot;: &quot;Clam Chowder&quot;, &quot;Drink&quot;: &quot;Milkshake&quot;, &quot;Snack&quot;: &quot;Chips&quot;, } # The dictionary/list dictionary CorrectList = {} IncorrectList = {} # Empty dictionaries used to store data def question_with_response(question): print(&quot;What is my favorite &quot; + question + &quot;?&quot;) msg = input () return msg # defines and prints question; asks for input def question(): for question in FoodQuestion: rsp = question_with_response(question) if (rsp != Food [question]): print (rsp + &quot; is incorrect.&quot;) IncorrectList [question] = rsp else: print (rsp + &quot; is correct.&quot;) CorrectList [question] = rsp # defines unit as one of the keys in the dictionary # answers are marked as incorrect if they do not match the values that go with the keys question() . What is my favorite Fruit? is incorrect. What is my favorite Vegetable? is incorrect. What is my favorite Soup? is incorrect. What is my favorite Drink? is incorrect. What is my favorite Snack? is incorrect. . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://1908901.github.io/elliepang/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Bash Installation Check",
            "content": "%%bash #Check version of Conda conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda (.* )/ 1/p;&#39;) #conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #conda_version=&#39;conda -V | sed -n &#39;;s/conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39; #echo $conda_version #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $conda_version &gt; &quot;0&quot; ]; then echo &quot;Conda version: &quot;$conda_version else echo &quot;Conda not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . bash: fg: %%bash: no such job Conda version: 4.13.0 Python version: 3.9.12 . Conda Packages . conda list . # packages in environment at /home/elliepang007/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/elliepang007/.local/share/jupyter/kernels/bash javascript /home/elliepang007/.local/share/jupyter/kernels/javascript python3 /home/elliepang007/.local/share/jupyter/kernels/python3 .",
            "url": "https://1908901.github.io/elliepang/2022/08/28/test2.html",
            "relUrl": "/2022/08/28/test2.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Python Quiz",
            "content": "- title: Lists, Dictionaries, Iteration - toc: true - categories: [units] - permalink: /collegeboard/python_lists - image: /images/python_lists.png - categories: [collegeboard] - tags: [python] . #define: score = 0 questions = 4 def q_a(q, a): answer = input(q) score = 0 if answer == a: print(&quot;Good job! That is correct!&quot;) score = 1 else: print(&quot;Good try! The answer is &quot; + a + &quot;.&quot;) return score #intro: name = input(&quot;Enter your name:&quot;) print(&quot;Hey! &quot; + name) ready = input(&quot;This quiz will have 4 questions.&quot; + &quot; Are you ready to start this quiz? Answer yes or no.&quot;) if ready == &quot;yes&quot;: print(&quot;Let&#39;s get started!&quot;) else: print(&quot;Good Luck!&quot;) #question 1: score = score + q_a(&quot;1. Are static texts changeable?&quot;, &quot;No&quot;) #question 2: score = score + q_a(&quot;2. Where is output found in Jupyter Notebook?&quot;, &quot;Below the code cell&quot;) #question 3: score = score + q_a(&quot;3. What are grouping a sequence of commands called?&quot;, &quot;Procedural abstraction&quot;) #question 4: score = score + q_a(&quot;4. What are two or more lines that form a sequence called?&quot;, &quot;Sequence of code&quot;) #ending score if score &gt;= 3: print(&quot;Congratulations! You completed this quiz with an amazing score! You scored a: {}/4&quot; .format(score)) else: print(&quot;Congratulations! You completed the quiz. Your score is a: {}/4&quot; .format(score)) . Hey! Ellie Good Luck! Good job! That is correct! Good job! That is correct! Good job! That is correct! Good job! That is correct! Congratulations! You completed this quiz with an amazing score! You scored a: 4/4 .",
            "url": "https://1908901.github.io/elliepang/2022/08/28/ellie.html",
            "relUrl": "/2022/08/28/ellie.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Daily Schedule With Image",
            "content": ". Daily Blog . Period Class Activites . 1st | AP Bio | Activities about evolution with table groups. Homework: Taking notes for our unit, studying for clicker quiz, making flashcards, reading and watching about our unit | . 2nd | Math | Taking notes from lesson. Completing worksheets with table partners. Homework: Problems from the textbook | . 3rd | APCSP | Taking notes on lectures. Working on the weekly assignment. Collaborating with table partners | . 4th | AP World History | Activities with table partners. Interact with notes that were homework. Learning about religion and culture. Homework: Notes from the textbook | . 5th | Offroll | Volleyball practice/games during 5th period | .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/08/26/testing-out-images.html",
            "relUrl": "/markdown/2022/08/26/testing-out-images.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Markdown Post",
            "content": "My name is Ellie and I am a sophomore. .",
            "url": "https://1908901.github.io/elliepang/markdown/2022/08/22/mark.html",
            "relUrl": "/markdown/2022/08/22/mark.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Section 3.9-3.11 Notes",
            "content": "1 . Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . IF (isCold or isRaining) { stayInside ⟵ True } ELSE { stayInside ⟵ False } . 2 . Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . During a turn, each player gets 4 attempts/chances to get the greatest number possible. During each attempt, the player will use a random number generator to select a random number from 1 to 10. After they have had 4 chances, their score is the greatest number they received from the random number generator, and their turn is over. . import random numAttempts = [] i = 1 while i &lt;= 4: numAttempts.append(random.randint(1,10)) i = i +1 print(&quot;Attempts:&quot;, numAttempts) print (&quot;-&quot;) print(&quot;Maximum number from player:&quot;) print(max(numAttempts)) . Attempts: [9, 2, 9, 4] - Maximum number from player: 9 . 3 . Create an algorithm that will allow the arrow to reach the gray square: . for x in range(0, 3): move forward turn right for x in range(0, 5): move forward turn right for x in range(0, 2): move forward . # it is much more efficient coding wise { if CANMOVEFORWARD{ moveForwards } else{ if CANTURNRIGHT{ turnright } if CANTURNLEFT{ turnleft } } } . 4 . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See comment for image . 5 . Explain thoroughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process is repeated until the number 69 is found. . 6 . Make a diagram explaining how you found the list (not tree, include equation) . See comment for image . 7 . Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [”Market”,”Walmart”,“store”,Target”,”Ralphs”] . 8 . Explain why Binary Search is more efficient than Sequential Search . Binary search is more efficient because it moves exponentially while sequential search moves through the list one by one. Binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . 9 . [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . If I am searching for the number 11, which would take two iterations. You would start at 16, the middle index. Then you would do 3+5/2 to get 4, so the next middle index would be 11, which is the number we want to find. . See comment for image .",
            "url": "https://1908901.github.io/elliepang/2022/08/22/hacks9-11.html",
            "relUrl": "/2022/08/22/hacks9-11.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "This is my first notebook",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://1908901.github.io/elliepang/jupyter/2022/08/22/My-First-Notebook.html",
            "relUrl": "/jupyter/2022/08/22/My-First-Notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi my name is Ellie. .",
          "url": "https://1908901.github.io/elliepang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocab",
          "content": "Fundamental Vocab Definitions . Unit 3.1-3.2: Hacks . Grade: 0.90 . Unit 3.3-3.4: Hacks . Grade: Our group . Unit 3.5-3.7: Hacks . Grade: 0.90 . Unit 3.8-3.10:Hacks . Grade: 0.90 . Unit 2 Binary/Data Terms . bits: the minimum unit of binary information stored in a computer system. A bit can have only two states, on or off, which are commonly represented as ones and zeros. In our binary markdown we used to change the number of bits. . | bytes: A group of eight bits put together is known as a byte. A byte consists of 256 different combinations if you include the number 00000000 — all the binary numbers between 00000000 and 11111111. . | hexadecimal/nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. For example, when we use Javascript to change the color of the background on our blogs, we use hexadecimals like #eb4034, which would give us a red color. . | RGB- Hexadecimal is basically a short code for RGB color, they are simply different ways of communicating the same thing – a red, green, and blue color value. For example, (235, 64, 52) is the RGB for RED. Here’s an example of how it is implemented in our fastpages: a { color: rgb(255,255, 255) !important; } . | boolean- value that is either true or false . | ASCII- is a character encoding standard for electronic communication. . | Unicode- is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world’s writing systems. . | Data Compression- is the process of encoding, restructuring or otherwise modifying data in order to reduce its size. . | Lossy- in which unnecessary information is discarded. . | Lossless- is a class of data compression algorithms that allows the original data to be perfectly reconstructed from the compressed data. . | . Unit 3 Algorithm/Programming Terms . variables- A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. Some programming languages provide types to represent data, which are referenced using variables. . | data types- integer, string, float, boolean, lists, dictionaries, arrays, etc. . | lists- Lists are used to store multiple items in a single variable. . | dictionaries- A dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. . | . A plus sign indicates addition: a + b . A subtraction sign indicates subtraction: a - b . An asterisk/star indicates multiplication: a * b . A slash indicates division: a / b . MOD represent the Modulus operator. Returns the value after division: a MOD b . algorithms- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . | sequence- a section of code is run only if a condition is met. (ex: if statements) . | selection- repeating steps or instructions over and over again (ex: loops) . | iteration- outline or set of steps that we do and follow in order that they are given . | strings- a sequence of characters . | concatenation- combines two or more strings into one . | length- len function finds the number of characters in a string . | substring- a part of a existing string . | upper- upper() method returns the uppercase string from the given string. It converts all lowercase characters to uppercase. . | lower- lower() method returns the lowercase string from the given string. It converts all uppercase characters to lowercase. . | comparison operators- Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. . | Truth tables- A truth table is a way of summarizing and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. . | if statement- will go through certain statements if the if expression is true . | if-else- will go through a statement no matter what, but the statement which is run depends on the if expression is true or false . | elif- elif is short for “else if” and is used when the first if statement isn’t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . | nested selection statements- Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. Nesting processes are mostly used implemented in the selection control structures. . | For Loop: repeats a function for a set number of times; I is the number of times repeated. With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc. . | While Loop: the while loop is used to repeat a section of code an unknown number of times until a specific condition is met. A while loop will execute a set of statements as long as a condition is true. . | return values: The value that a function returns to the caller is generally known as the function’s return value. All Python functions have a return value, either explicit or implicit. . | class- A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions. Like function definitions begin with the def keyword in Python, class definitions begin with a class keyword. . | parameters- Parameters are the variables that appear between the brackets in the “def” line of a Python function definition. . | procedural abstraction- One good use of a procedure is to eliminate duplicate code. In addition to improving the readability of the app, the use of a procedure will make it easier to modify that chunk of code because it only occurs once in the program. Use of parameters and complexity. . | Python def procedures- A procedure allows us to group a block of code under a name, known as a procedure. . | . APCSP Week 1 Notes . In class we learned how to use bash and python such as python functions if/else statements and variables. | We learned about keys and that bash can make scripts with terminal/shell. | Static Text do not change. | Output in Jupyter Notebook is under the code cell. It will vary based on development intentions and tools. | Sequence of code: two or more lines forms a sequence. | “Msg”: parameter to print command, causing input to be output to terminal. | Procedural abstraction: grouping a sequence of commands. | .",
          "url": "https://1908901.github.io/elliepang/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  

  

  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://1908901.github.io/elliepang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}